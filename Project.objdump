
Project.elf:     file format elf32-littlenios2
Project.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001d4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000dab4 memsz 0x0000dab4 flags r-x
    LOAD off    0x0000ead4 vaddr 0x0000dad4 paddr 0x0000f530 align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x00010f8c vaddr 0x00010f8c paddr 0x00010f8c align 2**12
         filesz 0x00000000 memsz 0x00000348 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001b4  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d358  000001d4  000001d4  000011d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005a8  0000d52c  0000d52c  0000e52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0000dad4  0000f530  0000ead4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000348  00010f8c  00010f8c  00010f8c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010530  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000db8  00000000  00000000  00010558  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000167c  00000000  00000000  00011310  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025cb7  00000000  00000000  0001298c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008442  00000000  00000000  00038643  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014c7b  00000000  00000000  00040a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001c50  00000000  00000000  00055700  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000022c8  00000000  00000000  00057350  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c5e2  00000000  00000000  00059618  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00065bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  00065c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00069a3b  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00069a3e  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00069a41  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00069a42  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00069a46  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00069a4a  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00069a4e  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00069a57  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00069a60  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00069a69  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000055  00000000  00000000  00069a74  2**0
                  CONTENTS, READONLY
 28 .jdi          00004028  00000000  00000000  00069ac9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001d4 l    d  .text	00000000 .text
0000d52c l    d  .rodata	00000000 .rodata
0000dad4 l    d  .rwdata	00000000 .rwdata
00010f8c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
0000020c l       .text	00000000 alt_after_alt_main
000000b8 l       .exceptions	00000000 jump_here
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alarm_handler.c
00010fd4 l     O .bss	00000018 alarm
00000000 l    df *ABS*	00000000 mysem.c
00000000 l    df *ABS*	00000000 project1.c
00000000 l    df *ABS*	00000000 queue.c
00010fec l     O .bss	0000000c queue
00000000 l    df *ABS*	00000000 thread_handler.c
00010f98 l     O .bss	00000004 current_running_thread
00010f9c l     O .bss	00000004 main_stack_pointer
00000000 l    df *ABS*	00000000 thread_queue.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000dad4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001964 l     F .text	00000058 __sprint_r
0000d80e l     O .rodata	00000010 blanks.3452
0000d7fe l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000039c8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
00003b7c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005578 l     F .text	00000058 std
00005684 l     F .text	00000008 __fp_lock
0000568c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0000f504 l     O .rwdata	00000004 charset
0000d840 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000d988 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000093a0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000a4cc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ae94 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000aef4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000af20 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0000b054 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000b174 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b254 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000b3b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b5dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000f520 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0000ba1c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e490 l     O .rwdata	00001060 JTAG_UART
0000bb0c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000bd4c l     F .text	00000228 altera_avalon_jtag_uart_irq
0000bf74 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000c5f0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000c7c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000cbe4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000cd20 l     F .text	000000dc alt_file_locked
0000cf84 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
000017a8 g     F .text	0000001c putchar
00000498 g     F .text	00000120 customer
00006bf4 g     F .text	00000094 _mprec_log10
00006ce0 g     F .text	00000088 __any_on
000086b4 g     F .text	00000070 _isatty_r
0000d960 g     O .rodata	00000028 __mprec_tinytens
0000b410 g     F .text	0000006c alt_main
000017cc g     F .text	000000a0 _puts_r
00011044 g     O .bss	00000100 alt_irq
00008724 g     F .text	00000078 _lseek_r
0000f530 g       *ABS*	00000000 __flash_rwdata_start
00009ec0 g     F .text	00000088 __eqdf2
000112d4 g       *ABS*	00000000 __alt_heap_start
0000036c g     F .text	00000088 semDown
00001730 g     F .text	00000044 printf
00000448 g     F .text	00000028 semValue
00000e94 g     F .text	000000d4 thread_dequeue
00008034 g     F .text	00000068 __sseek
000055e0 g     F .text	000000a4 __sinit
00008234 g     F .text	00000130 __swbuf_r
000062b8 g     F .text	00000084 _setlocale_r
000056e0 g     F .text	00000068 __sfmoreglue
0000b49c g     F .text	00000020 __malloc_unlock
00006670 g     F .text	000000e0 memmove
000056d0 g     F .text	00000010 _cleanup
00006d68 g     F .text	000000bc _Balloc
00009fd0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000afc g     F .text	00000020 get_current_running_thread
00008640 g     F .text	00000074 _fstat_r
00010fac g     O .bss	00000004 errno
00010fc0 g     O .bss	00000004 alt_argv
000174f0 g       *ABS*	00000000 _gp
000009a0 g     F .text	0000015c mythread_create
0000e310 g     O .rwdata	00000180 alt_fd_list
00000db4 g     F .text	000000e0 thread_enqueue
000017c4 g     F .text	00000008 _putchar_r
0000d004 g     F .text	00000094 alt_find_dev
000065d0 g     F .text	000000a0 memcpy
000056c4 g     F .text	0000000c _cleanup_r
0000a168 g     F .text	000000f8 __floatsidf
0000cca8 g     F .text	00000078 alt_io_redirect
0000a0e0 g     F .text	00000088 __ltdf2
0000d52c g       *ABS*	00000000 __DTOR_END__
0000186c g     F .text	00000014 puts
0000cfe4 g     F .text	00000020 altera_nios2_irq_init
00006b44 g     F .text	000000b0 __ratio
0000c18c g     F .text	00000224 altera_avalon_jtag_uart_read
00000fdc g     F .text	00000014 malloc
00001774 g     F .text	00000034 _printf_r
0000a608 g     F .text	00000008 __udivsi3
0000b0b4 g     F .text	000000c0 isatty
0000d870 g     O .rodata	000000c8 __mprec_tens
00006294 g     F .text	00000008 __locale_charset
0000d270 g     F .text	00000090 alt_icache_flush
00010fa0 g     O .bss	00000004 __malloc_top_pad
0000f500 g     O .rwdata	00000004 __mb_cur_max
0000629c g     F .text	0000000c _localeconv_r
00007460 g     F .text	0000003c __i2b
00005c78 g     F .text	0000049c __sfvwrite_r
00001880 g     F .text	00000070 _sbrk_r
0000879c g     F .text	00000078 _read_r
0000e2dc g     O .rwdata	0000000c __lc_ctype
0000f518 g     O .rwdata	00000004 alt_max_fd
0000aa44 g     F .text	00000138 __unpack_d
0000851c g     F .text	00000110 _fclose_r
00005544 g     F .text	00000034 fflush
00010fa4 g     O .bss	00000004 __malloc_max_sbrked_mem
00009830 g     F .text	00000074 __adddf3
00006a24 g     F .text	00000120 __b2d
00008df0 g     F .text	000005b0 __umoddi3
0000b2c0 g     F .text	000000f0 lseek
0000f4f4 g     O .rwdata	00000004 _global_impure_ptr
000079c8 g     F .text	000005f4 _realloc_r
000112d4 g       *ABS*	00000000 __bss_end
0000caec g     F .text	000000f8 alt_iic_isr_register
0000b7f0 g     F .text	0000010c alt_tick
00008814 g     F .text	000005dc __udivdi3
0000d938 g     O .rodata	00000028 __mprec_bigtens
000076bc g     F .text	00000120 __s2b
0000a338 g     F .text	00000194 __floatunsidf
00006944 g     F .text	00000060 __mcmp
000056ac g     F .text	00000018 __fp_lock_all
0000caa4 g     F .text	00000048 alt_ic_irq_enabled
0000b758 g     F .text	00000098 alt_alarm_stop
00010fd0 g     O .bss	00000004 alt_irq_active
00000234 g     F .text	00000020 reset_alarmflag
0000010c g     F .exceptions	000000c8 alt_irq_handler
0000e2e8 g     O .rwdata	00000028 alt_dev_null
0000c6f0 g     F .text	0000001c alt_dcache_flush_all
00006810 g     F .text	00000070 __hi0bits
00000978 g     F .text	00000028 getQsize
0000a260 g     F .text	000000d8 __fixdfsi
0000f530 g       *ABS*	00000000 __ram_rwdata_end
0000f510 g     O .rwdata	00000008 alt_dev_list
0000b8fc g     F .text	00000120 write
000078e0 g     F .text	000000e8 _putc_r
0000dad4 g       *ABS*	00000000 __ram_rodata_end
0000af80 g     F .text	000000d4 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000759c g     F .text	00000120 __pow5mult
00010fb0 g     O .bss	00000004 __nlocale_changed
0000a610 g     F .text	00000008 __umodsi3
00011020 g     O .bss	0000000c mutex
000112d4 g       *ABS*	00000000 end
00000470 g     F .text	00000028 semThreadCount
0001102c g     O .bss	0000000c stylistAvailable
0000bc8c g     F .text	000000c0 altera_avalon_jtag_uart_init
000003f4 g     F .text	00000054 semUp
0000d528 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000c660 g     F .text	00000090 alt_avalon_timer_sc_init
0000a6b0 g     F .text	00000080 __clzsi2
0000c3b0 g     F .text	00000240 altera_avalon_jtag_uart_write
000055d0 g     F .text	00000004 __sfp_lock_acquire
000064ec g     F .text	000000e4 memchr
000019bc g     F .text	00001eac ___vfprintf_internal_r
00005964 g     F .text	00000314 _free_r
000039cc g     F .text	000001b0 __call_exitprocs
00010fb4 g     O .bss	00000004 __mlocale_changed
0000f4fc g     O .rwdata	00000004 __malloc_sbrk_base
000001d4 g     F .text	0000003c _start
00010fc8 g     O .bss	00000004 _alt_tick_rate
000005b8 g     F .text	000000fc stylist
00010f90 g     O .bss	00000004 waiting
0000712c g     F .text	0000014c __lshift
00010fcc g     O .bss	00000004 _alt_nticks
0000b4bc g     F .text	00000120 read
0000bab0 g     F .text	0000005c alt_sys_init
0000d388 g     F .text	00000134 __register_exitproc
00000bd0 g     F .text	000000f0 mythread_schedule
00000d7c g     F .text	00000038 initThreadQueue
00007278 g     F .text	000001e8 __multiply
0000c024 g     F .text	00000074 altera_avalon_jtag_uart_close
0000dad4 g       *ABS*	00000000 __ram_rwdata_start
0000d52c g       *ABS*	00000000 __ram_rodata_start
00010ff8 g     O .bss	00000028 __malloc_current_mallinfo
00006e24 g     F .text	0000017c __d2b
0000bb44 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000d1b8 g     F .text	000000b8 alt_get_fd
0000ab7c g     F .text	000000c8 __fpcmp_parts_d
000084ac g     F .text	00000070 _close_r
0000d314 g     F .text	00000074 memcmp
0000bbf4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000112d4 g       *ABS*	00000000 __alt_stack_base
0000bc3c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0000388c g     F .text	0000013c __swsetup_r
00009c68 g     F .text	00000258 __divdf3
00005748 g     F .text	000000f0 __sfp
00006c88 g     F .text	00000058 __copybits
0000ded4 g     O .rwdata	00000408 __malloc_av_
000055dc g     F .text	00000004 __sinit_lock_release
000098a4 g     F .text	000003c4 __muldf3
00000254 g     F .text	00000058 myinterrupt_handler
00010f94 g     O .bss	00000004 haircut
00008118 g     F .text	00000060 __sread
0000d098 g     F .text	00000120 alt_find_file
0000c70c g     F .text	000000b4 alt_dev_llist_insert
0000b47c g     F .text	00000020 __malloc_lock
0000b69c g     F .text	000000bc sbrk
00005348 g     F .text	000001fc _fflush_r
000083f8 g     F .text	000000b4 _calloc_r
00000d10 g     F .text	0000006c mythread_cleanup
00010f8c g       *ABS*	00000000 __bss_start
00006750 g     F .text	00000098 memset
000007c0 g     F .text	0000002c main
00010fc4 g     O .bss	00000004 alt_envp
00010fa8 g     O .bss	00000004 __malloc_max_total_mem
0000bb9c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00008364 g     F .text	0000001c __swbuf
0000802c g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
0000862c g     F .text	00000014 fclose
00011144 g     O .bss	00000190 _atexit0
00003d94 g     F .text	000015b4 _dtoa_r
00000ff0 g     F .text	00000740 _malloc_r
0000f51c g     O .rwdata	00000004 alt_errno
000061dc g     F .text	000000b8 _fwalk
000077dc g     F .text	00000104 putc
0000a548 g     F .text	00000060 __divsi3
0000d994 g     O .rodata	00000014 __thenan_df
00005838 g     F .text	0000012c _malloc_trim_r
0000d52c g       *ABS*	00000000 __CTOR_END__
00000cc0 g     F .text	00000050 mythread_isQempty
00008178 g     F .text	000000bc strcmp
0000d52c g       *ABS*	00000000 __flash_rodata_start
0000d52c g       *ABS*	00000000 __DTOR_LIST__
00009f48 g     F .text	00000088 __nedf2
0000ba7c g     F .text	00000034 alt_irq_init
00000b78 g     F .text	0000002c mythread_block
0000b63c g     F .text	00000060 alt_release_fd
0000d9a8 g     O .rodata	00000100 __clz_tab
00010fb8 g     O .bss	00000004 _PathLocale
0000d300 g     F .text	00000014 atexit
00008380 g     F .text	00000078 _write_r
0000633c g     F .text	0000001c setlocale
0000f4f0 g     O .rwdata	00000004 _impure_ptr
00010fbc g     O .bss	00000004 alt_argc
0000c884 g     F .text	00000064 _do_dtors
00000300 g     F .text	0000006c semInit
00000f68 g     F .text	00000028 thread_getQsize
00000020 g       .exceptions	00000000 alt_irq_entry
000069a4 g     F .text	00000080 __ulp
00007fbc g     F .text	00000040 __isinfd
00005694 g     F .text	00000018 __fp_unlock_all
0000f508 g     O .rwdata	00000008 alt_fs_list
000007ec g     F .text	000000d0 enqueue
00000020 g       *ABS*	00000000 __ram_exceptions_start
000062a8 g     F .text	00000010 localeconv
000002ac g     F .text	00000054 start_alarm_succeed
00000ba4 g     F .text	0000002c mythread_terminate
0000c918 g     F .text	00000050 alt_ic_isr_register
000008bc g     F .text	000000bc dequeue
0000f530 g       *ABS*	00000000 _edata
000112d4 g       *ABS*	00000000 _end
000001d4 g       *ABS*	00000000 __ram_exceptions_end
0000c098 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000ca04 g     F .text	000000a0 alt_ic_irq_disable
0000809c g     F .text	0000007c __swrite
0000f4f8 g     O .rwdata	00000004 __malloc_trim_threshold
00000f90 g     F .text	00000038 exit
00006114 g     F .text	000000c8 _fwalk_reent
00006fa0 g     F .text	0000018c __mdiff
0000a5a8 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000055d4 g     F .text	00000004 __sfp_lock_release
00007ffc g     F .text	00000030 __isnand
0000af60 g     F .text	00000020 _exit
0000ac44 g     F .text	00000154 alt_alarm_start
0000a618 g     F .text	00000098 __muldi3
00006358 g     F .text	00000194 __smakebuf_r
000018f0 g     F .text	00000074 strlen
0000cdfc g     F .text	00000188 open
00011038 g     O .bss	0000000c customerAvailable
0000a058 g     F .text	00000088 __gedf2
00000b1c g     F .text	0000002c mythread_start
08000000 g       *ABS*	00000000 __alt_mem_SRAM
0000c8e8 g     F .text	00000030 alt_icache_flush_all
0000f52c g     O .rwdata	00000004 alt_priority_mask
0000c968 g     F .text	0000009c alt_ic_irq_enable
00003868 g     F .text	00000024 __vfprintf_internal
000097b0 g     F .text	00000080 __subdf3
00006880 g     F .text	000000c4 __lo0bits
0000f524 g     O .rwdata	00000008 alt_alarm_list
0000c820 g     F .text	00000064 _do_ctors
00010f8c g     O .bss	00000004 alarmflag
09000000 g       *ABS*	00000000 __alt_mem_Onchip_memory
0000ad98 g     F .text	000000fc close
000006b4 g     F .text	0000010c os_primitive
0000b1d4 g     F .text	00000080 alt_load
0000a730 g     F .text	00000314 __pack_d
00000210 g     F .text	00000024 is_alarmflag_set
00000fc8 g     F .text	00000014 free
000055d8 g     F .text	00000004 __sinit_lock_acquire
0000749c g     F .text	00000100 __multadd
000067e8 g     F .text	00000028 _Bfree
00000b48 g     F .text	00000030 mythread_join



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08407514 	ori	at,at,468
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	000010c0 	call	10c <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
 		then "alarmflag" is reset and "mythread_scheduler" is called.
	Otherwise, exit.
*/

.section .exceptions.exit.user, "xa"  	/* assembler directive to place code in the corresponding section */
call is_alarmflag_set					/* check the alarmflag */
  98:	00002100 	call	210 <is_alarmflag_set>
beq  r2, r0, jump_here				   	/* if alarmflag has been set, then do (1) and (2); else, goto exit_here*/
  9c:	10000626 	beq	r2,zero,b8 <jump_here>
call reset_alarmflag					/* (1) reset alarmflag */
  a0:	00002340 	call	234 <reset_alarmflag>
mov  r4, sp								/* pass the current stack pointer to mythread_scheduler */
  a4:	d809883a 	mov	r4,sp
call mythread_schedule					/* (2) call mythread_scheduler to save the current stack pointer and return the next stack pointer */
  a8:	0000bd00 	call	bd0 <mythread_schedule>
stw  fp, -4(sp)							/* save the current frame pointer on top of the current stack */
  ac:	df3fff15 	stw	fp,-4(sp)
mov  sp, r2								/* load the next/new stack pointer */
  b0:	1037883a 	mov	sp,r2
ldw  fp, -4(sp)							/* load the next/new frame pointer */
  b4:	df3fff17 	ldw	fp,-4(sp)

000000b8 <jump_here>:
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  bc:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  c0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  cc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  d0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  dc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  e0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  e4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  ec:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  f0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  fc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 100:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 104:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 108:	ef80083a 	eret

0000010c <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10c:	defff904 	addi	sp,sp,-28
 110:	dfc00615 	stw	ra,24(sp)
 114:	df000515 	stw	fp,20(sp)
 118:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11c:	0005313a 	rdctl	r2,ipending
 120:	e0bffc15 	stw	r2,-16(fp)

  return active;
 124:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 128:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 12c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 130:	00800044 	movi	r2,1
 134:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 138:	e0ffff17 	ldw	r3,-4(fp)
 13c:	e0bffe17 	ldw	r2,-8(fp)
 140:	1884703a 	and	r2,r3,r2
 144:	1005003a 	cmpeq	r2,r2,zero
 148:	1000161e 	bne	r2,zero,1a4 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 14c:	e0bffd17 	ldw	r2,-12(fp)
 150:	00c00074 	movhi	r3,1
 154:	18c41104 	addi	r3,r3,4164
 158:	100490fa 	slli	r2,r2,3
 15c:	10c5883a 	add	r2,r2,r3
 160:	11400017 	ldw	r5,0(r2)
 164:	e0bffd17 	ldw	r2,-12(fp)
 168:	00c00074 	movhi	r3,1
 16c:	18c41104 	addi	r3,r3,4164
 170:	100490fa 	slli	r2,r2,3
 174:	10c5883a 	add	r2,r2,r3
 178:	10800104 	addi	r2,r2,4
 17c:	11000017 	ldw	r4,0(r2)
 180:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 184:	0005313a 	rdctl	r2,ipending
 188:	e0bffb15 	stw	r2,-20(fp)

  return active;
 18c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 190:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 194:	e0bfff17 	ldw	r2,-4(fp)
 198:	1004c03a 	cmpne	r2,r2,zero
 19c:	103fe31e 	bne	r2,zero,12c <alt_irq_handler+0x20>
 1a0:	00000706 	br	1c0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1a4:	e0bffe17 	ldw	r2,-8(fp)
 1a8:	1085883a 	add	r2,r2,r2
 1ac:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1b0:	e0bffd17 	ldw	r2,-12(fp)
 1b4:	10800044 	addi	r2,r2,1
 1b8:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1bc:	003fde06 	br	138 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

Disassembly of section .text:

000001d4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1d4:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1d8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1dc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1e0:	d69d3c14 	ori	gp,gp,29936
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1e4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1e8:	1083e314 	ori	r2,r2,3980

    movhi r3, %hi(__bss_end)
     1ec:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1f0:	18c4b514 	ori	r3,r3,4820

    beq r2, r3, 1f
     1f4:	10c00326 	beq	r2,r3,204 <_start+0x30>

0:
    stw zero, (r2)
     1f8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1fc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     200:	10fffd36 	bltu	r2,r3,1f8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     204:	000b1d40 	call	b1d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     208:	000b4100 	call	b410 <alt_main>

0000020c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     20c:	003fff06 	br	20c <alt_after_alt_main>

00000210 <is_alarmflag_set>:
/* a global flag for the alarm interrupt */
unsigned int alarmflag = 0;

/* test if "alarmflag" is set */
unsigned int is_alarmflag_set()
{
     210:	deffff04 	addi	sp,sp,-4
     214:	df000015 	stw	fp,0(sp)
     218:	d839883a 	mov	fp,sp
    return alarmflag != 0;
     21c:	d0a6a717 	ldw	r2,-25956(gp)
     220:	1004c03a 	cmpne	r2,r2,zero
}
     224:	e037883a 	mov	sp,fp
     228:	df000017 	ldw	fp,0(sp)
     22c:	dec00104 	addi	sp,sp,4
     230:	f800283a 	ret

00000234 <reset_alarmflag>:

/* reset "alarmflag" */
void reset_alarmflag()
{
     234:	deffff04 	addi	sp,sp,-4
     238:	df000015 	stw	fp,0(sp)
     23c:	d839883a 	mov	fp,sp
    alarmflag = 0;
     240:	d026a715 	stw	zero,-25956(gp)
}
     244:	e037883a 	mov	sp,fp
     248:	df000017 	ldw	fp,0(sp)
     24c:	dec00104 	addi	sp,sp,4
     250:	f800283a 	ret

00000254 <myinterrupt_handler>:

/* the alarm interrupt handler */
alt_u32 myinterrupt_handler(void* context)
{
     254:	defffd04 	addi	sp,sp,-12
     258:	dfc00215 	stw	ra,8(sp)
     25c:	df000115 	stw	fp,4(sp)
     260:	df000104 	addi	fp,sp,4
     264:	e13fff15 	stw	r4,-4(fp)
    alarmflag = 1;
     268:	00800044 	movi	r2,1
     26c:	d0a6a715 	stw	r2,-25956(gp)
    if(mythread_isQempty())
     270:	0000cc00 	call	cc0 <mythread_isQempty>
     274:	1005003a 	cmpeq	r2,r2,zero
     278:	1000031e 	bne	r2,zero,288 <myinterrupt_handler+0x34>
    {
        printf("Interrupted by the DE2 timer!\n");
     27c:	01000074 	movhi	r4,1
     280:	21354b04 	addi	r4,r4,-10964
     284:	000186c0 	call	186c <puts>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     288:	00800074 	movhi	r2,1
     28c:	1083f204 	addi	r2,r2,4040
     290:	10800017 	ldw	r2,0(r2)
    }

    return alt_ticks_per_second()>>FACTOR;
     294:	1004d0fa 	srli	r2,r2,3
}
     298:	e037883a 	mov	sp,fp
     29c:	dfc00117 	ldw	ra,4(sp)
     2a0:	df000017 	ldw	fp,0(sp)
     2a4:	dec00204 	addi	sp,sp,8
     2a8:	f800283a 	ret

000002ac <start_alarm_succeed>:

unsigned int start_alarm_succeed()
{
     2ac:	defffe04 	addi	sp,sp,-8
     2b0:	dfc00115 	stw	ra,4(sp)
     2b4:	df000015 	stw	fp,0(sp)
     2b8:	d839883a 	mov	fp,sp
     2bc:	00800074 	movhi	r2,1
     2c0:	1083f204 	addi	r2,r2,4040
     2c4:	10800017 	ldw	r2,0(r2)
    return alt_alarm_start(&alarm, (alt_ticks_per_second()>>FACTOR), myinterrupt_handler, NULL) >= 0;
     2c8:	100ad0fa 	srli	r5,r2,3
     2cc:	01000074 	movhi	r4,1
     2d0:	2103f504 	addi	r4,r4,4052
     2d4:	01800034 	movhi	r6,0
     2d8:	31809504 	addi	r6,r6,596
     2dc:	000f883a 	mov	r7,zero
     2e0:	000ac440 	call	ac44 <alt_alarm_start>
     2e4:	0084303a 	nor	r2,zero,r2
     2e8:	1004d7fa 	srli	r2,r2,31
}
     2ec:	e037883a 	mov	sp,fp
     2f0:	dfc00117 	ldw	ra,4(sp)
     2f4:	df000017 	ldw	fp,0(sp)
     2f8:	dec00204 	addi	sp,sp,8
     2fc:	f800283a 	ret

00000300 <semInit>:
    asm("movi et, 1");          \
    asm("wrctl status, et");    \
}

int semInit(semaphore * sem, int semVal)
{
     300:	defffb04 	addi	sp,sp,-20
     304:	dfc00415 	stw	ra,16(sp)
     308:	df000315 	stw	fp,12(sp)
     30c:	df000304 	addi	fp,sp,12
     310:	e13ffd15 	stw	r4,-12(fp)
     314:	e17ffe15 	stw	r5,-8(fp)
	/* add your code to initialize your semaphore here */
	if(semVal >= 0){
     318:	e0bffe17 	ldw	r2,-8(fp)
     31c:	1004803a 	cmplt	r2,r2,zero
     320:	10000b1e 	bne	r2,zero,350 <semInit+0x50>
	sem->value = semVal;
     324:	e0fffd17 	ldw	r3,-12(fp)
     328:	e0bffe17 	ldw	r2,-8(fp)
     32c:	18800115 	stw	r2,4(r3)
	sem->threadCount = 0;
     330:	e0bffd17 	ldw	r2,-12(fp)
     334:	10000015 	stw	zero,0(r2)
	initThreadQueue(sem->queue);
     338:	e0bffd17 	ldw	r2,-12(fp)
     33c:	11000217 	ldw	r4,8(r2)
     340:	0000d7c0 	call	d7c <initThreadQueue>
	return 1;
     344:	00800044 	movi	r2,1
     348:	e0bfff15 	stw	r2,-4(fp)
     34c:	00000106 	br	354 <semInit+0x54>
	}
	return 0;
     350:	e03fff15 	stw	zero,-4(fp)
     354:	e0bfff17 	ldw	r2,-4(fp)
}
     358:	e037883a 	mov	sp,fp
     35c:	dfc00117 	ldw	ra,4(sp)
     360:	df000017 	ldw	fp,0(sp)
     364:	dec00204 	addi	sp,sp,8
     368:	f800283a 	ret

0000036c <semDown>:

void semDown(semaphore * sem)
{
     36c:	defffd04 	addi	sp,sp,-12
     370:	dfc00215 	stw	ra,8(sp)
     374:	df000115 	stw	fp,4(sp)
     378:	df000104 	addi	fp,sp,4
     37c:	e13fff15 	stw	r4,-4(fp)
	/* implement your logic to perform down operation on a semaphore here */
	DISABLE_INTERRUPTS();
     380:	0001703a 	wrctl	status,zero
	//printf("Interrupts Disabled\n");
	while(sem->value == 0){
     384:	00000a06 	br	3b0 <semDown+0x44>
		thread_enqueue((sem->queue));
     388:	e0bfff17 	ldw	r2,-4(fp)
     38c:	11000217 	ldw	r4,8(r2)
     390:	0000db40 	call	db4 <thread_enqueue>
		//printf("Interrupts Enabled\n");
		ENABLE_INTERRUPTS();
     394:	06000044 	movi	et,1
     398:	c001703a 	wrctl	status,et
		//Need to burn quantum but run afterwards to put itself back in queue
		while(get_current_running_thread()->state == BLOCKED){
     39c:	0000afc0 	call	afc <get_current_running_thread>
     3a0:	10800417 	ldw	r2,16(r2)
     3a4:	108000e0 	cmpeqi	r2,r2,3
     3a8:	103ffc1e 	bne	r2,zero,39c <semDown+0x30>
			//burn quantum
		}
		DISABLE_INTERRUPTS();
     3ac:	0001703a 	wrctl	status,zero
void semDown(semaphore * sem)
{
	/* implement your logic to perform down operation on a semaphore here */
	DISABLE_INTERRUPTS();
	//printf("Interrupts Disabled\n");
	while(sem->value == 0){
     3b0:	e0bfff17 	ldw	r2,-4(fp)
     3b4:	10800117 	ldw	r2,4(r2)
     3b8:	1005003a 	cmpeq	r2,r2,zero
     3bc:	103ff21e 	bne	r2,zero,388 <semDown+0x1c>
		while(get_current_running_thread()->state == BLOCKED){
			//burn quantum
		}
		DISABLE_INTERRUPTS();
	}
	DISABLE_INTERRUPTS();
     3c0:	0001703a 	wrctl	status,zero
	//printf("Interrupts Disabled\n");
	sem->value = sem->value - 1;
     3c4:	e0bfff17 	ldw	r2,-4(fp)
     3c8:	10800117 	ldw	r2,4(r2)
     3cc:	10ffffc4 	addi	r3,r2,-1
     3d0:	e0bfff17 	ldw	r2,-4(fp)
     3d4:	10c00115 	stw	r3,4(r2)
	//printf("Interrupts Enabled\n");
	ENABLE_INTERRUPTS();
     3d8:	06000044 	movi	et,1
     3dc:	c001703a 	wrctl	status,et
}
     3e0:	e037883a 	mov	sp,fp
     3e4:	dfc00117 	ldw	ra,4(sp)
     3e8:	df000017 	ldw	fp,0(sp)
     3ec:	dec00204 	addi	sp,sp,8
     3f0:	f800283a 	ret

000003f4 <semUp>:

void semUp(semaphore * sem)
{
     3f4:	defffd04 	addi	sp,sp,-12
     3f8:	dfc00215 	stw	ra,8(sp)
     3fc:	df000115 	stw	fp,4(sp)
     400:	df000104 	addi	fp,sp,4
     404:	e13fff15 	stw	r4,-4(fp)
	DISABLE_INTERRUPTS();
     408:	0001703a 	wrctl	status,zero
	//printf("Interrupts Disabled\n");

	sem->value = sem->value + 1;
     40c:	e0bfff17 	ldw	r2,-4(fp)
     410:	10800117 	ldw	r2,4(r2)
     414:	10c00044 	addi	r3,r2,1
     418:	e0bfff17 	ldw	r2,-4(fp)
     41c:	10c00115 	stw	r3,4(r2)
	thread_dequeue(sem->queue);
     420:	e0bfff17 	ldw	r2,-4(fp)
     424:	11000217 	ldw	r4,8(r2)
     428:	0000e940 	call	e94 <thread_dequeue>
	//printf("Interrupts Enabled\n");

	ENABLE_INTERRUPTS();
     42c:	06000044 	movi	et,1
     430:	c001703a 	wrctl	status,et
	/* implement your logic to perform up operation on a semaphore here */
}
     434:	e037883a 	mov	sp,fp
     438:	dfc00117 	ldw	ra,4(sp)
     43c:	df000017 	ldw	fp,0(sp)
     440:	dec00204 	addi	sp,sp,8
     444:	f800283a 	ret

00000448 <semValue>:

unsigned int semValue(semaphore * sem)
{
     448:	defffe04 	addi	sp,sp,-8
     44c:	df000115 	stw	fp,4(sp)
     450:	df000104 	addi	fp,sp,4
     454:	e13fff15 	stw	r4,-4(fp)
	return sem->value;
     458:	e0bfff17 	ldw	r2,-4(fp)
     45c:	10800117 	ldw	r2,4(r2)
}
     460:	e037883a 	mov	sp,fp
     464:	df000017 	ldw	fp,0(sp)
     468:	dec00104 	addi	sp,sp,4
     46c:	f800283a 	ret

00000470 <semThreadCount>:

unsigned int semThreadCount(semaphore * sem)
{
     470:	defffe04 	addi	sp,sp,-8
     474:	df000115 	stw	fp,4(sp)
     478:	df000104 	addi	fp,sp,4
     47c:	e13fff15 	stw	r4,-4(fp)
	return sem->threadCount;
     480:	e0bfff17 	ldw	r2,-4(fp)
     484:	10800017 	ldw	r2,0(r2)
}
     488:	e037883a 	mov	sp,fp
     48c:	df000017 	ldw	fp,0(sp)
     490:	dec00104 	addi	sp,sp,4
     494:	f800283a 	ret

00000498 <customer>:

semaphore customerAvailable, stylistAvailable, mutex;


void customer(unsigned int tid)
{
     498:	defffc04 	addi	sp,sp,-16
     49c:	dfc00315 	stw	ra,12(sp)
     4a0:	df000215 	stw	fp,8(sp)
     4a4:	df000204 	addi	fp,sp,8
     4a8:	e13fff15 	stw	r4,-4(fp)
	int j;
	while(1){
		semDown(&mutex);
     4ac:	01000074 	movhi	r4,1
     4b0:	21040804 	addi	r4,r4,4128
     4b4:	000036c0 	call	36c <semDown>
		if (waiting < CHAIRS){
     4b8:	d0a6a817 	ldw	r2,-25952(gp)
     4bc:	10800148 	cmpgei	r2,r2,5
     4c0:	1000271e 	bne	r2,zero,560 <customer+0xc8>
			waiting = waiting + 1;
     4c4:	d0a6a817 	ldw	r2,-25952(gp)
     4c8:	10800044 	addi	r2,r2,1
     4cc:	d0a6a815 	stw	r2,-25952(gp)
			printf("C: %d customer(s) waiting.\n", waiting);
     4d0:	d166a817 	ldw	r5,-25952(gp)
     4d4:	01000074 	movhi	r4,1
     4d8:	21355304 	addi	r4,r4,-10932
     4dc:	00017300 	call	1730 <printf>
//			printf("HELLO\n");
			semUp(&customerAvailable);
     4e0:	01000074 	movhi	r4,1
     4e4:	21040e04 	addi	r4,r4,4152
     4e8:	00003f40 	call	3f4 <semUp>
			semUp(&mutex);
     4ec:	01000074 	movhi	r4,1
     4f0:	21040804 	addi	r4,r4,4128
     4f4:	00003f40 	call	3f4 <semUp>
			semDown(&stylistAvailable);
     4f8:	01000074 	movhi	r4,1
     4fc:	21040b04 	addi	r4,r4,4140
     500:	000036c0 	call	36c <semDown>
			printf("C: stylistAvailable = %d.\n", semThreadCount(&stylistAvailable));
     504:	01000074 	movhi	r4,1
     508:	21040b04 	addi	r4,r4,4140
     50c:	00004700 	call	470 <semThreadCount>
     510:	100b883a 	mov	r5,r2
     514:	01000074 	movhi	r4,1
     518:	21355a04 	addi	r4,r4,-10904
     51c:	00017300 	call	1730 <printf>
			printf("C: customerAvailable = %d.\n", semValue(&customerAvailable));
     520:	01000074 	movhi	r4,1
     524:	21040e04 	addi	r4,r4,4152
     528:	00004480 	call	448 <semValue>
     52c:	100b883a 	mov	r5,r2
     530:	01000074 	movhi	r4,1
     534:	21356104 	addi	r4,r4,-10876
     538:	00017300 	call	1730 <printf>
			printf("Thread %d is getting a haircut (%d).\n", tid, haircut++);
     53c:	d0a6a917 	ldw	r2,-25948(gp)
     540:	100d883a 	mov	r6,r2
     544:	10800044 	addi	r2,r2,1
     548:	d0a6a915 	stw	r2,-25948(gp)
     54c:	01000074 	movhi	r4,1
     550:	21356804 	addi	r4,r4,-10848
     554:	e17fff17 	ldw	r5,-4(fp)
     558:	00017300 	call	1730 <printf>
			for (j = 0; j < MAX; j++);
			printf("Thread %d is going shopping.\n", tid);
		}
	}

}
     55c:	00001106 	br	5a4 <customer+0x10c>
			printf("C: customerAvailable = %d.\n", semValue(&customerAvailable));
			printf("Thread %d is getting a haircut (%d).\n", tid, haircut++);
			break;
		}
		else{
			semUp(&mutex);
     560:	01000074 	movhi	r4,1
     564:	21040804 	addi	r4,r4,4128
     568:	00003f40 	call	3f4 <semUp>
			for (j = 0; j < MAX; j++);
     56c:	e03ffe15 	stw	zero,-8(fp)
     570:	00000306 	br	580 <customer+0xe8>
     574:	e0bffe17 	ldw	r2,-8(fp)
     578:	10800044 	addi	r2,r2,1
     57c:	e0bffe15 	stw	r2,-8(fp)
     580:	e0fffe17 	ldw	r3,-8(fp)
     584:	00800234 	movhi	r2,8
     588:	10a847c4 	addi	r2,r2,-24289
     58c:	10fff90e 	bge	r2,r3,574 <customer+0xdc>
			printf("Thread %d is going shopping.\n", tid);
     590:	01000074 	movhi	r4,1
     594:	21357204 	addi	r4,r4,-10808
     598:	e17fff17 	ldw	r5,-4(fp)
     59c:	00017300 	call	1730 <printf>
		}
	}
     5a0:	003fc206 	br	4ac <customer+0x14>

}
     5a4:	e037883a 	mov	sp,fp
     5a8:	dfc00117 	ldw	ra,4(sp)
     5ac:	df000017 	ldw	fp,0(sp)
     5b0:	dec00204 	addi	sp,sp,8
     5b4:	f800283a 	ret

000005b8 <stylist>:

void stylist(unsigned int tid)
{
     5b8:	defffc04 	addi	sp,sp,-16
     5bc:	dfc00315 	stw	ra,12(sp)
     5c0:	df000215 	stw	fp,8(sp)
     5c4:	df000204 	addi	fp,sp,8
     5c8:	e13fff15 	stw	r4,-4(fp)
	int j;
	while(1){
		printf("Stylist started.\n");
     5cc:	01000074 	movhi	r4,1
     5d0:	21357a04 	addi	r4,r4,-10776
     5d4:	000186c0 	call	186c <puts>
		semDown(&customerAvailable);
     5d8:	01000074 	movhi	r4,1
     5dc:	21040e04 	addi	r4,r4,4152
     5e0:	000036c0 	call	36c <semDown>
		semDown(&mutex);
     5e4:	01000074 	movhi	r4,1
     5e8:	21040804 	addi	r4,r4,4128
     5ec:	000036c0 	call	36c <semDown>
		waiting = waiting - 1;
     5f0:	d0a6a817 	ldw	r2,-25952(gp)
     5f4:	10bfffc4 	addi	r2,r2,-1
     5f8:	d0a6a815 	stw	r2,-25952(gp)
		semUp(&stylistAvailable);
     5fc:	01000074 	movhi	r4,1
     600:	21040b04 	addi	r4,r4,4140
     604:	00003f40 	call	3f4 <semUp>
		semUp(&mutex);
     608:	01000074 	movhi	r4,1
     60c:	21040804 	addi	r4,r4,4128
     610:	00003f40 	call	3f4 <semUp>
		printf("S: %d customer(s) waiting.\n", waiting);
     614:	d166a817 	ldw	r5,-25952(gp)
     618:	01000074 	movhi	r4,1
     61c:	21357f04 	addi	r4,r4,-10756
     620:	00017300 	call	1730 <printf>
		printf("S: customerAvailable = %d.\n", semThreadCount(&customerAvailable));
     624:	01000074 	movhi	r4,1
     628:	21040e04 	addi	r4,r4,4152
     62c:	00004700 	call	470 <semThreadCount>
     630:	100b883a 	mov	r5,r2
     634:	01000074 	movhi	r4,1
     638:	21358604 	addi	r4,r4,-10728
     63c:	00017300 	call	1730 <printf>
		printf("S: styllistAvaliable = %d.\n", semValue(&stylistAvailable));
     640:	01000074 	movhi	r4,1
     644:	21040b04 	addi	r4,r4,4140
     648:	00004480 	call	448 <semValue>
     64c:	100b883a 	mov	r5,r2
     650:	01000074 	movhi	r4,1
     654:	21358d04 	addi	r4,r4,-10700
     658:	00017300 	call	1730 <printf>
		for (j = 0; j < MAX; j++);
     65c:	e03ffe15 	stw	zero,-8(fp)
     660:	00000306 	br	670 <stylist+0xb8>
     664:	e0bffe17 	ldw	r2,-8(fp)
     668:	10800044 	addi	r2,r2,1
     66c:	e0bffe15 	stw	r2,-8(fp)
     670:	e0fffe17 	ldw	r3,-8(fp)
     674:	00800234 	movhi	r2,8
     678:	10a847c4 	addi	r2,r2,-24289
     67c:	10fff90e 	bge	r2,r3,664 <stylist+0xac>
		printf("Stylist (%d) is cutting hair.\n", tid);
     680:	01000074 	movhi	r4,1
     684:	21359404 	addi	r4,r4,-10672
     688:	e17fff17 	ldw	r5,-4(fp)
     68c:	00017300 	call	1730 <printf>
		if (haircut == NUM_THREADS)
     690:	d0a6a917 	ldw	r2,-25948(gp)
     694:	108003e0 	cmpeqi	r2,r2,15
     698:	1000011e 	bne	r2,zero,6a0 <stylist+0xe8>
			break;
	}
     69c:	003fcb06 	br	5cc <stylist+0x14>
}
     6a0:	e037883a 	mov	sp,fp
     6a4:	dfc00117 	ldw	ra,4(sp)
     6a8:	df000017 	ldw	fp,0(sp)
     6ac:	dec00204 	addi	sp,sp,8
     6b0:	f800283a 	ret

000006b4 <os_primitive>:

void os_primitive()
{
     6b4:	defffc04 	addi	sp,sp,-16
     6b8:	dfc00315 	stw	ra,12(sp)
     6bc:	df000215 	stw	fp,8(sp)
     6c0:	df000204 	addi	fp,sp,8
    unsigned int i;
    tcb *thread_pointer;
    semInit(&customerAvailable,0);
     6c4:	01000074 	movhi	r4,1
     6c8:	21040e04 	addi	r4,r4,4152
     6cc:	000b883a 	mov	r5,zero
     6d0:	00003000 	call	300 <semInit>
    semInit(&stylistAvailable,0);
     6d4:	01000074 	movhi	r4,1
     6d8:	21040b04 	addi	r4,r4,4140
     6dc:	000b883a 	mov	r5,zero
     6e0:	00003000 	call	300 <semInit>
    semInit(&mutex,1);
     6e4:	01000074 	movhi	r4,1
     6e8:	21040804 	addi	r4,r4,4128
     6ec:	01400044 	movi	r5,1
     6f0:	00003000 	call	300 <semInit>

    for (i = 0; i <= NUM_THREADS; i++)
     6f4:	e03fff15 	stw	zero,-4(fp)
     6f8:	00001706 	br	758 <os_primitive+0xa4>
    {
    	if (i == NUM_THREADS)
     6fc:	e0bfff17 	ldw	r2,-4(fp)
     700:	108003d8 	cmpnei	r2,r2,15
     704:	1000071e 	bne	r2,zero,724 <os_primitive+0x70>
    		thread_pointer = mythread_create(i, 4096, stylist);
     708:	e13fff17 	ldw	r4,-4(fp)
     70c:	01440004 	movi	r5,4096
     710:	01800034 	movhi	r6,0
     714:	31816e04 	addi	r6,r6,1464
     718:	00009a00 	call	9a0 <mythread_create>
     71c:	e0bffe15 	stw	r2,-8(fp)
     720:	00000606 	br	73c <os_primitive+0x88>
    	else
    		thread_pointer = mythread_create(i, 4096, customer);
     724:	e13fff17 	ldw	r4,-4(fp)
     728:	01440004 	movi	r5,4096
     72c:	01800034 	movhi	r6,0
     730:	31812604 	addi	r6,r6,1176
     734:	00009a00 	call	9a0 <mythread_create>
     738:	e0bffe15 	stw	r2,-8(fp)
        mythread_start(thread_pointer);
     73c:	e13ffe17 	ldw	r4,-8(fp)
     740:	0000b1c0 	call	b1c <mythread_start>
        mythread_join(thread_pointer);
     744:	e13ffe17 	ldw	r4,-8(fp)
     748:	0000b480 	call	b48 <mythread_join>
    tcb *thread_pointer;
    semInit(&customerAvailable,0);
    semInit(&stylistAvailable,0);
    semInit(&mutex,1);

    for (i = 0; i <= NUM_THREADS; i++)
     74c:	e0bfff17 	ldw	r2,-4(fp)
     750:	10800044 	addi	r2,r2,1
     754:	e0bfff15 	stw	r2,-4(fp)
     758:	e0bfff17 	ldw	r2,-4(fp)
     75c:	10800430 	cmpltui	r2,r2,16
     760:	103fe61e 	bne	r2,zero,6fc <os_primitive+0x48>
        mythread_start(thread_pointer);
        mythread_join(thread_pointer);
    }


    if ( start_alarm_succeed() )
     764:	00002ac0 	call	2ac <start_alarm_succeed>
     768:	1005003a 	cmpeq	r2,r2,zero
     76c:	1000041e 	bne	r2,zero,780 <os_primitive+0xcc>
        printf ("Start the alarm successfully\n");
     770:	01000074 	movhi	r4,1
     774:	21359c04 	addi	r4,r4,-10640
     778:	000186c0 	call	186c <puts>
     77c:	00000306 	br	78c <os_primitive+0xd8>
    else
        printf ("Unable to start the alarm\n");
     780:	01000074 	movhi	r4,1
     784:	2135a404 	addi	r4,r4,-10608
     788:	000186c0 	call	186c <puts>

    /* an endless while loop */
    while (1)
    {
        /* delay printf for a while */
        for (i = 0; i < MAX; i++);
     78c:	e03fff15 	stw	zero,-4(fp)
     790:	00000306 	br	7a0 <os_primitive+0xec>
     794:	e0bfff17 	ldw	r2,-4(fp)
     798:	10800044 	addi	r2,r2,1
     79c:	e0bfff15 	stw	r2,-4(fp)
     7a0:	e0ffff17 	ldw	r3,-4(fp)
     7a4:	00800234 	movhi	r2,8
     7a8:	10a847c4 	addi	r2,r2,-24289
     7ac:	10fff92e 	bgeu	r2,r3,794 <os_primitive+0xe0>
        printf ("My simple thread scheduler for CSE351\n");
     7b0:	01000074 	movhi	r4,1
     7b4:	2135ab04 	addi	r4,r4,-10580
     7b8:	000186c0 	call	186c <puts>
    }
     7bc:	003ff306 	br	78c <os_primitive+0xd8>

000007c0 <main>:
}

int main()
{
     7c0:	defffe04 	addi	sp,sp,-8
     7c4:	dfc00115 	stw	ra,4(sp)
     7c8:	df000015 	stw	fp,0(sp)
     7cc:	d839883a 	mov	fp,sp
    os_primitive();
     7d0:	00006b40 	call	6b4 <os_primitive>
    return 0;
     7d4:	0005883a 	mov	r2,zero
}
     7d8:	e037883a 	mov	sp,fp
     7dc:	dfc00117 	ldw	ra,4(sp)
     7e0:	df000017 	ldw	fp,0(sp)
     7e4:	dec00204 	addi	sp,sp,8
     7e8:	f800283a 	ret

000007ec <enqueue>:
#include "queue.h"

static Q_type queue = {NULL, NULL, 0};

void enqueue(void *data)
{
     7ec:	defffc04 	addi	sp,sp,-16
     7f0:	dfc00315 	stw	ra,12(sp)
     7f4:	df000215 	stw	fp,8(sp)
     7f8:	df000204 	addi	fp,sp,8
     7fc:	e13fff15 	stw	r4,-4(fp)
    E_type  *elem;

    if ((elem = (E_type *)malloc(sizeof(E_type))) == NULL)
     800:	01000204 	movi	r4,8
     804:	0000fdc0 	call	fdc <malloc>
     808:	e0bffe15 	stw	r2,-8(fp)
     80c:	e0bffe17 	ldw	r2,-8(fp)
     810:	1004c03a 	cmpne	r2,r2,zero
     814:	1000051e 	bne	r2,zero,82c <enqueue+0x40>
    {
        printf("Unable to allocate space!\n");
     818:	01000074 	movhi	r4,1
     81c:	2135b504 	addi	r4,r4,-10540
     820:	000186c0 	call	186c <puts>
        exit(1);
     824:	01000044 	movi	r4,1
     828:	0000f900 	call	f90 <exit>
    }
    elem->data = data;
     82c:	e0fffe17 	ldw	r3,-8(fp)
     830:	e0bfff17 	ldw	r2,-4(fp)
     834:	18800015 	stw	r2,0(r3)
    elem->next = NULL;
     838:	e0bffe17 	ldw	r2,-8(fp)
     83c:	10000115 	stw	zero,4(r2)

    if (queue.head == NULL)
     840:	00800074 	movhi	r2,1
     844:	1083fb04 	addi	r2,r2,4076
     848:	10800017 	ldw	r2,0(r2)
     84c:	1004c03a 	cmpne	r2,r2,zero
     850:	1000051e 	bne	r2,zero,868 <enqueue+0x7c>
        queue.head = elem;
     854:	00c00074 	movhi	r3,1
     858:	18c3fb04 	addi	r3,r3,4076
     85c:	e0bffe17 	ldw	r2,-8(fp)
     860:	18800015 	stw	r2,0(r3)
     864:	00000506 	br	87c <enqueue+0x90>
    else
        queue.tail->next = elem;
     868:	00800074 	movhi	r2,1
     86c:	1083fb04 	addi	r2,r2,4076
     870:	10c00117 	ldw	r3,4(r2)
     874:	e0bffe17 	ldw	r2,-8(fp)
     878:	18800115 	stw	r2,4(r3)
    queue.tail = elem;
     87c:	00c00074 	movhi	r3,1
     880:	18c3fb04 	addi	r3,r3,4076
     884:	e0bffe17 	ldw	r2,-8(fp)
     888:	18800115 	stw	r2,4(r3)

    queue.size++;
     88c:	00800074 	movhi	r2,1
     890:	1083fb04 	addi	r2,r2,4076
     894:	10800217 	ldw	r2,8(r2)
     898:	10c00044 	addi	r3,r2,1
     89c:	00800074 	movhi	r2,1
     8a0:	1083fb04 	addi	r2,r2,4076
     8a4:	10c00215 	stw	r3,8(r2)
}
     8a8:	e037883a 	mov	sp,fp
     8ac:	dfc00117 	ldw	ra,4(sp)
     8b0:	df000017 	ldw	fp,0(sp)
     8b4:	dec00204 	addi	sp,sp,8
     8b8:	f800283a 	ret

000008bc <dequeue>:

void *dequeue()
{
     8bc:	defffc04 	addi	sp,sp,-16
     8c0:	dfc00315 	stw	ra,12(sp)
     8c4:	df000215 	stw	fp,8(sp)
     8c8:	df000204 	addi	fp,sp,8
    E_type  *elem;
    void    *data = NULL;
     8cc:	e03ffe15 	stw	zero,-8(fp)

    if (queue.size != 0)
     8d0:	00800074 	movhi	r2,1
     8d4:	1083fb04 	addi	r2,r2,4076
     8d8:	10800217 	ldw	r2,8(r2)
     8dc:	1005003a 	cmpeq	r2,r2,zero
     8e0:	10001f1e 	bne	r2,zero,960 <dequeue+0xa4>
    {
        elem = queue.head;
     8e4:	00800074 	movhi	r2,1
     8e8:	1083fb04 	addi	r2,r2,4076
     8ec:	10800017 	ldw	r2,0(r2)
     8f0:	e0bfff15 	stw	r2,-4(fp)
        if (queue.size == 1)
     8f4:	00800074 	movhi	r2,1
     8f8:	1083fb04 	addi	r2,r2,4076
     8fc:	10800217 	ldw	r2,8(r2)
     900:	10800058 	cmpnei	r2,r2,1
     904:	1000031e 	bne	r2,zero,914 <dequeue+0x58>
            queue.tail = NULL;
     908:	00800074 	movhi	r2,1
     90c:	1083fb04 	addi	r2,r2,4076
     910:	10000115 	stw	zero,4(r2)
        queue.head = queue.head->next;
     914:	00800074 	movhi	r2,1
     918:	1083fb04 	addi	r2,r2,4076
     91c:	10800017 	ldw	r2,0(r2)
     920:	10c00117 	ldw	r3,4(r2)
     924:	00800074 	movhi	r2,1
     928:	1083fb04 	addi	r2,r2,4076
     92c:	10c00015 	stw	r3,0(r2)

        queue.size--;
     930:	00800074 	movhi	r2,1
     934:	1083fb04 	addi	r2,r2,4076
     938:	10800217 	ldw	r2,8(r2)
     93c:	10ffffc4 	addi	r3,r2,-1
     940:	00800074 	movhi	r2,1
     944:	1083fb04 	addi	r2,r2,4076
     948:	10c00215 	stw	r3,8(r2)
        data = elem->data;
     94c:	e0bfff17 	ldw	r2,-4(fp)
     950:	10800017 	ldw	r2,0(r2)
     954:	e0bffe15 	stw	r2,-8(fp)
        free(elem);
     958:	e13fff17 	ldw	r4,-4(fp)
     95c:	0000fc80 	call	fc8 <free>
    }

    return data;
     960:	e0bffe17 	ldw	r2,-8(fp)
}
     964:	e037883a 	mov	sp,fp
     968:	dfc00117 	ldw	ra,4(sp)
     96c:	df000017 	ldw	fp,0(sp)
     970:	dec00204 	addi	sp,sp,8
     974:	f800283a 	ret

00000978 <getQsize>:

unsigned int getQsize()
{
     978:	deffff04 	addi	sp,sp,-4
     97c:	df000015 	stw	fp,0(sp)
     980:	d839883a 	mov	fp,sp
    return queue.size;
     984:	00800074 	movhi	r2,1
     988:	1083fb04 	addi	r2,r2,4076
     98c:	10800217 	ldw	r2,8(r2)
}
     990:	e037883a 	mov	sp,fp
     994:	df000017 	ldw	fp,0(sp)
     998:	dec00104 	addi	sp,sp,4
     99c:	f800283a 	ret

000009a0 <mythread_create>:

/* pointing to the stack/context of main() */
static unsigned int *main_stack_pointer = NULL;

tcb *mythread_create(unsigned int tid, unsigned int stack_size, void (*mythread)(unsigned int tid))
{
     9a0:	defff904 	addi	sp,sp,-28
     9a4:	dfc00615 	stw	ra,24(sp)
     9a8:	df000515 	stw	fp,20(sp)
     9ac:	df000504 	addi	fp,sp,20
     9b0:	e13ffd15 	stw	r4,-12(fp)
     9b4:	e17ffe15 	stw	r5,-8(fp)
     9b8:	e1bfff15 	stw	r6,-4(fp)
    unsigned int *tmp_ptr;

    /* allocate a tcb for a thread */
    tcb *thread_pointer;

    thread_pointer                      = (tcb *)malloc(sizeof(tcb));
     9bc:	01000504 	movi	r4,20
     9c0:	0000fdc0 	call	fdc <malloc>
     9c4:	e0bffb15 	stw	r2,-20(fp)
    if (thread_pointer == NULL)
     9c8:	e0bffb17 	ldw	r2,-20(fp)
     9cc:	1004c03a 	cmpne	r2,r2,zero
     9d0:	1000051e 	bne	r2,zero,9e8 <mythread_create+0x48>
    {
        printf("Unable to allocate space!\n");
     9d4:	01000074 	movhi	r4,1
     9d8:	2135bc04 	addi	r4,r4,-10512
     9dc:	000186c0 	call	186c <puts>
        exit(1);
     9e0:	01000044 	movi	r4,1
     9e4:	0000f900 	call	f90 <exit>
    }

    /* initialize the thread's tcb */
    thread_pointer->tid                 = tid;
     9e8:	e0fffb17 	ldw	r3,-20(fp)
     9ec:	e0bffd17 	ldw	r2,-12(fp)
     9f0:	18800015 	stw	r2,0(r3)
    thread_pointer->stack               = (unsigned int *)malloc(sizeof(unsigned int) * stack_size);
     9f4:	e0bffe17 	ldw	r2,-8(fp)
     9f8:	1085883a 	add	r2,r2,r2
     9fc:	1085883a 	add	r2,r2,r2
     a00:	1009883a 	mov	r4,r2
     a04:	0000fdc0 	call	fdc <malloc>
     a08:	1007883a 	mov	r3,r2
     a0c:	e0bffb17 	ldw	r2,-20(fp)
     a10:	10c00115 	stw	r3,4(r2)
    if (thread_pointer->stack == NULL)
     a14:	e0bffb17 	ldw	r2,-20(fp)
     a18:	10800117 	ldw	r2,4(r2)
     a1c:	1004c03a 	cmpne	r2,r2,zero
     a20:	1000051e 	bne	r2,zero,a38 <mythread_create+0x98>
    {
        printf("Unable to allocate space!\n");
     a24:	01000074 	movhi	r4,1
     a28:	2135bc04 	addi	r4,r4,-10512
     a2c:	000186c0 	call	186c <puts>
        exit(1);
     a30:	01000044 	movi	r4,1
     a34:	0000f900 	call	f90 <exit>
    }
    thread_pointer->stack_size          = stack_size;
     a38:	e0fffb17 	ldw	r3,-20(fp)
     a3c:	e0bffe17 	ldw	r2,-8(fp)
     a40:	18800215 	stw	r2,8(r3)
    thread_pointer->stack_pointer       = (unsigned int *)(thread_pointer->stack + stack_size - 19);
     a44:	e0bffb17 	ldw	r2,-20(fp)
     a48:	10c00117 	ldw	r3,4(r2)
     a4c:	e0bffe17 	ldw	r2,-8(fp)
     a50:	1085883a 	add	r2,r2,r2
     a54:	1085883a 	add	r2,r2,r2
     a58:	1885883a 	add	r2,r3,r2
     a5c:	10ffed04 	addi	r3,r2,-76
     a60:	e0bffb17 	ldw	r2,-20(fp)
     a64:	10c00315 	stw	r3,12(r2)
    thread_pointer->state               = NEW;
     a68:	e0bffb17 	ldw	r2,-20(fp)
     a6c:	10000415 	stw	zero,16(r2)

    /* initialize the thread's stack */
    tmp_ptr                             = thread_pointer->stack_pointer;
     a70:	e0bffb17 	ldw	r2,-20(fp)
     a74:	10800317 	ldw	r2,12(r2)
     a78:	e0bffc15 	stw	r2,-16(fp)
    tmp_ptr[18]                         = (unsigned int)mythread;                               // ea
     a7c:	e0bffc17 	ldw	r2,-16(fp)
     a80:	10c01204 	addi	r3,r2,72
     a84:	e0bfff17 	ldw	r2,-4(fp)
     a88:	18800015 	stw	r2,0(r3)
    tmp_ptr[17]                         = 1;                                                    // estatus
     a8c:	e0bffc17 	ldw	r2,-16(fp)
     a90:	10c01104 	addi	r3,r2,68
     a94:	00800044 	movi	r2,1
     a98:	18800015 	stw	r2,0(r3)
    tmp_ptr[5]                          = tid;                                                  // r4
     a9c:	e0bffc17 	ldw	r2,-16(fp)
     aa0:	10c00504 	addi	r3,r2,20
     aa4:	e0bffd17 	ldw	r2,-12(fp)
     aa8:	18800015 	stw	r2,0(r3)
    tmp_ptr[0]                          = (unsigned int)mythread_cleanup;                       // ra
     aac:	00800034 	movhi	r2,0
     ab0:	10834404 	addi	r2,r2,3344
     ab4:	1007883a 	mov	r3,r2
     ab8:	e0bffc17 	ldw	r2,-16(fp)
     abc:	10c00015 	stw	r3,0(r2)
    tmp_ptr[-1]                         = (unsigned int)(thread_pointer->stack + stack_size);   // fp
     ac0:	e0bffc17 	ldw	r2,-16(fp)
     ac4:	113fff04 	addi	r4,r2,-4
     ac8:	e0bffb17 	ldw	r2,-20(fp)
     acc:	10c00117 	ldw	r3,4(r2)
     ad0:	e0bffe17 	ldw	r2,-8(fp)
     ad4:	1085883a 	add	r2,r2,r2
     ad8:	1085883a 	add	r2,r2,r2
     adc:	1885883a 	add	r2,r3,r2
     ae0:	20800015 	stw	r2,0(r4)

    return thread_pointer;
     ae4:	e0bffb17 	ldw	r2,-20(fp)
}
     ae8:	e037883a 	mov	sp,fp
     aec:	dfc00117 	ldw	ra,4(sp)
     af0:	df000017 	ldw	fp,0(sp)
     af4:	dec00204 	addi	sp,sp,8
     af8:	f800283a 	ret

00000afc <get_current_running_thread>:

tcb *get_current_running_thread()
{
     afc:	deffff04 	addi	sp,sp,-4
     b00:	df000015 	stw	fp,0(sp)
     b04:	d839883a 	mov	fp,sp
	return current_running_thread;
     b08:	d0a6aa17 	ldw	r2,-25944(gp)
}
     b0c:	e037883a 	mov	sp,fp
     b10:	df000017 	ldw	fp,0(sp)
     b14:	dec00104 	addi	sp,sp,4
     b18:	f800283a 	ret

00000b1c <mythread_start>:

/* NEW ----> READY */
void mythread_start(tcb *thread_pointer)
{
     b1c:	defffe04 	addi	sp,sp,-8
     b20:	df000115 	stw	fp,4(sp)
     b24:	df000104 	addi	fp,sp,4
     b28:	e13fff15 	stw	r4,-4(fp)
    // assert(thread_pointer && thread_pointer->state == NEW);
    thread_pointer->state = READY;
     b2c:	e0ffff17 	ldw	r3,-4(fp)
     b30:	00800044 	movi	r2,1
     b34:	18800415 	stw	r2,16(r3)
}
     b38:	e037883a 	mov	sp,fp
     b3c:	df000017 	ldw	fp,0(sp)
     b40:	dec00104 	addi	sp,sp,4
     b44:	f800283a 	ret

00000b48 <mythread_join>:

/* READY --push into--> readyQ */
void mythread_join(tcb *thread_pointer)
{
     b48:	defffd04 	addi	sp,sp,-12
     b4c:	dfc00215 	stw	ra,8(sp)
     b50:	df000115 	stw	fp,4(sp)
     b54:	df000104 	addi	fp,sp,4
     b58:	e13fff15 	stw	r4,-4(fp)
    // assert(thread_pointer && thread_pointer->state == READY);
    enqueue((void *)thread_pointer);
     b5c:	e13fff17 	ldw	r4,-4(fp)
     b60:	00007ec0 	call	7ec <enqueue>
}
     b64:	e037883a 	mov	sp,fp
     b68:	dfc00117 	ldw	ra,4(sp)
     b6c:	df000017 	ldw	fp,0(sp)
     b70:	dec00204 	addi	sp,sp,8
     b74:	f800283a 	ret

00000b78 <mythread_block>:

/* RUNNING ----> BLOCKED */
void mythread_block(tcb *thread_pointer)
{
     b78:	defffe04 	addi	sp,sp,-8
     b7c:	df000115 	stw	fp,4(sp)
     b80:	df000104 	addi	fp,sp,4
     b84:	e13fff15 	stw	r4,-4(fp)
    // assert(thread_pointer && thread_pointer->state == RUNNING);
    thread_pointer->state = BLOCKED;
     b88:	e0ffff17 	ldw	r3,-4(fp)
     b8c:	008000c4 	movi	r2,3
     b90:	18800415 	stw	r2,16(r3)
}
     b94:	e037883a 	mov	sp,fp
     b98:	df000017 	ldw	fp,0(sp)
     b9c:	dec00104 	addi	sp,sp,4
     ba0:	f800283a 	ret

00000ba4 <mythread_terminate>:

/* RUNNING ----> TERMINATED */
void mythread_terminate(tcb *thread_pointer)
{
     ba4:	defffe04 	addi	sp,sp,-8
     ba8:	df000115 	stw	fp,4(sp)
     bac:	df000104 	addi	fp,sp,4
     bb0:	e13fff15 	stw	r4,-4(fp)
    // assert(thread_pointer && thread_pointer->state == RUNNING);
    thread_pointer->state = TERMINATED;
     bb4:	e0ffff17 	ldw	r3,-4(fp)
     bb8:	00800104 	movi	r2,4
     bbc:	18800415 	stw	r2,16(r3)
}
     bc0:	e037883a 	mov	sp,fp
     bc4:	df000017 	ldw	fp,0(sp)
     bc8:	dec00104 	addi	sp,sp,4
     bcc:	f800283a 	ret

00000bd0 <mythread_schedule>:

void *mythread_schedule(void *context)
{
     bd0:	defffd04 	addi	sp,sp,-12
     bd4:	dfc00215 	stw	ra,8(sp)
     bd8:	df000115 	stw	fp,4(sp)
     bdc:	df000104 	addi	fp,sp,4
     be0:	e13fff15 	stw	r4,-4(fp)
    if (getQsize() > 0)
     be4:	00009780 	call	978 <getQsize>
     be8:	1005003a 	cmpeq	r2,r2,zero
     bec:	1000261e 	bne	r2,zero,c88 <mythread_schedule+0xb8>
    {
        if (current_running_thread != NULL)
     bf0:	d0a6aa17 	ldw	r2,-25944(gp)
     bf4:	1005003a 	cmpeq	r2,r2,zero
     bf8:	1000091e 	bne	r2,zero,c20 <mythread_schedule+0x50>
        {
            // assert(current_running_thread->state == RUNNING);
            // assert(main_stack_pointer != NULL);
            current_running_thread->state = READY;
     bfc:	d0e6aa17 	ldw	r3,-25944(gp)
     c00:	00800044 	movi	r2,1
     c04:	18800415 	stw	r2,16(r3)
            current_running_thread->stack_pointer = (unsigned int *)context;
     c08:	d0e6aa17 	ldw	r3,-25944(gp)
     c0c:	e0bfff17 	ldw	r2,-4(fp)
     c10:	18800315 	stw	r2,12(r3)
            enqueue(current_running_thread);
     c14:	d126aa17 	ldw	r4,-25944(gp)
     c18:	00007ec0 	call	7ec <enqueue>
     c1c:	00000506 	br	c34 <mythread_schedule+0x64>
        }
        else if (main_stack_pointer == NULL)
     c20:	d0a6ab17 	ldw	r2,-25940(gp)
     c24:	1004c03a 	cmpne	r2,r2,zero
     c28:	1000021e 	bne	r2,zero,c34 <mythread_schedule+0x64>
        {
            main_stack_pointer = (unsigned int *)context;
     c2c:	e0bfff17 	ldw	r2,-4(fp)
     c30:	d0a6ab15 	stw	r2,-25940(gp)
        }

        current_running_thread = (tcb *)dequeue();
     c34:	00008bc0 	call	8bc <dequeue>
     c38:	d0a6aa15 	stw	r2,-25944(gp)
        while (current_running_thread->state == BLOCKED){
     c3c:	00000706 	br	c5c <mythread_schedule+0x8c>
        	printf("Blocked thread is scheduled.\n");
     c40:	01000074 	movhi	r4,1
     c44:	2135c304 	addi	r4,r4,-10484
     c48:	000186c0 	call	186c <puts>
        	 enqueue(current_running_thread);
     c4c:	d126aa17 	ldw	r4,-25944(gp)
     c50:	00007ec0 	call	7ec <enqueue>
             current_running_thread = (tcb *)dequeue();
     c54:	00008bc0 	call	8bc <dequeue>
     c58:	d0a6aa15 	stw	r2,-25944(gp)
        {
            main_stack_pointer = (unsigned int *)context;
        }

        current_running_thread = (tcb *)dequeue();
        while (current_running_thread->state == BLOCKED){
     c5c:	d0a6aa17 	ldw	r2,-25944(gp)
     c60:	10800417 	ldw	r2,16(r2)
     c64:	108000e0 	cmpeqi	r2,r2,3
     c68:	103ff51e 	bne	r2,zero,c40 <mythread_schedule+0x70>
        	printf("Blocked thread is scheduled.\n");
        	 enqueue(current_running_thread);
             current_running_thread = (tcb *)dequeue();
        }
        // assert(current_running_thread->state == READY);
        current_running_thread->state = RUNNING;
     c6c:	d0e6aa17 	ldw	r3,-25944(gp)
     c70:	00800084 	movi	r2,2
     c74:	18800415 	stw	r2,16(r3)

        context = (void *)(current_running_thread->stack_pointer);
     c78:	d0a6aa17 	ldw	r2,-25944(gp)
     c7c:	10800317 	ldw	r2,12(r2)
     c80:	e0bfff15 	stw	r2,-4(fp)
     c84:	00000806 	br	ca8 <mythread_schedule+0xd8>
    }
    else if (current_running_thread==NULL && main_stack_pointer!=NULL)
     c88:	d0a6aa17 	ldw	r2,-25944(gp)
     c8c:	1004c03a 	cmpne	r2,r2,zero
     c90:	1000051e 	bne	r2,zero,ca8 <mythread_schedule+0xd8>
     c94:	d0a6ab17 	ldw	r2,-25940(gp)
     c98:	1005003a 	cmpeq	r2,r2,zero
     c9c:	1000021e 	bne	r2,zero,ca8 <mythread_schedule+0xd8>
    {
        context = (void *)main_stack_pointer;
     ca0:	d0a6ab17 	ldw	r2,-25940(gp)
     ca4:	e0bfff15 	stw	r2,-4(fp)
    }

    return context;
     ca8:	e0bfff17 	ldw	r2,-4(fp)
}
     cac:	e037883a 	mov	sp,fp
     cb0:	dfc00117 	ldw	ra,4(sp)
     cb4:	df000017 	ldw	fp,0(sp)
     cb8:	dec00204 	addi	sp,sp,8
     cbc:	f800283a 	ret

00000cc0 <mythread_isQempty>:

unsigned int mythread_isQempty()
{
     cc0:	defffd04 	addi	sp,sp,-12
     cc4:	dfc00215 	stw	ra,8(sp)
     cc8:	df000115 	stw	fp,4(sp)
     ccc:	df000104 	addi	fp,sp,4
    return (getQsize() == 0) && (current_running_thread == NULL);
     cd0:	00009780 	call	978 <getQsize>
     cd4:	1004c03a 	cmpne	r2,r2,zero
     cd8:	1000061e 	bne	r2,zero,cf4 <mythread_isQempty+0x34>
     cdc:	d0a6aa17 	ldw	r2,-25944(gp)
     ce0:	1004c03a 	cmpne	r2,r2,zero
     ce4:	1000031e 	bne	r2,zero,cf4 <mythread_isQempty+0x34>
     ce8:	00800044 	movi	r2,1
     cec:	e0bfff15 	stw	r2,-4(fp)
     cf0:	00000106 	br	cf8 <mythread_isQempty+0x38>
     cf4:	e03fff15 	stw	zero,-4(fp)
     cf8:	e0bfff17 	ldw	r2,-4(fp)
}
     cfc:	e037883a 	mov	sp,fp
     d00:	dfc00117 	ldw	ra,4(sp)
     d04:	df000017 	ldw	fp,0(sp)
     d08:	dec00204 	addi	sp,sp,8
     d0c:	f800283a 	ret

00000d10 <mythread_cleanup>:

void mythread_cleanup()
{
     d10:	defffd04 	addi	sp,sp,-12
     d14:	dfc00215 	stw	ra,8(sp)
     d18:	df000115 	stw	fp,4(sp)
     d1c:	df000104 	addi	fp,sp,4
	int count = 0;
     d20:	e03fff15 	stw	zero,-4(fp)
    DISABLE_INTERRUPTS();
     d24:	0001703a 	wrctl	status,zero
    mythread_terminate(current_running_thread);
     d28:	d126aa17 	ldw	r4,-25944(gp)
     d2c:	0000ba40 	call	ba4 <mythread_terminate>
    free(current_running_thread->stack);
     d30:	d0a6aa17 	ldw	r2,-25944(gp)
     d34:	11000117 	ldw	r4,4(r2)
     d38:	0000fc80 	call	fc8 <free>
    free(current_running_thread);
     d3c:	d126aa17 	ldw	r4,-25944(gp)
     d40:	0000fc80 	call	fc8 <free>
    current_running_thread = NULL;
     d44:	d026aa15 	stw	zero,-25944(gp)
    ENABLE_INTERRUPTS();
     d48:	06000044 	movi	et,1
     d4c:	c001703a 	wrctl	status,et
    while(1){
    	for (count = 0; count < DELAY; count++);
     d50:	e03fff15 	stw	zero,-4(fp)
     d54:	00000306 	br	d64 <mythread_cleanup+0x54>
     d58:	e0bfff17 	ldw	r2,-4(fp)
     d5c:	10800044 	addi	r2,r2,1
     d60:	e0bfff15 	stw	r2,-4(fp)
     d64:	e0bfff17 	ldw	r2,-4(fp)
     d68:	1089c410 	cmplti	r2,r2,10000
     d6c:	103ffa1e 	bne	r2,zero,d58 <mythread_cleanup+0x48>
    	printf(".");
     d70:	01000b84 	movi	r4,46
     d74:	00017a80 	call	17a8 <putchar>
    }
     d78:	003ff506 	br	d50 <mythread_cleanup+0x40>

00000d7c <initThreadQueue>:
#include <stdio.h>
#include "thread_handler.h"
#include "thread_queue.h"

void initThreadQueue(TQ_type *queue) {
     d7c:	defffe04 	addi	sp,sp,-8
     d80:	df000115 	stw	fp,4(sp)
     d84:	df000104 	addi	fp,sp,4
     d88:	e13fff15 	stw	r4,-4(fp)
    // Initialize queue variable
    queue->head = NULL;
     d8c:	e0bfff17 	ldw	r2,-4(fp)
     d90:	10000015 	stw	zero,0(r2)
    queue->tail = NULL;
     d94:	e0bfff17 	ldw	r2,-4(fp)
     d98:	10000115 	stw	zero,4(r2)
    queue->size = 0;
     d9c:	e0bfff17 	ldw	r2,-4(fp)
     da0:	10000215 	stw	zero,8(r2)
}
     da4:	e037883a 	mov	sp,fp
     da8:	df000017 	ldw	fp,0(sp)
     dac:	dec00104 	addi	sp,sp,4
     db0:	f800283a 	ret

00000db4 <thread_enqueue>:

void thread_enqueue(TQ_type *queue)
{
     db4:	defffc04 	addi	sp,sp,-16
     db8:	dfc00315 	stw	ra,12(sp)
     dbc:	df000215 	stw	fp,8(sp)
     dc0:	df000204 	addi	fp,sp,8
     dc4:	e13fff15 	stw	r4,-4(fp)
    T_type  *elem;

    elem = (T_type *) malloc(sizeof(T_type));
     dc8:	01000204 	movi	r4,8
     dcc:	0000fdc0 	call	fdc <malloc>
     dd0:	e0bffe15 	stw	r2,-8(fp)

    if (elem == NULL)
     dd4:	e0bffe17 	ldw	r2,-8(fp)
     dd8:	1004c03a 	cmpne	r2,r2,zero
     ddc:	1000051e 	bne	r2,zero,df4 <thread_enqueue+0x40>
    {
        printf("Unable to allocate space!\n");
     de0:	01000074 	movhi	r4,1
     de4:	2135cb04 	addi	r4,r4,-10452
     de8:	000186c0 	call	186c <puts>
        exit(1);
     dec:	01000044 	movi	r4,1
     df0:	0000f900 	call	f90 <exit>
    }

    elem->data = get_current_running_thread();
     df4:	0000afc0 	call	afc <get_current_running_thread>
     df8:	1007883a 	mov	r3,r2
     dfc:	e0bffe17 	ldw	r2,-8(fp)
     e00:	10c00015 	stw	r3,0(r2)
    elem->next = NULL;
     e04:	e0bffe17 	ldw	r2,-8(fp)
     e08:	10000115 	stw	zero,4(r2)

    if (queue->head == NULL) {
     e0c:	e0bfff17 	ldw	r2,-4(fp)
     e10:	10800017 	ldw	r2,0(r2)
     e14:	1004c03a 	cmpne	r2,r2,zero
     e18:	1000041e 	bne	r2,zero,e2c <thread_enqueue+0x78>
        queue->head = elem;
     e1c:	e0ffff17 	ldw	r3,-4(fp)
     e20:	e0bffe17 	ldw	r2,-8(fp)
     e24:	18800015 	stw	r2,0(r3)
     e28:	00000406 	br	e3c <thread_enqueue+0x88>
    }
    else {
        queue->tail->next = elem;
     e2c:	e0bfff17 	ldw	r2,-4(fp)
     e30:	10c00117 	ldw	r3,4(r2)
     e34:	e0bffe17 	ldw	r2,-8(fp)
     e38:	18800115 	stw	r2,4(r3)
    }

    // Block added thread
    mythread_block(get_current_running_thread());
     e3c:	0000afc0 	call	afc <get_current_running_thread>
     e40:	1009883a 	mov	r4,r2
     e44:	0000b780 	call	b78 <mythread_block>
    printf("Thread is getting enqueued %d\n", elem->data->tid);
     e48:	e0bffe17 	ldw	r2,-8(fp)
     e4c:	10800017 	ldw	r2,0(r2)
     e50:	11400017 	ldw	r5,0(r2)
     e54:	01000074 	movhi	r4,1
     e58:	2135d204 	addi	r4,r4,-10424
     e5c:	00017300 	call	1730 <printf>

    queue->tail = elem;
     e60:	e0ffff17 	ldw	r3,-4(fp)
     e64:	e0bffe17 	ldw	r2,-8(fp)
     e68:	18800115 	stw	r2,4(r3)

    queue->size++;
     e6c:	e0bfff17 	ldw	r2,-4(fp)
     e70:	10800217 	ldw	r2,8(r2)
     e74:	10c00044 	addi	r3,r2,1
     e78:	e0bfff17 	ldw	r2,-4(fp)
     e7c:	10c00215 	stw	r3,8(r2)
}
     e80:	e037883a 	mov	sp,fp
     e84:	dfc00117 	ldw	ra,4(sp)
     e88:	df000017 	ldw	fp,0(sp)
     e8c:	dec00204 	addi	sp,sp,8
     e90:	f800283a 	ret

00000e94 <thread_dequeue>:

void thread_dequeue(TQ_type *queue)
{
     e94:	defffb04 	addi	sp,sp,-20
     e98:	dfc00415 	stw	ra,16(sp)
     e9c:	df000315 	stw	fp,12(sp)
     ea0:	df000304 	addi	fp,sp,12
     ea4:	e13fff15 	stw	r4,-4(fp)
    T_type  *elem;
    void    *data = NULL;
     ea8:	e03ffd15 	stw	zero,-12(fp)
    printf("Releasing All\n");
     eac:	01000074 	movhi	r4,1
     eb0:	2135da04 	addi	r4,r4,-10392
     eb4:	000186c0 	call	186c <puts>
    while(queue->size != 0) {
     eb8:	00002206 	br	f44 <thread_dequeue+0xb0>
        elem = queue->head;
     ebc:	e0bfff17 	ldw	r2,-4(fp)
     ec0:	10800017 	ldw	r2,0(r2)
     ec4:	e0bffe15 	stw	r2,-8(fp)
        if (queue->size == 1) {
     ec8:	e0bfff17 	ldw	r2,-4(fp)
     ecc:	10800217 	ldw	r2,8(r2)
     ed0:	10800058 	cmpnei	r2,r2,1
     ed4:	1000021e 	bne	r2,zero,ee0 <thread_dequeue+0x4c>
            queue->tail = NULL;
     ed8:	e0bfff17 	ldw	r2,-4(fp)
     edc:	10000115 	stw	zero,4(r2)
        }

        // Unblock thread
        elem->data->state = RUNNING;
     ee0:	e0bffe17 	ldw	r2,-8(fp)
     ee4:	10c00017 	ldw	r3,0(r2)
     ee8:	00800084 	movi	r2,2
     eec:	18800415 	stw	r2,16(r3)
        printf("Thread is getting dequeued %d\n", elem->data->tid);
     ef0:	e0bffe17 	ldw	r2,-8(fp)
     ef4:	10800017 	ldw	r2,0(r2)
     ef8:	11400017 	ldw	r5,0(r2)
     efc:	01000074 	movhi	r4,1
     f00:	2135de04 	addi	r4,r4,-10376
     f04:	00017300 	call	1730 <printf>
        queue->head = queue->head->next;
     f08:	e0bfff17 	ldw	r2,-4(fp)
     f0c:	10800017 	ldw	r2,0(r2)
     f10:	10c00117 	ldw	r3,4(r2)
     f14:	e0bfff17 	ldw	r2,-4(fp)
     f18:	10c00015 	stw	r3,0(r2)

        queue->size--;
     f1c:	e0bfff17 	ldw	r2,-4(fp)
     f20:	10800217 	ldw	r2,8(r2)
     f24:	10ffffc4 	addi	r3,r2,-1
     f28:	e0bfff17 	ldw	r2,-4(fp)
     f2c:	10c00215 	stw	r3,8(r2)
        data = elem->data;
     f30:	e0bffe17 	ldw	r2,-8(fp)
     f34:	10800017 	ldw	r2,0(r2)
     f38:	e0bffd15 	stw	r2,-12(fp)
        free(elem);
     f3c:	e13ffe17 	ldw	r4,-8(fp)
     f40:	0000fc80 	call	fc8 <free>
void thread_dequeue(TQ_type *queue)
{
    T_type  *elem;
    void    *data = NULL;
    printf("Releasing All\n");
    while(queue->size != 0) {
     f44:	e0bfff17 	ldw	r2,-4(fp)
     f48:	10800217 	ldw	r2,8(r2)
     f4c:	1004c03a 	cmpne	r2,r2,zero
     f50:	103fda1e 	bne	r2,zero,ebc <thread_dequeue+0x28>
        queue->size--;
        data = elem->data;
        free(elem);
    }

}
     f54:	e037883a 	mov	sp,fp
     f58:	dfc00117 	ldw	ra,4(sp)
     f5c:	df000017 	ldw	fp,0(sp)
     f60:	dec00204 	addi	sp,sp,8
     f64:	f800283a 	ret

00000f68 <thread_getQsize>:

unsigned int thread_getQsize(TQ_type *queue)
{
     f68:	defffe04 	addi	sp,sp,-8
     f6c:	df000115 	stw	fp,4(sp)
     f70:	df000104 	addi	fp,sp,4
     f74:	e13fff15 	stw	r4,-4(fp)
    return queue->size;
     f78:	e0bfff17 	ldw	r2,-4(fp)
     f7c:	10800217 	ldw	r2,8(r2)
}
     f80:	e037883a 	mov	sp,fp
     f84:	df000017 	ldw	fp,0(sp)
     f88:	dec00104 	addi	sp,sp,4
     f8c:	f800283a 	ret

00000f90 <exit>:
     f90:	defffe04 	addi	sp,sp,-8
     f94:	000b883a 	mov	r5,zero
     f98:	dc000015 	stw	r16,0(sp)
     f9c:	dfc00115 	stw	ra,4(sp)
     fa0:	2021883a 	mov	r16,r4
     fa4:	00039cc0 	call	39cc <__call_exitprocs>
     fa8:	00800074 	movhi	r2,1
     fac:	10bd3d04 	addi	r2,r2,-2828
     fb0:	11000017 	ldw	r4,0(r2)
     fb4:	20800f17 	ldw	r2,60(r4)
     fb8:	10000126 	beq	r2,zero,fc0 <exit+0x30>
     fbc:	103ee83a 	callr	r2
     fc0:	8009883a 	mov	r4,r16
     fc4:	000af600 	call	af60 <_exit>

00000fc8 <free>:
     fc8:	00800074 	movhi	r2,1
     fcc:	10bd3c04 	addi	r2,r2,-2832
     fd0:	200b883a 	mov	r5,r4
     fd4:	11000017 	ldw	r4,0(r2)
     fd8:	00059641 	jmpi	5964 <_free_r>

00000fdc <malloc>:
     fdc:	00800074 	movhi	r2,1
     fe0:	10bd3c04 	addi	r2,r2,-2832
     fe4:	200b883a 	mov	r5,r4
     fe8:	11000017 	ldw	r4,0(r2)
     fec:	0000ff01 	jmpi	ff0 <_malloc_r>

00000ff0 <_malloc_r>:
     ff0:	defff604 	addi	sp,sp,-40
     ff4:	28c002c4 	addi	r3,r5,11
     ff8:	00800584 	movi	r2,22
     ffc:	dc800215 	stw	r18,8(sp)
    1000:	dfc00915 	stw	ra,36(sp)
    1004:	df000815 	stw	fp,32(sp)
    1008:	ddc00715 	stw	r23,28(sp)
    100c:	dd800615 	stw	r22,24(sp)
    1010:	dd400515 	stw	r21,20(sp)
    1014:	dd000415 	stw	r20,16(sp)
    1018:	dcc00315 	stw	r19,12(sp)
    101c:	dc400115 	stw	r17,4(sp)
    1020:	dc000015 	stw	r16,0(sp)
    1024:	2025883a 	mov	r18,r4
    1028:	10c01236 	bltu	r2,r3,1074 <_malloc_r+0x84>
    102c:	04400404 	movi	r17,16
    1030:	8940142e 	bgeu	r17,r5,1084 <_malloc_r+0x94>
    1034:	00800304 	movi	r2,12
    1038:	0007883a 	mov	r3,zero
    103c:	90800015 	stw	r2,0(r18)
    1040:	1805883a 	mov	r2,r3
    1044:	dfc00917 	ldw	ra,36(sp)
    1048:	df000817 	ldw	fp,32(sp)
    104c:	ddc00717 	ldw	r23,28(sp)
    1050:	dd800617 	ldw	r22,24(sp)
    1054:	dd400517 	ldw	r21,20(sp)
    1058:	dd000417 	ldw	r20,16(sp)
    105c:	dcc00317 	ldw	r19,12(sp)
    1060:	dc800217 	ldw	r18,8(sp)
    1064:	dc400117 	ldw	r17,4(sp)
    1068:	dc000017 	ldw	r16,0(sp)
    106c:	dec00a04 	addi	sp,sp,40
    1070:	f800283a 	ret
    1074:	00bffe04 	movi	r2,-8
    1078:	18a2703a 	and	r17,r3,r2
    107c:	883fed16 	blt	r17,zero,1034 <_malloc_r+0x44>
    1080:	897fec36 	bltu	r17,r5,1034 <_malloc_r+0x44>
    1084:	9009883a 	mov	r4,r18
    1088:	000b47c0 	call	b47c <__malloc_lock>
    108c:	00807dc4 	movi	r2,503
    1090:	14402b2e 	bgeu	r2,r17,1140 <_malloc_r+0x150>
    1094:	8806d27a 	srli	r3,r17,9
    1098:	18003f1e 	bne	r3,zero,1198 <_malloc_r+0x1a8>
    109c:	880cd0fa 	srli	r6,r17,3
    10a0:	300490fa 	slli	r2,r6,3
    10a4:	02c00074 	movhi	r11,1
    10a8:	5af7b504 	addi	r11,r11,-8492
    10ac:	12cb883a 	add	r5,r2,r11
    10b0:	2c000317 	ldw	r16,12(r5)
    10b4:	580f883a 	mov	r7,r11
    10b8:	2c00041e 	bne	r5,r16,10cc <_malloc_r+0xdc>
    10bc:	00000a06 	br	10e8 <_malloc_r+0xf8>
    10c0:	1800860e 	bge	r3,zero,12dc <_malloc_r+0x2ec>
    10c4:	84000317 	ldw	r16,12(r16)
    10c8:	2c000726 	beq	r5,r16,10e8 <_malloc_r+0xf8>
    10cc:	80800117 	ldw	r2,4(r16)
    10d0:	00ffff04 	movi	r3,-4
    10d4:	10c8703a 	and	r4,r2,r3
    10d8:	2447c83a 	sub	r3,r4,r17
    10dc:	008003c4 	movi	r2,15
    10e0:	10fff70e 	bge	r2,r3,10c0 <_malloc_r+0xd0>
    10e4:	31bfffc4 	addi	r6,r6,-1
    10e8:	32400044 	addi	r9,r6,1
    10ec:	02800074 	movhi	r10,1
    10f0:	52b7b704 	addi	r10,r10,-8484
    10f4:	54000217 	ldw	r16,8(r10)
    10f8:	8280a026 	beq	r16,r10,137c <_malloc_r+0x38c>
    10fc:	80800117 	ldw	r2,4(r16)
    1100:	00ffff04 	movi	r3,-4
    1104:	10ca703a 	and	r5,r2,r3
    1108:	2c4dc83a 	sub	r6,r5,r17
    110c:	008003c4 	movi	r2,15
    1110:	11808316 	blt	r2,r6,1320 <_malloc_r+0x330>
    1114:	52800315 	stw	r10,12(r10)
    1118:	52800215 	stw	r10,8(r10)
    111c:	30002916 	blt	r6,zero,11c4 <_malloc_r+0x1d4>
    1120:	8147883a 	add	r3,r16,r5
    1124:	18800117 	ldw	r2,4(r3)
    1128:	9009883a 	mov	r4,r18
    112c:	10800054 	ori	r2,r2,1
    1130:	18800115 	stw	r2,4(r3)
    1134:	000b49c0 	call	b49c <__malloc_unlock>
    1138:	80c00204 	addi	r3,r16,8
    113c:	003fc006 	br	1040 <_malloc_r+0x50>
    1140:	02c00074 	movhi	r11,1
    1144:	5af7b504 	addi	r11,r11,-8492
    1148:	8ac5883a 	add	r2,r17,r11
    114c:	14000317 	ldw	r16,12(r2)
    1150:	580f883a 	mov	r7,r11
    1154:	8806d0fa 	srli	r3,r17,3
    1158:	14006c26 	beq	r2,r16,130c <_malloc_r+0x31c>
    115c:	80c00117 	ldw	r3,4(r16)
    1160:	00bfff04 	movi	r2,-4
    1164:	81800317 	ldw	r6,12(r16)
    1168:	1886703a 	and	r3,r3,r2
    116c:	80c7883a 	add	r3,r16,r3
    1170:	18800117 	ldw	r2,4(r3)
    1174:	81400217 	ldw	r5,8(r16)
    1178:	9009883a 	mov	r4,r18
    117c:	10800054 	ori	r2,r2,1
    1180:	18800115 	stw	r2,4(r3)
    1184:	31400215 	stw	r5,8(r6)
    1188:	29800315 	stw	r6,12(r5)
    118c:	000b49c0 	call	b49c <__malloc_unlock>
    1190:	80c00204 	addi	r3,r16,8
    1194:	003faa06 	br	1040 <_malloc_r+0x50>
    1198:	00800104 	movi	r2,4
    119c:	10c0052e 	bgeu	r2,r3,11b4 <_malloc_r+0x1c4>
    11a0:	00800504 	movi	r2,20
    11a4:	10c07836 	bltu	r2,r3,1388 <_malloc_r+0x398>
    11a8:	198016c4 	addi	r6,r3,91
    11ac:	300490fa 	slli	r2,r6,3
    11b0:	003fbc06 	br	10a4 <_malloc_r+0xb4>
    11b4:	8804d1ba 	srli	r2,r17,6
    11b8:	11800e04 	addi	r6,r2,56
    11bc:	300490fa 	slli	r2,r6,3
    11c0:	003fb806 	br	10a4 <_malloc_r+0xb4>
    11c4:	00807fc4 	movi	r2,511
    11c8:	1140bb36 	bltu	r2,r5,14b8 <_malloc_r+0x4c8>
    11cc:	2806d0fa 	srli	r3,r5,3
    11d0:	573ffe04 	addi	fp,r10,-8
    11d4:	00800044 	movi	r2,1
    11d8:	180890fa 	slli	r4,r3,3
    11dc:	1807d0ba 	srai	r3,r3,2
    11e0:	e1c00117 	ldw	r7,4(fp)
    11e4:	5909883a 	add	r4,r11,r4
    11e8:	21400217 	ldw	r5,8(r4)
    11ec:	10c4983a 	sll	r2,r2,r3
    11f0:	81000315 	stw	r4,12(r16)
    11f4:	81400215 	stw	r5,8(r16)
    11f8:	388eb03a 	or	r7,r7,r2
    11fc:	2c000315 	stw	r16,12(r5)
    1200:	24000215 	stw	r16,8(r4)
    1204:	e1c00115 	stw	r7,4(fp)
    1208:	4807883a 	mov	r3,r9
    120c:	4800cd16 	blt	r9,zero,1544 <_malloc_r+0x554>
    1210:	1807d0ba 	srai	r3,r3,2
    1214:	00800044 	movi	r2,1
    1218:	10c8983a 	sll	r4,r2,r3
    121c:	39004436 	bltu	r7,r4,1330 <_malloc_r+0x340>
    1220:	21c4703a 	and	r2,r4,r7
    1224:	10000a1e 	bne	r2,zero,1250 <_malloc_r+0x260>
    1228:	2109883a 	add	r4,r4,r4
    122c:	00bfff04 	movi	r2,-4
    1230:	4884703a 	and	r2,r9,r2
    1234:	3906703a 	and	r3,r7,r4
    1238:	12400104 	addi	r9,r2,4
    123c:	1800041e 	bne	r3,zero,1250 <_malloc_r+0x260>
    1240:	2109883a 	add	r4,r4,r4
    1244:	3904703a 	and	r2,r7,r4
    1248:	4a400104 	addi	r9,r9,4
    124c:	103ffc26 	beq	r2,zero,1240 <_malloc_r+0x250>
    1250:	480490fa 	slli	r2,r9,3
    1254:	4819883a 	mov	r12,r9
    1258:	023fff04 	movi	r8,-4
    125c:	589b883a 	add	r13,r11,r2
    1260:	6807883a 	mov	r3,r13
    1264:	014003c4 	movi	r5,15
    1268:	1c000317 	ldw	r16,12(r3)
    126c:	1c00041e 	bne	r3,r16,1280 <_malloc_r+0x290>
    1270:	0000a706 	br	1510 <_malloc_r+0x520>
    1274:	3000ab0e 	bge	r6,zero,1524 <_malloc_r+0x534>
    1278:	84000317 	ldw	r16,12(r16)
    127c:	1c00a426 	beq	r3,r16,1510 <_malloc_r+0x520>
    1280:	80800117 	ldw	r2,4(r16)
    1284:	1204703a 	and	r2,r2,r8
    1288:	144dc83a 	sub	r6,r2,r17
    128c:	29bff90e 	bge	r5,r6,1274 <_malloc_r+0x284>
    1290:	81000317 	ldw	r4,12(r16)
    1294:	80c00217 	ldw	r3,8(r16)
    1298:	89400054 	ori	r5,r17,1
    129c:	8445883a 	add	r2,r16,r17
    12a0:	20c00215 	stw	r3,8(r4)
    12a4:	19000315 	stw	r4,12(r3)
    12a8:	81400115 	stw	r5,4(r16)
    12ac:	1187883a 	add	r3,r2,r6
    12b0:	31000054 	ori	r4,r6,1
    12b4:	50800315 	stw	r2,12(r10)
    12b8:	50800215 	stw	r2,8(r10)
    12bc:	19800015 	stw	r6,0(r3)
    12c0:	11000115 	stw	r4,4(r2)
    12c4:	12800215 	stw	r10,8(r2)
    12c8:	12800315 	stw	r10,12(r2)
    12cc:	9009883a 	mov	r4,r18
    12d0:	000b49c0 	call	b49c <__malloc_unlock>
    12d4:	80c00204 	addi	r3,r16,8
    12d8:	003f5906 	br	1040 <_malloc_r+0x50>
    12dc:	8109883a 	add	r4,r16,r4
    12e0:	20800117 	ldw	r2,4(r4)
    12e4:	80c00217 	ldw	r3,8(r16)
    12e8:	81400317 	ldw	r5,12(r16)
    12ec:	10800054 	ori	r2,r2,1
    12f0:	20800115 	stw	r2,4(r4)
    12f4:	28c00215 	stw	r3,8(r5)
    12f8:	19400315 	stw	r5,12(r3)
    12fc:	9009883a 	mov	r4,r18
    1300:	000b49c0 	call	b49c <__malloc_unlock>
    1304:	80c00204 	addi	r3,r16,8
    1308:	003f4d06 	br	1040 <_malloc_r+0x50>
    130c:	80800204 	addi	r2,r16,8
    1310:	14000317 	ldw	r16,12(r2)
    1314:	143f911e 	bne	r2,r16,115c <_malloc_r+0x16c>
    1318:	1a400084 	addi	r9,r3,2
    131c:	003f7306 	br	10ec <_malloc_r+0xfc>
    1320:	88c00054 	ori	r3,r17,1
    1324:	8445883a 	add	r2,r16,r17
    1328:	80c00115 	stw	r3,4(r16)
    132c:	003fdf06 	br	12ac <_malloc_r+0x2bc>
    1330:	e4000217 	ldw	r16,8(fp)
    1334:	00bfff04 	movi	r2,-4
    1338:	80c00117 	ldw	r3,4(r16)
    133c:	802d883a 	mov	r22,r16
    1340:	18aa703a 	and	r21,r3,r2
    1344:	ac401636 	bltu	r21,r17,13a0 <_malloc_r+0x3b0>
    1348:	ac49c83a 	sub	r4,r21,r17
    134c:	008003c4 	movi	r2,15
    1350:	1100130e 	bge	r2,r4,13a0 <_malloc_r+0x3b0>
    1354:	88800054 	ori	r2,r17,1
    1358:	8447883a 	add	r3,r16,r17
    135c:	80800115 	stw	r2,4(r16)
    1360:	20800054 	ori	r2,r4,1
    1364:	18800115 	stw	r2,4(r3)
    1368:	e0c00215 	stw	r3,8(fp)
    136c:	9009883a 	mov	r4,r18
    1370:	000b49c0 	call	b49c <__malloc_unlock>
    1374:	80c00204 	addi	r3,r16,8
    1378:	003f3106 	br	1040 <_malloc_r+0x50>
    137c:	39c00117 	ldw	r7,4(r7)
    1380:	573ffe04 	addi	fp,r10,-8
    1384:	003fa006 	br	1208 <_malloc_r+0x218>
    1388:	00801504 	movi	r2,84
    138c:	10c06736 	bltu	r2,r3,152c <_malloc_r+0x53c>
    1390:	8804d33a 	srli	r2,r17,12
    1394:	11801b84 	addi	r6,r2,110
    1398:	300490fa 	slli	r2,r6,3
    139c:	003f4106 	br	10a4 <_malloc_r+0xb4>
    13a0:	d0a6ac17 	ldw	r2,-25936(gp)
    13a4:	d0e00317 	ldw	r3,-32756(gp)
    13a8:	053fffc4 	movi	r20,-1
    13ac:	10800404 	addi	r2,r2,16
    13b0:	88a7883a 	add	r19,r17,r2
    13b4:	1d000326 	beq	r3,r20,13c4 <_malloc_r+0x3d4>
    13b8:	98c3ffc4 	addi	r3,r19,4095
    13bc:	00bc0004 	movi	r2,-4096
    13c0:	18a6703a 	and	r19,r3,r2
    13c4:	9009883a 	mov	r4,r18
    13c8:	980b883a 	mov	r5,r19
    13cc:	00018800 	call	1880 <_sbrk_r>
    13d0:	1009883a 	mov	r4,r2
    13d4:	15000426 	beq	r2,r20,13e8 <_malloc_r+0x3f8>
    13d8:	854b883a 	add	r5,r16,r21
    13dc:	1029883a 	mov	r20,r2
    13e0:	11405a2e 	bgeu	r2,r5,154c <_malloc_r+0x55c>
    13e4:	87000c26 	beq	r16,fp,1418 <_malloc_r+0x428>
    13e8:	e4000217 	ldw	r16,8(fp)
    13ec:	80c00117 	ldw	r3,4(r16)
    13f0:	00bfff04 	movi	r2,-4
    13f4:	1884703a 	and	r2,r3,r2
    13f8:	14400336 	bltu	r2,r17,1408 <_malloc_r+0x418>
    13fc:	1449c83a 	sub	r4,r2,r17
    1400:	008003c4 	movi	r2,15
    1404:	113fd316 	blt	r2,r4,1354 <_malloc_r+0x364>
    1408:	9009883a 	mov	r4,r18
    140c:	000b49c0 	call	b49c <__malloc_unlock>
    1410:	0007883a 	mov	r3,zero
    1414:	003f0a06 	br	1040 <_malloc_r+0x50>
    1418:	05c00074 	movhi	r23,1
    141c:	bdc3fe04 	addi	r23,r23,4088
    1420:	b8800017 	ldw	r2,0(r23)
    1424:	988d883a 	add	r6,r19,r2
    1428:	b9800015 	stw	r6,0(r23)
    142c:	d0e00317 	ldw	r3,-32756(gp)
    1430:	00bfffc4 	movi	r2,-1
    1434:	18808e26 	beq	r3,r2,1670 <_malloc_r+0x680>
    1438:	2145c83a 	sub	r2,r4,r5
    143c:	3085883a 	add	r2,r6,r2
    1440:	b8800015 	stw	r2,0(r23)
    1444:	20c001cc 	andi	r3,r4,7
    1448:	18005f1e 	bne	r3,zero,15c8 <_malloc_r+0x5d8>
    144c:	000b883a 	mov	r5,zero
    1450:	a4c5883a 	add	r2,r20,r19
    1454:	1083ffcc 	andi	r2,r2,4095
    1458:	00c40004 	movi	r3,4096
    145c:	1887c83a 	sub	r3,r3,r2
    1460:	28e7883a 	add	r19,r5,r3
    1464:	9009883a 	mov	r4,r18
    1468:	980b883a 	mov	r5,r19
    146c:	00018800 	call	1880 <_sbrk_r>
    1470:	1007883a 	mov	r3,r2
    1474:	00bfffc4 	movi	r2,-1
    1478:	18807a26 	beq	r3,r2,1664 <_malloc_r+0x674>
    147c:	1d05c83a 	sub	r2,r3,r20
    1480:	9885883a 	add	r2,r19,r2
    1484:	10c00054 	ori	r3,r2,1
    1488:	b8800017 	ldw	r2,0(r23)
    148c:	a021883a 	mov	r16,r20
    1490:	a0c00115 	stw	r3,4(r20)
    1494:	9885883a 	add	r2,r19,r2
    1498:	b8800015 	stw	r2,0(r23)
    149c:	e5000215 	stw	r20,8(fp)
    14a0:	b7003626 	beq	r22,fp,157c <_malloc_r+0x58c>
    14a4:	018003c4 	movi	r6,15
    14a8:	35404b36 	bltu	r6,r21,15d8 <_malloc_r+0x5e8>
    14ac:	00800044 	movi	r2,1
    14b0:	a0800115 	stw	r2,4(r20)
    14b4:	003fcd06 	br	13ec <_malloc_r+0x3fc>
    14b8:	2808d27a 	srli	r4,r5,9
    14bc:	2000371e 	bne	r4,zero,159c <_malloc_r+0x5ac>
    14c0:	2808d0fa 	srli	r4,r5,3
    14c4:	200690fa 	slli	r3,r4,3
    14c8:	1ad1883a 	add	r8,r3,r11
    14cc:	41800217 	ldw	r6,8(r8)
    14d0:	41805b26 	beq	r8,r6,1640 <_malloc_r+0x650>
    14d4:	30800117 	ldw	r2,4(r6)
    14d8:	00ffff04 	movi	r3,-4
    14dc:	10c4703a 	and	r2,r2,r3
    14e0:	2880022e 	bgeu	r5,r2,14ec <_malloc_r+0x4fc>
    14e4:	31800217 	ldw	r6,8(r6)
    14e8:	41bffa1e 	bne	r8,r6,14d4 <_malloc_r+0x4e4>
    14ec:	32000317 	ldw	r8,12(r6)
    14f0:	39c00117 	ldw	r7,4(r7)
    14f4:	82000315 	stw	r8,12(r16)
    14f8:	81800215 	stw	r6,8(r16)
    14fc:	07000074 	movhi	fp,1
    1500:	e737b504 	addi	fp,fp,-8492
    1504:	34000315 	stw	r16,12(r6)
    1508:	44000215 	stw	r16,8(r8)
    150c:	003f3e06 	br	1208 <_malloc_r+0x218>
    1510:	63000044 	addi	r12,r12,1
    1514:	608000cc 	andi	r2,r12,3
    1518:	10005d26 	beq	r2,zero,1690 <_malloc_r+0x6a0>
    151c:	18c00204 	addi	r3,r3,8
    1520:	003f5106 	br	1268 <_malloc_r+0x278>
    1524:	8089883a 	add	r4,r16,r2
    1528:	003f6d06 	br	12e0 <_malloc_r+0x2f0>
    152c:	00805504 	movi	r2,340
    1530:	10c02036 	bltu	r2,r3,15b4 <_malloc_r+0x5c4>
    1534:	8804d3fa 	srli	r2,r17,15
    1538:	11801dc4 	addi	r6,r2,119
    153c:	300490fa 	slli	r2,r6,3
    1540:	003ed806 	br	10a4 <_malloc_r+0xb4>
    1544:	48c000c4 	addi	r3,r9,3
    1548:	003f3106 	br	1210 <_malloc_r+0x220>
    154c:	05c00074 	movhi	r23,1
    1550:	bdc3fe04 	addi	r23,r23,4088
    1554:	b8800017 	ldw	r2,0(r23)
    1558:	988d883a 	add	r6,r19,r2
    155c:	b9800015 	stw	r6,0(r23)
    1560:	293fb21e 	bne	r5,r4,142c <_malloc_r+0x43c>
    1564:	2083ffcc 	andi	r2,r4,4095
    1568:	103fb01e 	bne	r2,zero,142c <_malloc_r+0x43c>
    156c:	e4000217 	ldw	r16,8(fp)
    1570:	9d45883a 	add	r2,r19,r21
    1574:	10800054 	ori	r2,r2,1
    1578:	80800115 	stw	r2,4(r16)
    157c:	b8c00017 	ldw	r3,0(r23)
    1580:	d0a6ad17 	ldw	r2,-25932(gp)
    1584:	10c0012e 	bgeu	r2,r3,158c <_malloc_r+0x59c>
    1588:	d0e6ad15 	stw	r3,-25932(gp)
    158c:	d0a6ae17 	ldw	r2,-25928(gp)
    1590:	10ff962e 	bgeu	r2,r3,13ec <_malloc_r+0x3fc>
    1594:	d0e6ae15 	stw	r3,-25928(gp)
    1598:	003f9406 	br	13ec <_malloc_r+0x3fc>
    159c:	00800104 	movi	r2,4
    15a0:	11001e36 	bltu	r2,r4,161c <_malloc_r+0x62c>
    15a4:	2804d1ba 	srli	r2,r5,6
    15a8:	11000e04 	addi	r4,r2,56
    15ac:	200690fa 	slli	r3,r4,3
    15b0:	003fc506 	br	14c8 <_malloc_r+0x4d8>
    15b4:	00815504 	movi	r2,1364
    15b8:	10c01d2e 	bgeu	r2,r3,1630 <_malloc_r+0x640>
    15bc:	01801f84 	movi	r6,126
    15c0:	0080fc04 	movi	r2,1008
    15c4:	003eb706 	br	10a4 <_malloc_r+0xb4>
    15c8:	00800204 	movi	r2,8
    15cc:	10cbc83a 	sub	r5,r2,r3
    15d0:	2169883a 	add	r20,r4,r5
    15d4:	003f9e06 	br	1450 <_malloc_r+0x460>
    15d8:	00bffe04 	movi	r2,-8
    15dc:	a93ffd04 	addi	r4,r21,-12
    15e0:	2088703a 	and	r4,r4,r2
    15e4:	b10b883a 	add	r5,r22,r4
    15e8:	00c00144 	movi	r3,5
    15ec:	28c00215 	stw	r3,8(r5)
    15f0:	28c00115 	stw	r3,4(r5)
    15f4:	b0800117 	ldw	r2,4(r22)
    15f8:	1080004c 	andi	r2,r2,1
    15fc:	2084b03a 	or	r2,r4,r2
    1600:	b0800115 	stw	r2,4(r22)
    1604:	313fdd2e 	bgeu	r6,r4,157c <_malloc_r+0x58c>
    1608:	b1400204 	addi	r5,r22,8
    160c:	9009883a 	mov	r4,r18
    1610:	00059640 	call	5964 <_free_r>
    1614:	e4000217 	ldw	r16,8(fp)
    1618:	003fd806 	br	157c <_malloc_r+0x58c>
    161c:	00800504 	movi	r2,20
    1620:	11001536 	bltu	r2,r4,1678 <_malloc_r+0x688>
    1624:	210016c4 	addi	r4,r4,91
    1628:	200690fa 	slli	r3,r4,3
    162c:	003fa606 	br	14c8 <_malloc_r+0x4d8>
    1630:	8804d4ba 	srli	r2,r17,18
    1634:	11801f04 	addi	r6,r2,124
    1638:	300490fa 	slli	r2,r6,3
    163c:	003e9906 	br	10a4 <_malloc_r+0xb4>
    1640:	2009d0ba 	srai	r4,r4,2
    1644:	01400074 	movhi	r5,1
    1648:	2977b504 	addi	r5,r5,-8492
    164c:	00c00044 	movi	r3,1
    1650:	28800117 	ldw	r2,4(r5)
    1654:	1906983a 	sll	r3,r3,r4
    1658:	10c4b03a 	or	r2,r2,r3
    165c:	28800115 	stw	r2,4(r5)
    1660:	003fa306 	br	14f0 <_malloc_r+0x500>
    1664:	0027883a 	mov	r19,zero
    1668:	00c00044 	movi	r3,1
    166c:	003f8606 	br	1488 <_malloc_r+0x498>
    1670:	d1200315 	stw	r4,-32756(gp)
    1674:	003f7306 	br	1444 <_malloc_r+0x454>
    1678:	00801504 	movi	r2,84
    167c:	11001936 	bltu	r2,r4,16e4 <_malloc_r+0x6f4>
    1680:	2804d33a 	srli	r2,r5,12
    1684:	11001b84 	addi	r4,r2,110
    1688:	200690fa 	slli	r3,r4,3
    168c:	003f8e06 	br	14c8 <_malloc_r+0x4d8>
    1690:	480b883a 	mov	r5,r9
    1694:	6807883a 	mov	r3,r13
    1698:	288000cc 	andi	r2,r5,3
    169c:	18fffe04 	addi	r3,r3,-8
    16a0:	297fffc4 	addi	r5,r5,-1
    16a4:	10001526 	beq	r2,zero,16fc <_malloc_r+0x70c>
    16a8:	18800217 	ldw	r2,8(r3)
    16ac:	10fffa26 	beq	r2,r3,1698 <_malloc_r+0x6a8>
    16b0:	2109883a 	add	r4,r4,r4
    16b4:	393f1e36 	bltu	r7,r4,1330 <_malloc_r+0x340>
    16b8:	203f1d26 	beq	r4,zero,1330 <_malloc_r+0x340>
    16bc:	21c4703a 	and	r2,r4,r7
    16c0:	10000226 	beq	r2,zero,16cc <_malloc_r+0x6dc>
    16c4:	6013883a 	mov	r9,r12
    16c8:	003ee106 	br	1250 <_malloc_r+0x260>
    16cc:	2109883a 	add	r4,r4,r4
    16d0:	3904703a 	and	r2,r7,r4
    16d4:	63000104 	addi	r12,r12,4
    16d8:	103ffc26 	beq	r2,zero,16cc <_malloc_r+0x6dc>
    16dc:	6013883a 	mov	r9,r12
    16e0:	003edb06 	br	1250 <_malloc_r+0x260>
    16e4:	00805504 	movi	r2,340
    16e8:	11000836 	bltu	r2,r4,170c <_malloc_r+0x71c>
    16ec:	2804d3fa 	srli	r2,r5,15
    16f0:	11001dc4 	addi	r4,r2,119
    16f4:	200690fa 	slli	r3,r4,3
    16f8:	003f7306 	br	14c8 <_malloc_r+0x4d8>
    16fc:	0104303a 	nor	r2,zero,r4
    1700:	388e703a 	and	r7,r7,r2
    1704:	e1c00115 	stw	r7,4(fp)
    1708:	003fe906 	br	16b0 <_malloc_r+0x6c0>
    170c:	00815504 	movi	r2,1364
    1710:	1100032e 	bgeu	r2,r4,1720 <_malloc_r+0x730>
    1714:	01001f84 	movi	r4,126
    1718:	00c0fc04 	movi	r3,1008
    171c:	003f6a06 	br	14c8 <_malloc_r+0x4d8>
    1720:	2804d4ba 	srli	r2,r5,18
    1724:	11001f04 	addi	r4,r2,124
    1728:	200690fa 	slli	r3,r4,3
    172c:	003f6606 	br	14c8 <_malloc_r+0x4d8>

00001730 <printf>:
    1730:	defffb04 	addi	sp,sp,-20
    1734:	dfc00115 	stw	ra,4(sp)
    1738:	d9400215 	stw	r5,8(sp)
    173c:	d9800315 	stw	r6,12(sp)
    1740:	d9c00415 	stw	r7,16(sp)
    1744:	00800074 	movhi	r2,1
    1748:	10bd3c04 	addi	r2,r2,-2832
    174c:	10c00017 	ldw	r3,0(r2)
    1750:	200b883a 	mov	r5,r4
    1754:	d8800204 	addi	r2,sp,8
    1758:	19000217 	ldw	r4,8(r3)
    175c:	100d883a 	mov	r6,r2
    1760:	d8800015 	stw	r2,0(sp)
    1764:	00038680 	call	3868 <__vfprintf_internal>
    1768:	dfc00117 	ldw	ra,4(sp)
    176c:	dec00504 	addi	sp,sp,20
    1770:	f800283a 	ret

00001774 <_printf_r>:
    1774:	defffc04 	addi	sp,sp,-16
    1778:	dfc00115 	stw	ra,4(sp)
    177c:	d9800215 	stw	r6,8(sp)
    1780:	d9c00315 	stw	r7,12(sp)
    1784:	280d883a 	mov	r6,r5
    1788:	21400217 	ldw	r5,8(r4)
    178c:	d8c00204 	addi	r3,sp,8
    1790:	180f883a 	mov	r7,r3
    1794:	d8c00015 	stw	r3,0(sp)
    1798:	00019bc0 	call	19bc <___vfprintf_internal_r>
    179c:	dfc00117 	ldw	ra,4(sp)
    17a0:	dec00404 	addi	sp,sp,16
    17a4:	f800283a 	ret

000017a8 <putchar>:
    17a8:	00800074 	movhi	r2,1
    17ac:	10bd3c04 	addi	r2,r2,-2832
    17b0:	11800017 	ldw	r6,0(r2)
    17b4:	200b883a 	mov	r5,r4
    17b8:	3009883a 	mov	r4,r6
    17bc:	31800217 	ldw	r6,8(r6)
    17c0:	00078e01 	jmpi	78e0 <_putc_r>

000017c4 <_putchar_r>:
    17c4:	21800217 	ldw	r6,8(r4)
    17c8:	00078e01 	jmpi	78e0 <_putc_r>

000017cc <_puts_r>:
    17cc:	defff604 	addi	sp,sp,-40
    17d0:	dc400715 	stw	r17,28(sp)
    17d4:	2023883a 	mov	r17,r4
    17d8:	2809883a 	mov	r4,r5
    17dc:	dfc00915 	stw	ra,36(sp)
    17e0:	dcc00815 	stw	r19,32(sp)
    17e4:	2827883a 	mov	r19,r5
    17e8:	00018f00 	call	18f0 <strlen>
    17ec:	89400217 	ldw	r5,8(r17)
    17f0:	00c00074 	movhi	r3,1
    17f4:	18f5e704 	addi	r3,r3,-10340
    17f8:	01c00044 	movi	r7,1
    17fc:	12000044 	addi	r8,r2,1
    1800:	d8c00515 	stw	r3,20(sp)
    1804:	d9c00615 	stw	r7,24(sp)
    1808:	d8c00304 	addi	r3,sp,12
    180c:	01c00084 	movi	r7,2
    1810:	8809883a 	mov	r4,r17
    1814:	d80d883a 	mov	r6,sp
    1818:	d8c00015 	stw	r3,0(sp)
    181c:	dcc00315 	stw	r19,12(sp)
    1820:	da000215 	stw	r8,8(sp)
    1824:	d9c00115 	stw	r7,4(sp)
    1828:	d8800415 	stw	r2,16(sp)
    182c:	0005c780 	call	5c78 <__sfvwrite_r>
    1830:	00ffffc4 	movi	r3,-1
    1834:	10000626 	beq	r2,zero,1850 <_puts_r+0x84>
    1838:	1805883a 	mov	r2,r3
    183c:	dfc00917 	ldw	ra,36(sp)
    1840:	dcc00817 	ldw	r19,32(sp)
    1844:	dc400717 	ldw	r17,28(sp)
    1848:	dec00a04 	addi	sp,sp,40
    184c:	f800283a 	ret
    1850:	00c00284 	movi	r3,10
    1854:	1805883a 	mov	r2,r3
    1858:	dfc00917 	ldw	ra,36(sp)
    185c:	dcc00817 	ldw	r19,32(sp)
    1860:	dc400717 	ldw	r17,28(sp)
    1864:	dec00a04 	addi	sp,sp,40
    1868:	f800283a 	ret

0000186c <puts>:
    186c:	00800074 	movhi	r2,1
    1870:	10bd3c04 	addi	r2,r2,-2832
    1874:	200b883a 	mov	r5,r4
    1878:	11000017 	ldw	r4,0(r2)
    187c:	00017cc1 	jmpi	17cc <_puts_r>

00001880 <_sbrk_r>:
    1880:	defffd04 	addi	sp,sp,-12
    1884:	dc000015 	stw	r16,0(sp)
    1888:	04000074 	movhi	r16,1
    188c:	8403eb04 	addi	r16,r16,4012
    1890:	dc400115 	stw	r17,4(sp)
    1894:	80000015 	stw	zero,0(r16)
    1898:	2023883a 	mov	r17,r4
    189c:	2809883a 	mov	r4,r5
    18a0:	dfc00215 	stw	ra,8(sp)
    18a4:	000b69c0 	call	b69c <sbrk>
    18a8:	1007883a 	mov	r3,r2
    18ac:	00bfffc4 	movi	r2,-1
    18b0:	18800626 	beq	r3,r2,18cc <_sbrk_r+0x4c>
    18b4:	1805883a 	mov	r2,r3
    18b8:	dfc00217 	ldw	ra,8(sp)
    18bc:	dc400117 	ldw	r17,4(sp)
    18c0:	dc000017 	ldw	r16,0(sp)
    18c4:	dec00304 	addi	sp,sp,12
    18c8:	f800283a 	ret
    18cc:	80800017 	ldw	r2,0(r16)
    18d0:	103ff826 	beq	r2,zero,18b4 <_sbrk_r+0x34>
    18d4:	88800015 	stw	r2,0(r17)
    18d8:	1805883a 	mov	r2,r3
    18dc:	dfc00217 	ldw	ra,8(sp)
    18e0:	dc400117 	ldw	r17,4(sp)
    18e4:	dc000017 	ldw	r16,0(sp)
    18e8:	dec00304 	addi	sp,sp,12
    18ec:	f800283a 	ret

000018f0 <strlen>:
    18f0:	208000cc 	andi	r2,r4,3
    18f4:	2011883a 	mov	r8,r4
    18f8:	1000161e 	bne	r2,zero,1954 <strlen+0x64>
    18fc:	20c00017 	ldw	r3,0(r4)
    1900:	017fbff4 	movhi	r5,65279
    1904:	297fbfc4 	addi	r5,r5,-257
    1908:	01e02074 	movhi	r7,32897
    190c:	39e02004 	addi	r7,r7,-32640
    1910:	1945883a 	add	r2,r3,r5
    1914:	11c4703a 	and	r2,r2,r7
    1918:	00c6303a 	nor	r3,zero,r3
    191c:	1886703a 	and	r3,r3,r2
    1920:	18000c1e 	bne	r3,zero,1954 <strlen+0x64>
    1924:	280d883a 	mov	r6,r5
    1928:	380b883a 	mov	r5,r7
    192c:	21000104 	addi	r4,r4,4
    1930:	20800017 	ldw	r2,0(r4)
    1934:	1187883a 	add	r3,r2,r6
    1938:	1946703a 	and	r3,r3,r5
    193c:	0084303a 	nor	r2,zero,r2
    1940:	10c4703a 	and	r2,r2,r3
    1944:	103ff926 	beq	r2,zero,192c <strlen+0x3c>
    1948:	20800007 	ldb	r2,0(r4)
    194c:	10000326 	beq	r2,zero,195c <strlen+0x6c>
    1950:	21000044 	addi	r4,r4,1
    1954:	20800007 	ldb	r2,0(r4)
    1958:	103ffd1e 	bne	r2,zero,1950 <strlen+0x60>
    195c:	2205c83a 	sub	r2,r4,r8
    1960:	f800283a 	ret

00001964 <__sprint_r>:
    1964:	30800217 	ldw	r2,8(r6)
    1968:	defffe04 	addi	sp,sp,-8
    196c:	dc000015 	stw	r16,0(sp)
    1970:	dfc00115 	stw	ra,4(sp)
    1974:	3021883a 	mov	r16,r6
    1978:	0007883a 	mov	r3,zero
    197c:	1000061e 	bne	r2,zero,1998 <__sprint_r+0x34>
    1980:	1805883a 	mov	r2,r3
    1984:	30000115 	stw	zero,4(r6)
    1988:	dfc00117 	ldw	ra,4(sp)
    198c:	dc000017 	ldw	r16,0(sp)
    1990:	dec00204 	addi	sp,sp,8
    1994:	f800283a 	ret
    1998:	0005c780 	call	5c78 <__sfvwrite_r>
    199c:	1007883a 	mov	r3,r2
    19a0:	1805883a 	mov	r2,r3
    19a4:	80000115 	stw	zero,4(r16)
    19a8:	80000215 	stw	zero,8(r16)
    19ac:	dfc00117 	ldw	ra,4(sp)
    19b0:	dc000017 	ldw	r16,0(sp)
    19b4:	dec00204 	addi	sp,sp,8
    19b8:	f800283a 	ret

000019bc <___vfprintf_internal_r>:
    19bc:	defea404 	addi	sp,sp,-1392
    19c0:	dd815815 	stw	r22,1376(sp)
    19c4:	dc015215 	stw	r16,1352(sp)
    19c8:	d9c15115 	stw	r7,1348(sp)
    19cc:	dfc15b15 	stw	ra,1388(sp)
    19d0:	df015a15 	stw	fp,1384(sp)
    19d4:	ddc15915 	stw	r23,1380(sp)
    19d8:	dd415715 	stw	r21,1372(sp)
    19dc:	dd015615 	stw	r20,1368(sp)
    19e0:	dcc15515 	stw	r19,1364(sp)
    19e4:	dc815415 	stw	r18,1360(sp)
    19e8:	dc415315 	stw	r17,1356(sp)
    19ec:	282d883a 	mov	r22,r5
    19f0:	3021883a 	mov	r16,r6
    19f4:	d9014f15 	stw	r4,1340(sp)
    19f8:	000629c0 	call	629c <_localeconv_r>
    19fc:	10800017 	ldw	r2,0(r2)
    1a00:	d9c15117 	ldw	r7,1348(sp)
    1a04:	d8814915 	stw	r2,1316(sp)
    1a08:	d8814f17 	ldw	r2,1340(sp)
    1a0c:	10000226 	beq	r2,zero,1a18 <___vfprintf_internal_r+0x5c>
    1a10:	10800e17 	ldw	r2,56(r2)
    1a14:	10020d26 	beq	r2,zero,224c <___vfprintf_internal_r+0x890>
    1a18:	b080030b 	ldhu	r2,12(r22)
    1a1c:	1080020c 	andi	r2,r2,8
    1a20:	10020e26 	beq	r2,zero,225c <___vfprintf_internal_r+0x8a0>
    1a24:	b0800417 	ldw	r2,16(r22)
    1a28:	10020c26 	beq	r2,zero,225c <___vfprintf_internal_r+0x8a0>
    1a2c:	b200030b 	ldhu	r8,12(r22)
    1a30:	00800284 	movi	r2,10
    1a34:	40c0068c 	andi	r3,r8,26
    1a38:	18802f1e 	bne	r3,r2,1af8 <___vfprintf_internal_r+0x13c>
    1a3c:	b080038f 	ldh	r2,14(r22)
    1a40:	10002d16 	blt	r2,zero,1af8 <___vfprintf_internal_r+0x13c>
    1a44:	b240038b 	ldhu	r9,14(r22)
    1a48:	b2800717 	ldw	r10,28(r22)
    1a4c:	b2c00917 	ldw	r11,36(r22)
    1a50:	d9014f17 	ldw	r4,1340(sp)
    1a54:	dc402904 	addi	r17,sp,164
    1a58:	d8804004 	addi	r2,sp,256
    1a5c:	00c10004 	movi	r3,1024
    1a60:	423fff4c 	andi	r8,r8,65533
    1a64:	800d883a 	mov	r6,r16
    1a68:	880b883a 	mov	r5,r17
    1a6c:	da002c0d 	sth	r8,176(sp)
    1a70:	da402c8d 	sth	r9,178(sp)
    1a74:	da803015 	stw	r10,192(sp)
    1a78:	dac03215 	stw	r11,200(sp)
    1a7c:	d8802d15 	stw	r2,180(sp)
    1a80:	d8c02e15 	stw	r3,184(sp)
    1a84:	d8802915 	stw	r2,164(sp)
    1a88:	d8c02b15 	stw	r3,172(sp)
    1a8c:	d8002f15 	stw	zero,188(sp)
    1a90:	00019bc0 	call	19bc <___vfprintf_internal_r>
    1a94:	d8814b15 	stw	r2,1324(sp)
    1a98:	10000416 	blt	r2,zero,1aac <___vfprintf_internal_r+0xf0>
    1a9c:	d9014f17 	ldw	r4,1340(sp)
    1aa0:	880b883a 	mov	r5,r17
    1aa4:	00053480 	call	5348 <_fflush_r>
    1aa8:	1002321e 	bne	r2,zero,2374 <___vfprintf_internal_r+0x9b8>
    1aac:	d8802c0b 	ldhu	r2,176(sp)
    1ab0:	1080100c 	andi	r2,r2,64
    1ab4:	10000326 	beq	r2,zero,1ac4 <___vfprintf_internal_r+0x108>
    1ab8:	b080030b 	ldhu	r2,12(r22)
    1abc:	10801014 	ori	r2,r2,64
    1ac0:	b080030d 	sth	r2,12(r22)
    1ac4:	d8814b17 	ldw	r2,1324(sp)
    1ac8:	dfc15b17 	ldw	ra,1388(sp)
    1acc:	df015a17 	ldw	fp,1384(sp)
    1ad0:	ddc15917 	ldw	r23,1380(sp)
    1ad4:	dd815817 	ldw	r22,1376(sp)
    1ad8:	dd415717 	ldw	r21,1372(sp)
    1adc:	dd015617 	ldw	r20,1368(sp)
    1ae0:	dcc15517 	ldw	r19,1364(sp)
    1ae4:	dc815417 	ldw	r18,1360(sp)
    1ae8:	dc415317 	ldw	r17,1356(sp)
    1aec:	dc015217 	ldw	r16,1352(sp)
    1af0:	dec15c04 	addi	sp,sp,1392
    1af4:	f800283a 	ret
    1af8:	0005883a 	mov	r2,zero
    1afc:	0007883a 	mov	r3,zero
    1b00:	dd401904 	addi	r21,sp,100
    1b04:	d8814215 	stw	r2,1288(sp)
    1b08:	802f883a 	mov	r23,r16
    1b0c:	d8c14315 	stw	r3,1292(sp)
    1b10:	d8014b15 	stw	zero,1324(sp)
    1b14:	d8014815 	stw	zero,1312(sp)
    1b18:	d8014415 	stw	zero,1296(sp)
    1b1c:	d8014715 	stw	zero,1308(sp)
    1b20:	dd400c15 	stw	r21,48(sp)
    1b24:	d8000e15 	stw	zero,56(sp)
    1b28:	d8000d15 	stw	zero,52(sp)
    1b2c:	b8800007 	ldb	r2,0(r23)
    1b30:	10001926 	beq	r2,zero,1b98 <___vfprintf_internal_r+0x1dc>
    1b34:	00c00944 	movi	r3,37
    1b38:	10c01726 	beq	r2,r3,1b98 <___vfprintf_internal_r+0x1dc>
    1b3c:	b821883a 	mov	r16,r23
    1b40:	00000106 	br	1b48 <___vfprintf_internal_r+0x18c>
    1b44:	10c00326 	beq	r2,r3,1b54 <___vfprintf_internal_r+0x198>
    1b48:	84000044 	addi	r16,r16,1
    1b4c:	80800007 	ldb	r2,0(r16)
    1b50:	103ffc1e 	bne	r2,zero,1b44 <___vfprintf_internal_r+0x188>
    1b54:	85e7c83a 	sub	r19,r16,r23
    1b58:	98000e26 	beq	r19,zero,1b94 <___vfprintf_internal_r+0x1d8>
    1b5c:	dc800e17 	ldw	r18,56(sp)
    1b60:	dc400d17 	ldw	r17,52(sp)
    1b64:	008001c4 	movi	r2,7
    1b68:	94e5883a 	add	r18,r18,r19
    1b6c:	8c400044 	addi	r17,r17,1
    1b70:	adc00015 	stw	r23,0(r21)
    1b74:	dc800e15 	stw	r18,56(sp)
    1b78:	acc00115 	stw	r19,4(r21)
    1b7c:	dc400d15 	stw	r17,52(sp)
    1b80:	14428b16 	blt	r2,r17,25b0 <___vfprintf_internal_r+0xbf4>
    1b84:	ad400204 	addi	r21,r21,8
    1b88:	d9014b17 	ldw	r4,1324(sp)
    1b8c:	24c9883a 	add	r4,r4,r19
    1b90:	d9014b15 	stw	r4,1324(sp)
    1b94:	802f883a 	mov	r23,r16
    1b98:	b8800007 	ldb	r2,0(r23)
    1b9c:	10013c26 	beq	r2,zero,2090 <___vfprintf_internal_r+0x6d4>
    1ba0:	bdc00044 	addi	r23,r23,1
    1ba4:	d8000405 	stb	zero,16(sp)
    1ba8:	b8c00007 	ldb	r3,0(r23)
    1bac:	04ffffc4 	movi	r19,-1
    1bb0:	d8014c15 	stw	zero,1328(sp)
    1bb4:	d8014a15 	stw	zero,1320(sp)
    1bb8:	d8c14d15 	stw	r3,1332(sp)
    1bbc:	bdc00044 	addi	r23,r23,1
    1bc0:	d9414d17 	ldw	r5,1332(sp)
    1bc4:	00801604 	movi	r2,88
    1bc8:	28fff804 	addi	r3,r5,-32
    1bcc:	10c06036 	bltu	r2,r3,1d50 <___vfprintf_internal_r+0x394>
    1bd0:	18c5883a 	add	r2,r3,r3
    1bd4:	1085883a 	add	r2,r2,r2
    1bd8:	00c00034 	movhi	r3,0
    1bdc:	18c6fb04 	addi	r3,r3,7148
    1be0:	10c5883a 	add	r2,r2,r3
    1be4:	11000017 	ldw	r4,0(r2)
    1be8:	2000683a 	jmp	r4
    1bec:	00002b60 	cmpeqi	zero,zero,173
    1bf0:	00001d50 	cmplti	zero,zero,117
    1bf4:	00001d50 	cmplti	zero,zero,117
    1bf8:	00002b4c 	andi	zero,zero,173
    1bfc:	00001d50 	cmplti	zero,zero,117
    1c00:	00001d50 	cmplti	zero,zero,117
    1c04:	00001d50 	cmplti	zero,zero,117
    1c08:	00001d50 	cmplti	zero,zero,117
    1c0c:	00001d50 	cmplti	zero,zero,117
    1c10:	00001d50 	cmplti	zero,zero,117
    1c14:	0000292c 	andhi	zero,zero,164
    1c18:	00002b3c 	xorhi	zero,zero,172
    1c1c:	00001d50 	cmplti	zero,zero,117
    1c20:	00002944 	movi	zero,165
    1c24:	00002bd8 	cmpnei	zero,zero,175
    1c28:	00001d50 	cmplti	zero,zero,117
    1c2c:	00002bc4 	movi	zero,175
    1c30:	00002b8c 	andi	zero,zero,174
    1c34:	00002b8c 	andi	zero,zero,174
    1c38:	00002b8c 	andi	zero,zero,174
    1c3c:	00002b8c 	andi	zero,zero,174
    1c40:	00002b8c 	andi	zero,zero,174
    1c44:	00002b8c 	andi	zero,zero,174
    1c48:	00002b8c 	andi	zero,zero,174
    1c4c:	00002b8c 	andi	zero,zero,174
    1c50:	00002b8c 	andi	zero,zero,174
    1c54:	00001d50 	cmplti	zero,zero,117
    1c58:	00001d50 	cmplti	zero,zero,117
    1c5c:	00001d50 	cmplti	zero,zero,117
    1c60:	00001d50 	cmplti	zero,zero,117
    1c64:	00001d50 	cmplti	zero,zero,117
    1c68:	00001d50 	cmplti	zero,zero,117
    1c6c:	00001d50 	cmplti	zero,zero,117
    1c70:	00001d50 	cmplti	zero,zero,117
    1c74:	00001d50 	cmplti	zero,zero,117
    1c78:	00001d50 	cmplti	zero,zero,117
    1c7c:	000023a8 	cmpgeui	zero,zero,142
    1c80:	00002a14 	movui	zero,168
    1c84:	00001d50 	cmplti	zero,zero,117
    1c88:	00002a14 	movui	zero,168
    1c8c:	00001d50 	cmplti	zero,zero,117
    1c90:	00001d50 	cmplti	zero,zero,117
    1c94:	00001d50 	cmplti	zero,zero,117
    1c98:	00001d50 	cmplti	zero,zero,117
    1c9c:	00002b78 	rdprs	zero,zero,173
    1ca0:	00001d50 	cmplti	zero,zero,117
    1ca4:	00001d50 	cmplti	zero,zero,117
    1ca8:	0000245c 	xori	zero,zero,145
    1cac:	00001d50 	cmplti	zero,zero,117
    1cb0:	00001d50 	cmplti	zero,zero,117
    1cb4:	00001d50 	cmplti	zero,zero,117
    1cb8:	00001d50 	cmplti	zero,zero,117
    1cbc:	00001d50 	cmplti	zero,zero,117
    1cc0:	000024a8 	cmpgeui	zero,zero,146
    1cc4:	00001d50 	cmplti	zero,zero,117
    1cc8:	00001d50 	cmplti	zero,zero,117
    1ccc:	00002ac8 	cmpgei	zero,zero,171
    1cd0:	00001d50 	cmplti	zero,zero,117
    1cd4:	00001d50 	cmplti	zero,zero,117
    1cd8:	00001d50 	cmplti	zero,zero,117
    1cdc:	00001d50 	cmplti	zero,zero,117
    1ce0:	00001d50 	cmplti	zero,zero,117
    1ce4:	00001d50 	cmplti	zero,zero,117
    1ce8:	00001d50 	cmplti	zero,zero,117
    1cec:	00001d50 	cmplti	zero,zero,117
    1cf0:	00001d50 	cmplti	zero,zero,117
    1cf4:	00001d50 	cmplti	zero,zero,117
    1cf8:	00002a9c 	xori	zero,zero,170
    1cfc:	000023b4 	movhi	zero,142
    1d00:	00002a14 	movui	zero,168
    1d04:	00002a14 	movui	zero,168
    1d08:	00002a14 	movui	zero,168
    1d0c:	00002a00 	call	2a0 <myinterrupt_handler+0x4c>
    1d10:	000023b4 	movhi	zero,142
    1d14:	00001d50 	cmplti	zero,zero,117
    1d18:	00001d50 	cmplti	zero,zero,117
    1d1c:	00002988 	cmpgei	zero,zero,166
    1d20:	00001d50 	cmplti	zero,zero,117
    1d24:	00002958 	cmpnei	zero,zero,165
    1d28:	00002468 	cmpgeui	zero,zero,145
    1d2c:	000029b8 	rdprs	zero,zero,166
    1d30:	000029a4 	muli	zero,zero,166
    1d34:	00001d50 	cmplti	zero,zero,117
    1d38:	00002c34 	movhi	zero,176
    1d3c:	00001d50 	cmplti	zero,zero,117
    1d40:	000024b4 	movhi	zero,146
    1d44:	00001d50 	cmplti	zero,zero,117
    1d48:	00001d50 	cmplti	zero,zero,117
    1d4c:	00002b2c 	andhi	zero,zero,172
    1d50:	d9014d17 	ldw	r4,1332(sp)
    1d54:	2000ce26 	beq	r4,zero,2090 <___vfprintf_internal_r+0x6d4>
    1d58:	01400044 	movi	r5,1
    1d5c:	d9800f04 	addi	r6,sp,60
    1d60:	d9c14015 	stw	r7,1280(sp)
    1d64:	d9414515 	stw	r5,1300(sp)
    1d68:	d9814115 	stw	r6,1284(sp)
    1d6c:	280f883a 	mov	r7,r5
    1d70:	d9000f05 	stb	r4,60(sp)
    1d74:	d8000405 	stb	zero,16(sp)
    1d78:	d8014615 	stw	zero,1304(sp)
    1d7c:	d8c14c17 	ldw	r3,1328(sp)
    1d80:	1880008c 	andi	r2,r3,2
    1d84:	1005003a 	cmpeq	r2,r2,zero
    1d88:	d8815015 	stw	r2,1344(sp)
    1d8c:	1000031e 	bne	r2,zero,1d9c <___vfprintf_internal_r+0x3e0>
    1d90:	d9014517 	ldw	r4,1300(sp)
    1d94:	21000084 	addi	r4,r4,2
    1d98:	d9014515 	stw	r4,1300(sp)
    1d9c:	d9414c17 	ldw	r5,1328(sp)
    1da0:	2940210c 	andi	r5,r5,132
    1da4:	d9414e15 	stw	r5,1336(sp)
    1da8:	28002d1e 	bne	r5,zero,1e60 <___vfprintf_internal_r+0x4a4>
    1dac:	d9814a17 	ldw	r6,1320(sp)
    1db0:	d8814517 	ldw	r2,1300(sp)
    1db4:	30a1c83a 	sub	r16,r6,r2
    1db8:	0400290e 	bge	zero,r16,1e60 <___vfprintf_internal_r+0x4a4>
    1dbc:	00800404 	movi	r2,16
    1dc0:	1404580e 	bge	r2,r16,2f24 <___vfprintf_internal_r+0x1568>
    1dc4:	dc800e17 	ldw	r18,56(sp)
    1dc8:	dc400d17 	ldw	r17,52(sp)
    1dcc:	1027883a 	mov	r19,r2
    1dd0:	07000074 	movhi	fp,1
    1dd4:	e7360384 	addi	fp,fp,-10226
    1dd8:	050001c4 	movi	r20,7
    1ddc:	00000306 	br	1dec <___vfprintf_internal_r+0x430>
    1de0:	843ffc04 	addi	r16,r16,-16
    1de4:	ad400204 	addi	r21,r21,8
    1de8:	9c00130e 	bge	r19,r16,1e38 <___vfprintf_internal_r+0x47c>
    1dec:	94800404 	addi	r18,r18,16
    1df0:	8c400044 	addi	r17,r17,1
    1df4:	af000015 	stw	fp,0(r21)
    1df8:	acc00115 	stw	r19,4(r21)
    1dfc:	dc800e15 	stw	r18,56(sp)
    1e00:	dc400d15 	stw	r17,52(sp)
    1e04:	a47ff60e 	bge	r20,r17,1de0 <___vfprintf_internal_r+0x424>
    1e08:	d9014f17 	ldw	r4,1340(sp)
    1e0c:	b00b883a 	mov	r5,r22
    1e10:	d9800c04 	addi	r6,sp,48
    1e14:	d9c15115 	stw	r7,1348(sp)
    1e18:	00019640 	call	1964 <__sprint_r>
    1e1c:	d9c15117 	ldw	r7,1348(sp)
    1e20:	10009e1e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    1e24:	843ffc04 	addi	r16,r16,-16
    1e28:	dc800e17 	ldw	r18,56(sp)
    1e2c:	dc400d17 	ldw	r17,52(sp)
    1e30:	dd401904 	addi	r21,sp,100
    1e34:	9c3fed16 	blt	r19,r16,1dec <___vfprintf_internal_r+0x430>
    1e38:	9425883a 	add	r18,r18,r16
    1e3c:	8c400044 	addi	r17,r17,1
    1e40:	008001c4 	movi	r2,7
    1e44:	af000015 	stw	fp,0(r21)
    1e48:	ac000115 	stw	r16,4(r21)
    1e4c:	dc800e15 	stw	r18,56(sp)
    1e50:	dc400d15 	stw	r17,52(sp)
    1e54:	1441f516 	blt	r2,r17,262c <___vfprintf_internal_r+0xc70>
    1e58:	ad400204 	addi	r21,r21,8
    1e5c:	00000206 	br	1e68 <___vfprintf_internal_r+0x4ac>
    1e60:	dc800e17 	ldw	r18,56(sp)
    1e64:	dc400d17 	ldw	r17,52(sp)
    1e68:	d8800407 	ldb	r2,16(sp)
    1e6c:	10000b26 	beq	r2,zero,1e9c <___vfprintf_internal_r+0x4e0>
    1e70:	00800044 	movi	r2,1
    1e74:	94800044 	addi	r18,r18,1
    1e78:	8c400044 	addi	r17,r17,1
    1e7c:	a8800115 	stw	r2,4(r21)
    1e80:	d8c00404 	addi	r3,sp,16
    1e84:	008001c4 	movi	r2,7
    1e88:	a8c00015 	stw	r3,0(r21)
    1e8c:	dc800e15 	stw	r18,56(sp)
    1e90:	dc400d15 	stw	r17,52(sp)
    1e94:	1441da16 	blt	r2,r17,2600 <___vfprintf_internal_r+0xc44>
    1e98:	ad400204 	addi	r21,r21,8
    1e9c:	d9015017 	ldw	r4,1344(sp)
    1ea0:	20000b1e 	bne	r4,zero,1ed0 <___vfprintf_internal_r+0x514>
    1ea4:	d8800444 	addi	r2,sp,17
    1ea8:	94800084 	addi	r18,r18,2
    1eac:	8c400044 	addi	r17,r17,1
    1eb0:	a8800015 	stw	r2,0(r21)
    1eb4:	00c00084 	movi	r3,2
    1eb8:	008001c4 	movi	r2,7
    1ebc:	a8c00115 	stw	r3,4(r21)
    1ec0:	dc800e15 	stw	r18,56(sp)
    1ec4:	dc400d15 	stw	r17,52(sp)
    1ec8:	1441c216 	blt	r2,r17,25d4 <___vfprintf_internal_r+0xc18>
    1ecc:	ad400204 	addi	r21,r21,8
    1ed0:	d9414e17 	ldw	r5,1336(sp)
    1ed4:	00802004 	movi	r2,128
    1ed8:	2880b126 	beq	r5,r2,21a0 <___vfprintf_internal_r+0x7e4>
    1edc:	d8c14617 	ldw	r3,1304(sp)
    1ee0:	19e1c83a 	sub	r16,r3,r7
    1ee4:	0400260e 	bge	zero,r16,1f80 <___vfprintf_internal_r+0x5c4>
    1ee8:	00800404 	movi	r2,16
    1eec:	1403c90e 	bge	r2,r16,2e14 <___vfprintf_internal_r+0x1458>
    1ef0:	1027883a 	mov	r19,r2
    1ef4:	07000074 	movhi	fp,1
    1ef8:	e735ff84 	addi	fp,fp,-10242
    1efc:	050001c4 	movi	r20,7
    1f00:	00000306 	br	1f10 <___vfprintf_internal_r+0x554>
    1f04:	843ffc04 	addi	r16,r16,-16
    1f08:	ad400204 	addi	r21,r21,8
    1f0c:	9c00130e 	bge	r19,r16,1f5c <___vfprintf_internal_r+0x5a0>
    1f10:	94800404 	addi	r18,r18,16
    1f14:	8c400044 	addi	r17,r17,1
    1f18:	af000015 	stw	fp,0(r21)
    1f1c:	acc00115 	stw	r19,4(r21)
    1f20:	dc800e15 	stw	r18,56(sp)
    1f24:	dc400d15 	stw	r17,52(sp)
    1f28:	a47ff60e 	bge	r20,r17,1f04 <___vfprintf_internal_r+0x548>
    1f2c:	d9014f17 	ldw	r4,1340(sp)
    1f30:	b00b883a 	mov	r5,r22
    1f34:	d9800c04 	addi	r6,sp,48
    1f38:	d9c15115 	stw	r7,1348(sp)
    1f3c:	00019640 	call	1964 <__sprint_r>
    1f40:	d9c15117 	ldw	r7,1348(sp)
    1f44:	1000551e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    1f48:	843ffc04 	addi	r16,r16,-16
    1f4c:	dc800e17 	ldw	r18,56(sp)
    1f50:	dc400d17 	ldw	r17,52(sp)
    1f54:	dd401904 	addi	r21,sp,100
    1f58:	9c3fed16 	blt	r19,r16,1f10 <___vfprintf_internal_r+0x554>
    1f5c:	9425883a 	add	r18,r18,r16
    1f60:	8c400044 	addi	r17,r17,1
    1f64:	008001c4 	movi	r2,7
    1f68:	af000015 	stw	fp,0(r21)
    1f6c:	ac000115 	stw	r16,4(r21)
    1f70:	dc800e15 	stw	r18,56(sp)
    1f74:	dc400d15 	stw	r17,52(sp)
    1f78:	14418216 	blt	r2,r17,2584 <___vfprintf_internal_r+0xbc8>
    1f7c:	ad400204 	addi	r21,r21,8
    1f80:	d9014c17 	ldw	r4,1328(sp)
    1f84:	2080400c 	andi	r2,r4,256
    1f88:	10004a1e 	bne	r2,zero,20b4 <___vfprintf_internal_r+0x6f8>
    1f8c:	d9414117 	ldw	r5,1284(sp)
    1f90:	91e5883a 	add	r18,r18,r7
    1f94:	8c400044 	addi	r17,r17,1
    1f98:	008001c4 	movi	r2,7
    1f9c:	a9400015 	stw	r5,0(r21)
    1fa0:	a9c00115 	stw	r7,4(r21)
    1fa4:	dc800e15 	stw	r18,56(sp)
    1fa8:	dc400d15 	stw	r17,52(sp)
    1fac:	14416716 	blt	r2,r17,254c <___vfprintf_internal_r+0xb90>
    1fb0:	a8c00204 	addi	r3,r21,8
    1fb4:	d9814c17 	ldw	r6,1328(sp)
    1fb8:	3080010c 	andi	r2,r6,4
    1fbc:	10002826 	beq	r2,zero,2060 <___vfprintf_internal_r+0x6a4>
    1fc0:	d8814a17 	ldw	r2,1320(sp)
    1fc4:	d9014517 	ldw	r4,1300(sp)
    1fc8:	1121c83a 	sub	r16,r2,r4
    1fcc:	0400240e 	bge	zero,r16,2060 <___vfprintf_internal_r+0x6a4>
    1fd0:	00800404 	movi	r2,16
    1fd4:	14044f0e 	bge	r2,r16,3114 <___vfprintf_internal_r+0x1758>
    1fd8:	dc400d17 	ldw	r17,52(sp)
    1fdc:	1027883a 	mov	r19,r2
    1fe0:	07000074 	movhi	fp,1
    1fe4:	e7360384 	addi	fp,fp,-10226
    1fe8:	050001c4 	movi	r20,7
    1fec:	00000306 	br	1ffc <___vfprintf_internal_r+0x640>
    1ff0:	843ffc04 	addi	r16,r16,-16
    1ff4:	18c00204 	addi	r3,r3,8
    1ff8:	9c00110e 	bge	r19,r16,2040 <___vfprintf_internal_r+0x684>
    1ffc:	94800404 	addi	r18,r18,16
    2000:	8c400044 	addi	r17,r17,1
    2004:	1f000015 	stw	fp,0(r3)
    2008:	1cc00115 	stw	r19,4(r3)
    200c:	dc800e15 	stw	r18,56(sp)
    2010:	dc400d15 	stw	r17,52(sp)
    2014:	a47ff60e 	bge	r20,r17,1ff0 <___vfprintf_internal_r+0x634>
    2018:	d9014f17 	ldw	r4,1340(sp)
    201c:	b00b883a 	mov	r5,r22
    2020:	d9800c04 	addi	r6,sp,48
    2024:	00019640 	call	1964 <__sprint_r>
    2028:	10001c1e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    202c:	843ffc04 	addi	r16,r16,-16
    2030:	dc800e17 	ldw	r18,56(sp)
    2034:	dc400d17 	ldw	r17,52(sp)
    2038:	d8c01904 	addi	r3,sp,100
    203c:	9c3fef16 	blt	r19,r16,1ffc <___vfprintf_internal_r+0x640>
    2040:	9425883a 	add	r18,r18,r16
    2044:	8c400044 	addi	r17,r17,1
    2048:	008001c4 	movi	r2,7
    204c:	1f000015 	stw	fp,0(r3)
    2050:	1c000115 	stw	r16,4(r3)
    2054:	dc800e15 	stw	r18,56(sp)
    2058:	dc400d15 	stw	r17,52(sp)
    205c:	1440cb16 	blt	r2,r17,238c <___vfprintf_internal_r+0x9d0>
    2060:	d8814a17 	ldw	r2,1320(sp)
    2064:	d9414517 	ldw	r5,1300(sp)
    2068:	1140010e 	bge	r2,r5,2070 <___vfprintf_internal_r+0x6b4>
    206c:	2805883a 	mov	r2,r5
    2070:	d9814b17 	ldw	r6,1324(sp)
    2074:	308d883a 	add	r6,r6,r2
    2078:	d9814b15 	stw	r6,1324(sp)
    207c:	90013b1e 	bne	r18,zero,256c <___vfprintf_internal_r+0xbb0>
    2080:	d9c14017 	ldw	r7,1280(sp)
    2084:	dd401904 	addi	r21,sp,100
    2088:	d8000d15 	stw	zero,52(sp)
    208c:	003ea706 	br	1b2c <___vfprintf_internal_r+0x170>
    2090:	d8800e17 	ldw	r2,56(sp)
    2094:	10053f1e 	bne	r2,zero,3594 <___vfprintf_internal_r+0x1bd8>
    2098:	d8000d15 	stw	zero,52(sp)
    209c:	b080030b 	ldhu	r2,12(r22)
    20a0:	1080100c 	andi	r2,r2,64
    20a4:	103e8726 	beq	r2,zero,1ac4 <___vfprintf_internal_r+0x108>
    20a8:	00bfffc4 	movi	r2,-1
    20ac:	d8814b15 	stw	r2,1324(sp)
    20b0:	003e8406 	br	1ac4 <___vfprintf_internal_r+0x108>
    20b4:	d9814d17 	ldw	r6,1332(sp)
    20b8:	00801944 	movi	r2,101
    20bc:	11806e16 	blt	r2,r6,2278 <___vfprintf_internal_r+0x8bc>
    20c0:	d9414717 	ldw	r5,1308(sp)
    20c4:	00c00044 	movi	r3,1
    20c8:	1943430e 	bge	r3,r5,2dd8 <___vfprintf_internal_r+0x141c>
    20cc:	d8814117 	ldw	r2,1284(sp)
    20d0:	94800044 	addi	r18,r18,1
    20d4:	8c400044 	addi	r17,r17,1
    20d8:	a8800015 	stw	r2,0(r21)
    20dc:	008001c4 	movi	r2,7
    20e0:	a8c00115 	stw	r3,4(r21)
    20e4:	dc800e15 	stw	r18,56(sp)
    20e8:	dc400d15 	stw	r17,52(sp)
    20ec:	1441ca16 	blt	r2,r17,2818 <___vfprintf_internal_r+0xe5c>
    20f0:	a8c00204 	addi	r3,r21,8
    20f4:	d9014917 	ldw	r4,1316(sp)
    20f8:	00800044 	movi	r2,1
    20fc:	94800044 	addi	r18,r18,1
    2100:	8c400044 	addi	r17,r17,1
    2104:	18800115 	stw	r2,4(r3)
    2108:	008001c4 	movi	r2,7
    210c:	19000015 	stw	r4,0(r3)
    2110:	dc800e15 	stw	r18,56(sp)
    2114:	dc400d15 	stw	r17,52(sp)
    2118:	1441b616 	blt	r2,r17,27f4 <___vfprintf_internal_r+0xe38>
    211c:	1cc00204 	addi	r19,r3,8
    2120:	d9014217 	ldw	r4,1288(sp)
    2124:	d9414317 	ldw	r5,1292(sp)
    2128:	000d883a 	mov	r6,zero
    212c:	000f883a 	mov	r7,zero
    2130:	0009f480 	call	9f48 <__nedf2>
    2134:	10017426 	beq	r2,zero,2708 <___vfprintf_internal_r+0xd4c>
    2138:	d9414717 	ldw	r5,1308(sp)
    213c:	d9814117 	ldw	r6,1284(sp)
    2140:	8c400044 	addi	r17,r17,1
    2144:	2c85883a 	add	r2,r5,r18
    2148:	14bfffc4 	addi	r18,r2,-1
    214c:	28bfffc4 	addi	r2,r5,-1
    2150:	30c00044 	addi	r3,r6,1
    2154:	98800115 	stw	r2,4(r19)
    2158:	008001c4 	movi	r2,7
    215c:	98c00015 	stw	r3,0(r19)
    2160:	dc800e15 	stw	r18,56(sp)
    2164:	dc400d15 	stw	r17,52(sp)
    2168:	14418e16 	blt	r2,r17,27a4 <___vfprintf_internal_r+0xde8>
    216c:	9cc00204 	addi	r19,r19,8
    2170:	d9414817 	ldw	r5,1312(sp)
    2174:	d8800804 	addi	r2,sp,32
    2178:	8c400044 	addi	r17,r17,1
    217c:	9165883a 	add	r18,r18,r5
    2180:	98800015 	stw	r2,0(r19)
    2184:	008001c4 	movi	r2,7
    2188:	99400115 	stw	r5,4(r19)
    218c:	dc800e15 	stw	r18,56(sp)
    2190:	dc400d15 	stw	r17,52(sp)
    2194:	1440ed16 	blt	r2,r17,254c <___vfprintf_internal_r+0xb90>
    2198:	98c00204 	addi	r3,r19,8
    219c:	003f8506 	br	1fb4 <___vfprintf_internal_r+0x5f8>
    21a0:	d9814a17 	ldw	r6,1320(sp)
    21a4:	d8814517 	ldw	r2,1300(sp)
    21a8:	30a1c83a 	sub	r16,r6,r2
    21ac:	043f4b0e 	bge	zero,r16,1edc <___vfprintf_internal_r+0x520>
    21b0:	00800404 	movi	r2,16
    21b4:	1404340e 	bge	r2,r16,3288 <___vfprintf_internal_r+0x18cc>
    21b8:	1027883a 	mov	r19,r2
    21bc:	07000074 	movhi	fp,1
    21c0:	e735ff84 	addi	fp,fp,-10242
    21c4:	050001c4 	movi	r20,7
    21c8:	00000306 	br	21d8 <___vfprintf_internal_r+0x81c>
    21cc:	843ffc04 	addi	r16,r16,-16
    21d0:	ad400204 	addi	r21,r21,8
    21d4:	9c00130e 	bge	r19,r16,2224 <___vfprintf_internal_r+0x868>
    21d8:	94800404 	addi	r18,r18,16
    21dc:	8c400044 	addi	r17,r17,1
    21e0:	af000015 	stw	fp,0(r21)
    21e4:	acc00115 	stw	r19,4(r21)
    21e8:	dc800e15 	stw	r18,56(sp)
    21ec:	dc400d15 	stw	r17,52(sp)
    21f0:	a47ff60e 	bge	r20,r17,21cc <___vfprintf_internal_r+0x810>
    21f4:	d9014f17 	ldw	r4,1340(sp)
    21f8:	b00b883a 	mov	r5,r22
    21fc:	d9800c04 	addi	r6,sp,48
    2200:	d9c15115 	stw	r7,1348(sp)
    2204:	00019640 	call	1964 <__sprint_r>
    2208:	d9c15117 	ldw	r7,1348(sp)
    220c:	103fa31e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    2210:	843ffc04 	addi	r16,r16,-16
    2214:	dc800e17 	ldw	r18,56(sp)
    2218:	dc400d17 	ldw	r17,52(sp)
    221c:	dd401904 	addi	r21,sp,100
    2220:	9c3fed16 	blt	r19,r16,21d8 <___vfprintf_internal_r+0x81c>
    2224:	9425883a 	add	r18,r18,r16
    2228:	8c400044 	addi	r17,r17,1
    222c:	008001c4 	movi	r2,7
    2230:	af000015 	stw	fp,0(r21)
    2234:	ac000115 	stw	r16,4(r21)
    2238:	dc800e15 	stw	r18,56(sp)
    223c:	dc400d15 	stw	r17,52(sp)
    2240:	14416116 	blt	r2,r17,27c8 <___vfprintf_internal_r+0xe0c>
    2244:	ad400204 	addi	r21,r21,8
    2248:	003f2406 	br	1edc <___vfprintf_internal_r+0x520>
    224c:	d9014f17 	ldw	r4,1340(sp)
    2250:	00055e00 	call	55e0 <__sinit>
    2254:	d9c15117 	ldw	r7,1348(sp)
    2258:	003def06 	br	1a18 <___vfprintf_internal_r+0x5c>
    225c:	d9014f17 	ldw	r4,1340(sp)
    2260:	b00b883a 	mov	r5,r22
    2264:	d9c15115 	stw	r7,1348(sp)
    2268:	000388c0 	call	388c <__swsetup_r>
    226c:	d9c15117 	ldw	r7,1348(sp)
    2270:	103dee26 	beq	r2,zero,1a2c <___vfprintf_internal_r+0x70>
    2274:	003f8c06 	br	20a8 <___vfprintf_internal_r+0x6ec>
    2278:	d9014217 	ldw	r4,1288(sp)
    227c:	d9414317 	ldw	r5,1292(sp)
    2280:	000d883a 	mov	r6,zero
    2284:	000f883a 	mov	r7,zero
    2288:	0009ec00 	call	9ec0 <__eqdf2>
    228c:	1000f21e 	bne	r2,zero,2658 <___vfprintf_internal_r+0xc9c>
    2290:	00800074 	movhi	r2,1
    2294:	10b5ff04 	addi	r2,r2,-10244
    2298:	94800044 	addi	r18,r18,1
    229c:	8c400044 	addi	r17,r17,1
    22a0:	a8800015 	stw	r2,0(r21)
    22a4:	00c00044 	movi	r3,1
    22a8:	008001c4 	movi	r2,7
    22ac:	a8c00115 	stw	r3,4(r21)
    22b0:	dc800e15 	stw	r18,56(sp)
    22b4:	dc400d15 	stw	r17,52(sp)
    22b8:	1442fa16 	blt	r2,r17,2ea4 <___vfprintf_internal_r+0x14e8>
    22bc:	a8c00204 	addi	r3,r21,8
    22c0:	d8800517 	ldw	r2,20(sp)
    22c4:	d9014717 	ldw	r4,1308(sp)
    22c8:	11015c0e 	bge	r2,r4,283c <___vfprintf_internal_r+0xe80>
    22cc:	dc400d17 	ldw	r17,52(sp)
    22d0:	d9814917 	ldw	r6,1316(sp)
    22d4:	00800044 	movi	r2,1
    22d8:	94800044 	addi	r18,r18,1
    22dc:	8c400044 	addi	r17,r17,1
    22e0:	18800115 	stw	r2,4(r3)
    22e4:	008001c4 	movi	r2,7
    22e8:	19800015 	stw	r6,0(r3)
    22ec:	dc800e15 	stw	r18,56(sp)
    22f0:	dc400d15 	stw	r17,52(sp)
    22f4:	14431016 	blt	r2,r17,2f38 <___vfprintf_internal_r+0x157c>
    22f8:	18c00204 	addi	r3,r3,8
    22fc:	d8814717 	ldw	r2,1308(sp)
    2300:	143fffc4 	addi	r16,r2,-1
    2304:	043f2b0e 	bge	zero,r16,1fb4 <___vfprintf_internal_r+0x5f8>
    2308:	00800404 	movi	r2,16
    230c:	1402a20e 	bge	r2,r16,2d98 <___vfprintf_internal_r+0x13dc>
    2310:	dc400d17 	ldw	r17,52(sp)
    2314:	1027883a 	mov	r19,r2
    2318:	07000074 	movhi	fp,1
    231c:	e735ff84 	addi	fp,fp,-10242
    2320:	050001c4 	movi	r20,7
    2324:	00000306 	br	2334 <___vfprintf_internal_r+0x978>
    2328:	18c00204 	addi	r3,r3,8
    232c:	843ffc04 	addi	r16,r16,-16
    2330:	9c029c0e 	bge	r19,r16,2da4 <___vfprintf_internal_r+0x13e8>
    2334:	94800404 	addi	r18,r18,16
    2338:	8c400044 	addi	r17,r17,1
    233c:	1f000015 	stw	fp,0(r3)
    2340:	1cc00115 	stw	r19,4(r3)
    2344:	dc800e15 	stw	r18,56(sp)
    2348:	dc400d15 	stw	r17,52(sp)
    234c:	a47ff60e 	bge	r20,r17,2328 <___vfprintf_internal_r+0x96c>
    2350:	d9014f17 	ldw	r4,1340(sp)
    2354:	b00b883a 	mov	r5,r22
    2358:	d9800c04 	addi	r6,sp,48
    235c:	00019640 	call	1964 <__sprint_r>
    2360:	103f4e1e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    2364:	dc800e17 	ldw	r18,56(sp)
    2368:	dc400d17 	ldw	r17,52(sp)
    236c:	d8c01904 	addi	r3,sp,100
    2370:	003fee06 	br	232c <___vfprintf_internal_r+0x970>
    2374:	d8802c0b 	ldhu	r2,176(sp)
    2378:	00ffffc4 	movi	r3,-1
    237c:	d8c14b15 	stw	r3,1324(sp)
    2380:	1080100c 	andi	r2,r2,64
    2384:	103dcc1e 	bne	r2,zero,1ab8 <___vfprintf_internal_r+0xfc>
    2388:	003dce06 	br	1ac4 <___vfprintf_internal_r+0x108>
    238c:	d9014f17 	ldw	r4,1340(sp)
    2390:	b00b883a 	mov	r5,r22
    2394:	d9800c04 	addi	r6,sp,48
    2398:	00019640 	call	1964 <__sprint_r>
    239c:	103f3f1e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    23a0:	dc800e17 	ldw	r18,56(sp)
    23a4:	003f2e06 	br	2060 <___vfprintf_internal_r+0x6a4>
    23a8:	d9414c17 	ldw	r5,1328(sp)
    23ac:	29400414 	ori	r5,r5,16
    23b0:	d9414c15 	stw	r5,1328(sp)
    23b4:	d9814c17 	ldw	r6,1328(sp)
    23b8:	3080080c 	andi	r2,r6,32
    23bc:	10014f1e 	bne	r2,zero,28fc <___vfprintf_internal_r+0xf40>
    23c0:	d8c14c17 	ldw	r3,1328(sp)
    23c4:	1880040c 	andi	r2,r3,16
    23c8:	1002ea1e 	bne	r2,zero,2f74 <___vfprintf_internal_r+0x15b8>
    23cc:	d9014c17 	ldw	r4,1328(sp)
    23d0:	2080100c 	andi	r2,r4,64
    23d4:	1002e726 	beq	r2,zero,2f74 <___vfprintf_internal_r+0x15b8>
    23d8:	3880000f 	ldh	r2,0(r7)
    23dc:	39c00104 	addi	r7,r7,4
    23e0:	d9c14015 	stw	r7,1280(sp)
    23e4:	1023d7fa 	srai	r17,r2,31
    23e8:	1021883a 	mov	r16,r2
    23ec:	88037216 	blt	r17,zero,31b8 <___vfprintf_internal_r+0x17fc>
    23f0:	01000044 	movi	r4,1
    23f4:	98000416 	blt	r19,zero,2408 <___vfprintf_internal_r+0xa4c>
    23f8:	d8c14c17 	ldw	r3,1328(sp)
    23fc:	00bfdfc4 	movi	r2,-129
    2400:	1886703a 	and	r3,r3,r2
    2404:	d8c14c15 	stw	r3,1328(sp)
    2408:	8444b03a 	or	r2,r16,r17
    240c:	1002261e 	bne	r2,zero,2ca8 <___vfprintf_internal_r+0x12ec>
    2410:	9802251e 	bne	r19,zero,2ca8 <___vfprintf_internal_r+0x12ec>
    2414:	20803fcc 	andi	r2,r4,255
    2418:	10029b26 	beq	r2,zero,2e88 <___vfprintf_internal_r+0x14cc>
    241c:	d8c01904 	addi	r3,sp,100
    2420:	dd000f04 	addi	r20,sp,60
    2424:	d8c14115 	stw	r3,1284(sp)
    2428:	d8c14117 	ldw	r3,1284(sp)
    242c:	dcc14515 	stw	r19,1300(sp)
    2430:	a0c5c83a 	sub	r2,r20,r3
    2434:	11c00a04 	addi	r7,r2,40
    2438:	99c0010e 	bge	r19,r7,2440 <___vfprintf_internal_r+0xa84>
    243c:	d9c14515 	stw	r7,1300(sp)
    2440:	dcc14615 	stw	r19,1304(sp)
    2444:	d8800407 	ldb	r2,16(sp)
    2448:	103e4c26 	beq	r2,zero,1d7c <___vfprintf_internal_r+0x3c0>
    244c:	d8814517 	ldw	r2,1300(sp)
    2450:	10800044 	addi	r2,r2,1
    2454:	d8814515 	stw	r2,1300(sp)
    2458:	003e4806 	br	1d7c <___vfprintf_internal_r+0x3c0>
    245c:	d9814c17 	ldw	r6,1328(sp)
    2460:	31800414 	ori	r6,r6,16
    2464:	d9814c15 	stw	r6,1328(sp)
    2468:	d8c14c17 	ldw	r3,1328(sp)
    246c:	1880080c 	andi	r2,r3,32
    2470:	1001271e 	bne	r2,zero,2910 <___vfprintf_internal_r+0xf54>
    2474:	d9414c17 	ldw	r5,1328(sp)
    2478:	2880040c 	andi	r2,r5,16
    247c:	1002b61e 	bne	r2,zero,2f58 <___vfprintf_internal_r+0x159c>
    2480:	d9814c17 	ldw	r6,1328(sp)
    2484:	3080100c 	andi	r2,r6,64
    2488:	1002b326 	beq	r2,zero,2f58 <___vfprintf_internal_r+0x159c>
    248c:	3c00000b 	ldhu	r16,0(r7)
    2490:	0009883a 	mov	r4,zero
    2494:	39c00104 	addi	r7,r7,4
    2498:	0023883a 	mov	r17,zero
    249c:	d9c14015 	stw	r7,1280(sp)
    24a0:	d8000405 	stb	zero,16(sp)
    24a4:	003fd306 	br	23f4 <___vfprintf_internal_r+0xa38>
    24a8:	d9014c17 	ldw	r4,1328(sp)
    24ac:	21000414 	ori	r4,r4,16
    24b0:	d9014c15 	stw	r4,1328(sp)
    24b4:	d9414c17 	ldw	r5,1328(sp)
    24b8:	2880080c 	andi	r2,r5,32
    24bc:	1001081e 	bne	r2,zero,28e0 <___vfprintf_internal_r+0xf24>
    24c0:	d8c14c17 	ldw	r3,1328(sp)
    24c4:	1880040c 	andi	r2,r3,16
    24c8:	1002b01e 	bne	r2,zero,2f8c <___vfprintf_internal_r+0x15d0>
    24cc:	d9014c17 	ldw	r4,1328(sp)
    24d0:	2080100c 	andi	r2,r4,64
    24d4:	1002ad26 	beq	r2,zero,2f8c <___vfprintf_internal_r+0x15d0>
    24d8:	3c00000b 	ldhu	r16,0(r7)
    24dc:	01000044 	movi	r4,1
    24e0:	39c00104 	addi	r7,r7,4
    24e4:	0023883a 	mov	r17,zero
    24e8:	d9c14015 	stw	r7,1280(sp)
    24ec:	d8000405 	stb	zero,16(sp)
    24f0:	003fc006 	br	23f4 <___vfprintf_internal_r+0xa38>
    24f4:	d9014f17 	ldw	r4,1340(sp)
    24f8:	b00b883a 	mov	r5,r22
    24fc:	d9800c04 	addi	r6,sp,48
    2500:	00019640 	call	1964 <__sprint_r>
    2504:	103ee51e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    2508:	dc800e17 	ldw	r18,56(sp)
    250c:	d8c01904 	addi	r3,sp,100
    2510:	d9814c17 	ldw	r6,1328(sp)
    2514:	3080004c 	andi	r2,r6,1
    2518:	1005003a 	cmpeq	r2,r2,zero
    251c:	103ea51e 	bne	r2,zero,1fb4 <___vfprintf_internal_r+0x5f8>
    2520:	00800044 	movi	r2,1
    2524:	dc400d17 	ldw	r17,52(sp)
    2528:	18800115 	stw	r2,4(r3)
    252c:	d8814917 	ldw	r2,1316(sp)
    2530:	94800044 	addi	r18,r18,1
    2534:	8c400044 	addi	r17,r17,1
    2538:	18800015 	stw	r2,0(r3)
    253c:	008001c4 	movi	r2,7
    2540:	dc800e15 	stw	r18,56(sp)
    2544:	dc400d15 	stw	r17,52(sp)
    2548:	14421e0e 	bge	r2,r17,2dc4 <___vfprintf_internal_r+0x1408>
    254c:	d9014f17 	ldw	r4,1340(sp)
    2550:	b00b883a 	mov	r5,r22
    2554:	d9800c04 	addi	r6,sp,48
    2558:	00019640 	call	1964 <__sprint_r>
    255c:	103ecf1e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    2560:	dc800e17 	ldw	r18,56(sp)
    2564:	d8c01904 	addi	r3,sp,100
    2568:	003e9206 	br	1fb4 <___vfprintf_internal_r+0x5f8>
    256c:	d9014f17 	ldw	r4,1340(sp)
    2570:	b00b883a 	mov	r5,r22
    2574:	d9800c04 	addi	r6,sp,48
    2578:	00019640 	call	1964 <__sprint_r>
    257c:	103ec026 	beq	r2,zero,2080 <___vfprintf_internal_r+0x6c4>
    2580:	003ec606 	br	209c <___vfprintf_internal_r+0x6e0>
    2584:	d9014f17 	ldw	r4,1340(sp)
    2588:	b00b883a 	mov	r5,r22
    258c:	d9800c04 	addi	r6,sp,48
    2590:	d9c15115 	stw	r7,1348(sp)
    2594:	00019640 	call	1964 <__sprint_r>
    2598:	d9c15117 	ldw	r7,1348(sp)
    259c:	103ebf1e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    25a0:	dc800e17 	ldw	r18,56(sp)
    25a4:	dc400d17 	ldw	r17,52(sp)
    25a8:	dd401904 	addi	r21,sp,100
    25ac:	003e7406 	br	1f80 <___vfprintf_internal_r+0x5c4>
    25b0:	d9014f17 	ldw	r4,1340(sp)
    25b4:	b00b883a 	mov	r5,r22
    25b8:	d9800c04 	addi	r6,sp,48
    25bc:	d9c15115 	stw	r7,1348(sp)
    25c0:	00019640 	call	1964 <__sprint_r>
    25c4:	d9c15117 	ldw	r7,1348(sp)
    25c8:	103eb41e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    25cc:	dd401904 	addi	r21,sp,100
    25d0:	003d6d06 	br	1b88 <___vfprintf_internal_r+0x1cc>
    25d4:	d9014f17 	ldw	r4,1340(sp)
    25d8:	b00b883a 	mov	r5,r22
    25dc:	d9800c04 	addi	r6,sp,48
    25e0:	d9c15115 	stw	r7,1348(sp)
    25e4:	00019640 	call	1964 <__sprint_r>
    25e8:	d9c15117 	ldw	r7,1348(sp)
    25ec:	103eab1e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    25f0:	dc800e17 	ldw	r18,56(sp)
    25f4:	dc400d17 	ldw	r17,52(sp)
    25f8:	dd401904 	addi	r21,sp,100
    25fc:	003e3406 	br	1ed0 <___vfprintf_internal_r+0x514>
    2600:	d9014f17 	ldw	r4,1340(sp)
    2604:	b00b883a 	mov	r5,r22
    2608:	d9800c04 	addi	r6,sp,48
    260c:	d9c15115 	stw	r7,1348(sp)
    2610:	00019640 	call	1964 <__sprint_r>
    2614:	d9c15117 	ldw	r7,1348(sp)
    2618:	103ea01e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    261c:	dc800e17 	ldw	r18,56(sp)
    2620:	dc400d17 	ldw	r17,52(sp)
    2624:	dd401904 	addi	r21,sp,100
    2628:	003e1c06 	br	1e9c <___vfprintf_internal_r+0x4e0>
    262c:	d9014f17 	ldw	r4,1340(sp)
    2630:	b00b883a 	mov	r5,r22
    2634:	d9800c04 	addi	r6,sp,48
    2638:	d9c15115 	stw	r7,1348(sp)
    263c:	00019640 	call	1964 <__sprint_r>
    2640:	d9c15117 	ldw	r7,1348(sp)
    2644:	103e951e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    2648:	dc800e17 	ldw	r18,56(sp)
    264c:	dc400d17 	ldw	r17,52(sp)
    2650:	dd401904 	addi	r21,sp,100
    2654:	003e0406 	br	1e68 <___vfprintf_internal_r+0x4ac>
    2658:	d9000517 	ldw	r4,20(sp)
    265c:	0102520e 	bge	zero,r4,2fa8 <___vfprintf_internal_r+0x15ec>
    2660:	d9814717 	ldw	r6,1308(sp)
    2664:	21807a16 	blt	r4,r6,2850 <___vfprintf_internal_r+0xe94>
    2668:	d8814117 	ldw	r2,1284(sp)
    266c:	91a5883a 	add	r18,r18,r6
    2670:	8c400044 	addi	r17,r17,1
    2674:	a8800015 	stw	r2,0(r21)
    2678:	008001c4 	movi	r2,7
    267c:	a9800115 	stw	r6,4(r21)
    2680:	dc800e15 	stw	r18,56(sp)
    2684:	dc400d15 	stw	r17,52(sp)
    2688:	1442f616 	blt	r2,r17,3264 <___vfprintf_internal_r+0x18a8>
    268c:	a8c00204 	addi	r3,r21,8
    2690:	d9414717 	ldw	r5,1308(sp)
    2694:	2161c83a 	sub	r16,r4,r5
    2698:	043f9d0e 	bge	zero,r16,2510 <___vfprintf_internal_r+0xb54>
    269c:	00800404 	movi	r2,16
    26a0:	1402130e 	bge	r2,r16,2ef0 <___vfprintf_internal_r+0x1534>
    26a4:	dc400d17 	ldw	r17,52(sp)
    26a8:	1027883a 	mov	r19,r2
    26ac:	07000074 	movhi	fp,1
    26b0:	e735ff84 	addi	fp,fp,-10242
    26b4:	050001c4 	movi	r20,7
    26b8:	00000306 	br	26c8 <___vfprintf_internal_r+0xd0c>
    26bc:	18c00204 	addi	r3,r3,8
    26c0:	843ffc04 	addi	r16,r16,-16
    26c4:	9c020d0e 	bge	r19,r16,2efc <___vfprintf_internal_r+0x1540>
    26c8:	94800404 	addi	r18,r18,16
    26cc:	8c400044 	addi	r17,r17,1
    26d0:	1f000015 	stw	fp,0(r3)
    26d4:	1cc00115 	stw	r19,4(r3)
    26d8:	dc800e15 	stw	r18,56(sp)
    26dc:	dc400d15 	stw	r17,52(sp)
    26e0:	a47ff60e 	bge	r20,r17,26bc <___vfprintf_internal_r+0xd00>
    26e4:	d9014f17 	ldw	r4,1340(sp)
    26e8:	b00b883a 	mov	r5,r22
    26ec:	d9800c04 	addi	r6,sp,48
    26f0:	00019640 	call	1964 <__sprint_r>
    26f4:	103e691e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    26f8:	dc800e17 	ldw	r18,56(sp)
    26fc:	dc400d17 	ldw	r17,52(sp)
    2700:	d8c01904 	addi	r3,sp,100
    2704:	003fee06 	br	26c0 <___vfprintf_internal_r+0xd04>
    2708:	d8814717 	ldw	r2,1308(sp)
    270c:	143fffc4 	addi	r16,r2,-1
    2710:	043e970e 	bge	zero,r16,2170 <___vfprintf_internal_r+0x7b4>
    2714:	00800404 	movi	r2,16
    2718:	1400180e 	bge	r2,r16,277c <___vfprintf_internal_r+0xdc0>
    271c:	1029883a 	mov	r20,r2
    2720:	07000074 	movhi	fp,1
    2724:	e735ff84 	addi	fp,fp,-10242
    2728:	054001c4 	movi	r21,7
    272c:	00000306 	br	273c <___vfprintf_internal_r+0xd80>
    2730:	9cc00204 	addi	r19,r19,8
    2734:	843ffc04 	addi	r16,r16,-16
    2738:	a400120e 	bge	r20,r16,2784 <___vfprintf_internal_r+0xdc8>
    273c:	94800404 	addi	r18,r18,16
    2740:	8c400044 	addi	r17,r17,1
    2744:	9f000015 	stw	fp,0(r19)
    2748:	9d000115 	stw	r20,4(r19)
    274c:	dc800e15 	stw	r18,56(sp)
    2750:	dc400d15 	stw	r17,52(sp)
    2754:	ac7ff60e 	bge	r21,r17,2730 <___vfprintf_internal_r+0xd74>
    2758:	d9014f17 	ldw	r4,1340(sp)
    275c:	b00b883a 	mov	r5,r22
    2760:	d9800c04 	addi	r6,sp,48
    2764:	00019640 	call	1964 <__sprint_r>
    2768:	103e4c1e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    276c:	dc800e17 	ldw	r18,56(sp)
    2770:	dc400d17 	ldw	r17,52(sp)
    2774:	dcc01904 	addi	r19,sp,100
    2778:	003fee06 	br	2734 <___vfprintf_internal_r+0xd78>
    277c:	07000074 	movhi	fp,1
    2780:	e735ff84 	addi	fp,fp,-10242
    2784:	9425883a 	add	r18,r18,r16
    2788:	8c400044 	addi	r17,r17,1
    278c:	008001c4 	movi	r2,7
    2790:	9f000015 	stw	fp,0(r19)
    2794:	9c000115 	stw	r16,4(r19)
    2798:	dc800e15 	stw	r18,56(sp)
    279c:	dc400d15 	stw	r17,52(sp)
    27a0:	147e720e 	bge	r2,r17,216c <___vfprintf_internal_r+0x7b0>
    27a4:	d9014f17 	ldw	r4,1340(sp)
    27a8:	b00b883a 	mov	r5,r22
    27ac:	d9800c04 	addi	r6,sp,48
    27b0:	00019640 	call	1964 <__sprint_r>
    27b4:	103e391e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    27b8:	dc800e17 	ldw	r18,56(sp)
    27bc:	dc400d17 	ldw	r17,52(sp)
    27c0:	dcc01904 	addi	r19,sp,100
    27c4:	003e6a06 	br	2170 <___vfprintf_internal_r+0x7b4>
    27c8:	d9014f17 	ldw	r4,1340(sp)
    27cc:	b00b883a 	mov	r5,r22
    27d0:	d9800c04 	addi	r6,sp,48
    27d4:	d9c15115 	stw	r7,1348(sp)
    27d8:	00019640 	call	1964 <__sprint_r>
    27dc:	d9c15117 	ldw	r7,1348(sp)
    27e0:	103e2e1e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    27e4:	dc800e17 	ldw	r18,56(sp)
    27e8:	dc400d17 	ldw	r17,52(sp)
    27ec:	dd401904 	addi	r21,sp,100
    27f0:	003dba06 	br	1edc <___vfprintf_internal_r+0x520>
    27f4:	d9014f17 	ldw	r4,1340(sp)
    27f8:	b00b883a 	mov	r5,r22
    27fc:	d9800c04 	addi	r6,sp,48
    2800:	00019640 	call	1964 <__sprint_r>
    2804:	103e251e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    2808:	dc800e17 	ldw	r18,56(sp)
    280c:	dc400d17 	ldw	r17,52(sp)
    2810:	dcc01904 	addi	r19,sp,100
    2814:	003e4206 	br	2120 <___vfprintf_internal_r+0x764>
    2818:	d9014f17 	ldw	r4,1340(sp)
    281c:	b00b883a 	mov	r5,r22
    2820:	d9800c04 	addi	r6,sp,48
    2824:	00019640 	call	1964 <__sprint_r>
    2828:	103e1c1e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    282c:	dc800e17 	ldw	r18,56(sp)
    2830:	dc400d17 	ldw	r17,52(sp)
    2834:	d8c01904 	addi	r3,sp,100
    2838:	003e2e06 	br	20f4 <___vfprintf_internal_r+0x738>
    283c:	d9414c17 	ldw	r5,1328(sp)
    2840:	2880004c 	andi	r2,r5,1
    2844:	1005003a 	cmpeq	r2,r2,zero
    2848:	103dda1e 	bne	r2,zero,1fb4 <___vfprintf_internal_r+0x5f8>
    284c:	003e9f06 	br	22cc <___vfprintf_internal_r+0x910>
    2850:	d8c14117 	ldw	r3,1284(sp)
    2854:	9125883a 	add	r18,r18,r4
    2858:	8c400044 	addi	r17,r17,1
    285c:	008001c4 	movi	r2,7
    2860:	a8c00015 	stw	r3,0(r21)
    2864:	a9000115 	stw	r4,4(r21)
    2868:	dc800e15 	stw	r18,56(sp)
    286c:	dc400d15 	stw	r17,52(sp)
    2870:	14426616 	blt	r2,r17,320c <___vfprintf_internal_r+0x1850>
    2874:	a8c00204 	addi	r3,r21,8
    2878:	d9414917 	ldw	r5,1316(sp)
    287c:	00800044 	movi	r2,1
    2880:	94800044 	addi	r18,r18,1
    2884:	8c400044 	addi	r17,r17,1
    2888:	18800115 	stw	r2,4(r3)
    288c:	008001c4 	movi	r2,7
    2890:	19400015 	stw	r5,0(r3)
    2894:	dc800e15 	stw	r18,56(sp)
    2898:	dc400d15 	stw	r17,52(sp)
    289c:	2021883a 	mov	r16,r4
    28a0:	14425016 	blt	r2,r17,31e4 <___vfprintf_internal_r+0x1828>
    28a4:	19400204 	addi	r5,r3,8
    28a8:	d9814717 	ldw	r6,1308(sp)
    28ac:	8c400044 	addi	r17,r17,1
    28b0:	dc400d15 	stw	r17,52(sp)
    28b4:	3107c83a 	sub	r3,r6,r4
    28b8:	d9014117 	ldw	r4,1284(sp)
    28bc:	90e5883a 	add	r18,r18,r3
    28c0:	28c00115 	stw	r3,4(r5)
    28c4:	8105883a 	add	r2,r16,r4
    28c8:	28800015 	stw	r2,0(r5)
    28cc:	008001c4 	movi	r2,7
    28d0:	dc800e15 	stw	r18,56(sp)
    28d4:	147f1d16 	blt	r2,r17,254c <___vfprintf_internal_r+0xb90>
    28d8:	28c00204 	addi	r3,r5,8
    28dc:	003db506 	br	1fb4 <___vfprintf_internal_r+0x5f8>
    28e0:	3c000017 	ldw	r16,0(r7)
    28e4:	3c400117 	ldw	r17,4(r7)
    28e8:	39800204 	addi	r6,r7,8
    28ec:	01000044 	movi	r4,1
    28f0:	d9814015 	stw	r6,1280(sp)
    28f4:	d8000405 	stb	zero,16(sp)
    28f8:	003ebe06 	br	23f4 <___vfprintf_internal_r+0xa38>
    28fc:	3c000017 	ldw	r16,0(r7)
    2900:	3c400117 	ldw	r17,4(r7)
    2904:	38800204 	addi	r2,r7,8
    2908:	d8814015 	stw	r2,1280(sp)
    290c:	003eb706 	br	23ec <___vfprintf_internal_r+0xa30>
    2910:	3c000017 	ldw	r16,0(r7)
    2914:	3c400117 	ldw	r17,4(r7)
    2918:	39000204 	addi	r4,r7,8
    291c:	d9014015 	stw	r4,1280(sp)
    2920:	0009883a 	mov	r4,zero
    2924:	d8000405 	stb	zero,16(sp)
    2928:	003eb206 	br	23f4 <___vfprintf_internal_r+0xa38>
    292c:	38c00017 	ldw	r3,0(r7)
    2930:	39c00104 	addi	r7,r7,4
    2934:	d8c14a15 	stw	r3,1320(sp)
    2938:	1800d10e 	bge	r3,zero,2c80 <___vfprintf_internal_r+0x12c4>
    293c:	00c7c83a 	sub	r3,zero,r3
    2940:	d8c14a15 	stw	r3,1320(sp)
    2944:	d9014c17 	ldw	r4,1328(sp)
    2948:	b8c00007 	ldb	r3,0(r23)
    294c:	21000114 	ori	r4,r4,4
    2950:	d9014c15 	stw	r4,1328(sp)
    2954:	003c9806 	br	1bb8 <___vfprintf_internal_r+0x1fc>
    2958:	d9814c17 	ldw	r6,1328(sp)
    295c:	3080080c 	andi	r2,r6,32
    2960:	1001f026 	beq	r2,zero,3124 <___vfprintf_internal_r+0x1768>
    2964:	d9014b17 	ldw	r4,1324(sp)
    2968:	38800017 	ldw	r2,0(r7)
    296c:	39c00104 	addi	r7,r7,4
    2970:	d9c14015 	stw	r7,1280(sp)
    2974:	2007d7fa 	srai	r3,r4,31
    2978:	d9c14017 	ldw	r7,1280(sp)
    297c:	11000015 	stw	r4,0(r2)
    2980:	10c00115 	stw	r3,4(r2)
    2984:	003c6906 	br	1b2c <___vfprintf_internal_r+0x170>
    2988:	b8c00007 	ldb	r3,0(r23)
    298c:	00801b04 	movi	r2,108
    2990:	18824f26 	beq	r3,r2,32d0 <___vfprintf_internal_r+0x1914>
    2994:	d9414c17 	ldw	r5,1328(sp)
    2998:	29400414 	ori	r5,r5,16
    299c:	d9414c15 	stw	r5,1328(sp)
    29a0:	003c8506 	br	1bb8 <___vfprintf_internal_r+0x1fc>
    29a4:	d9814c17 	ldw	r6,1328(sp)
    29a8:	b8c00007 	ldb	r3,0(r23)
    29ac:	31800814 	ori	r6,r6,32
    29b0:	d9814c15 	stw	r6,1328(sp)
    29b4:	003c8006 	br	1bb8 <___vfprintf_internal_r+0x1fc>
    29b8:	d8814c17 	ldw	r2,1328(sp)
    29bc:	3c000017 	ldw	r16,0(r7)
    29c0:	00c01e04 	movi	r3,120
    29c4:	10800094 	ori	r2,r2,2
    29c8:	d8814c15 	stw	r2,1328(sp)
    29cc:	39c00104 	addi	r7,r7,4
    29d0:	01400074 	movhi	r5,1
    29d4:	2975e804 	addi	r5,r5,-10336
    29d8:	00800c04 	movi	r2,48
    29dc:	0023883a 	mov	r17,zero
    29e0:	01000084 	movi	r4,2
    29e4:	d9c14015 	stw	r7,1280(sp)
    29e8:	d8c14d15 	stw	r3,1332(sp)
    29ec:	d9414415 	stw	r5,1296(sp)
    29f0:	d8800445 	stb	r2,17(sp)
    29f4:	d8c00485 	stb	r3,18(sp)
    29f8:	d8000405 	stb	zero,16(sp)
    29fc:	003e7d06 	br	23f4 <___vfprintf_internal_r+0xa38>
    2a00:	d8814c17 	ldw	r2,1328(sp)
    2a04:	b8c00007 	ldb	r3,0(r23)
    2a08:	10801014 	ori	r2,r2,64
    2a0c:	d8814c15 	stw	r2,1328(sp)
    2a10:	003c6906 	br	1bb8 <___vfprintf_internal_r+0x1fc>
    2a14:	d9414c17 	ldw	r5,1328(sp)
    2a18:	2880020c 	andi	r2,r5,8
    2a1c:	1001df26 	beq	r2,zero,319c <___vfprintf_internal_r+0x17e0>
    2a20:	39800017 	ldw	r6,0(r7)
    2a24:	38800204 	addi	r2,r7,8
    2a28:	d8814015 	stw	r2,1280(sp)
    2a2c:	d9814215 	stw	r6,1288(sp)
    2a30:	39c00117 	ldw	r7,4(r7)
    2a34:	d9c14315 	stw	r7,1292(sp)
    2a38:	d9014217 	ldw	r4,1288(sp)
    2a3c:	d9414317 	ldw	r5,1292(sp)
    2a40:	0007fbc0 	call	7fbc <__isinfd>
    2a44:	10021726 	beq	r2,zero,32a4 <___vfprintf_internal_r+0x18e8>
    2a48:	d9014217 	ldw	r4,1288(sp)
    2a4c:	d9414317 	ldw	r5,1292(sp)
    2a50:	000d883a 	mov	r6,zero
    2a54:	000f883a 	mov	r7,zero
    2a58:	000a0e00 	call	a0e0 <__ltdf2>
    2a5c:	1002ca16 	blt	r2,zero,3588 <___vfprintf_internal_r+0x1bcc>
    2a60:	d9414d17 	ldw	r5,1332(sp)
    2a64:	008011c4 	movi	r2,71
    2a68:	11420a16 	blt	r2,r5,3294 <___vfprintf_internal_r+0x18d8>
    2a6c:	01800074 	movhi	r6,1
    2a70:	31b5ed04 	addi	r6,r6,-10316
    2a74:	d9814115 	stw	r6,1284(sp)
    2a78:	d9014c17 	ldw	r4,1328(sp)
    2a7c:	00c000c4 	movi	r3,3
    2a80:	00bfdfc4 	movi	r2,-129
    2a84:	2088703a 	and	r4,r4,r2
    2a88:	180f883a 	mov	r7,r3
    2a8c:	d8c14515 	stw	r3,1300(sp)
    2a90:	d9014c15 	stw	r4,1328(sp)
    2a94:	d8014615 	stw	zero,1304(sp)
    2a98:	003e6a06 	br	2444 <___vfprintf_internal_r+0xa88>
    2a9c:	38800017 	ldw	r2,0(r7)
    2aa0:	00c00044 	movi	r3,1
    2aa4:	39c00104 	addi	r7,r7,4
    2aa8:	d9c14015 	stw	r7,1280(sp)
    2aac:	d9000f04 	addi	r4,sp,60
    2ab0:	180f883a 	mov	r7,r3
    2ab4:	d8c14515 	stw	r3,1300(sp)
    2ab8:	d9014115 	stw	r4,1284(sp)
    2abc:	d8800f05 	stb	r2,60(sp)
    2ac0:	d8000405 	stb	zero,16(sp)
    2ac4:	003cac06 	br	1d78 <___vfprintf_internal_r+0x3bc>
    2ac8:	01400074 	movhi	r5,1
    2acc:	2975f304 	addi	r5,r5,-10292
    2ad0:	d9414415 	stw	r5,1296(sp)
    2ad4:	d9814c17 	ldw	r6,1328(sp)
    2ad8:	3080080c 	andi	r2,r6,32
    2adc:	1000f926 	beq	r2,zero,2ec4 <___vfprintf_internal_r+0x1508>
    2ae0:	3c000017 	ldw	r16,0(r7)
    2ae4:	3c400117 	ldw	r17,4(r7)
    2ae8:	38800204 	addi	r2,r7,8
    2aec:	d8814015 	stw	r2,1280(sp)
    2af0:	d9414c17 	ldw	r5,1328(sp)
    2af4:	2880004c 	andi	r2,r5,1
    2af8:	1005003a 	cmpeq	r2,r2,zero
    2afc:	1000b31e 	bne	r2,zero,2dcc <___vfprintf_internal_r+0x1410>
    2b00:	8444b03a 	or	r2,r16,r17
    2b04:	1000b126 	beq	r2,zero,2dcc <___vfprintf_internal_r+0x1410>
    2b08:	d9814d17 	ldw	r6,1332(sp)
    2b0c:	29400094 	ori	r5,r5,2
    2b10:	00800c04 	movi	r2,48
    2b14:	01000084 	movi	r4,2
    2b18:	d9414c15 	stw	r5,1328(sp)
    2b1c:	d8800445 	stb	r2,17(sp)
    2b20:	d9800485 	stb	r6,18(sp)
    2b24:	d8000405 	stb	zero,16(sp)
    2b28:	003e3206 	br	23f4 <___vfprintf_internal_r+0xa38>
    2b2c:	01800074 	movhi	r6,1
    2b30:	31b5e804 	addi	r6,r6,-10336
    2b34:	d9814415 	stw	r6,1296(sp)
    2b38:	003fe606 	br	2ad4 <___vfprintf_internal_r+0x1118>
    2b3c:	00800ac4 	movi	r2,43
    2b40:	d8800405 	stb	r2,16(sp)
    2b44:	b8c00007 	ldb	r3,0(r23)
    2b48:	003c1b06 	br	1bb8 <___vfprintf_internal_r+0x1fc>
    2b4c:	d8814c17 	ldw	r2,1328(sp)
    2b50:	b8c00007 	ldb	r3,0(r23)
    2b54:	10800054 	ori	r2,r2,1
    2b58:	d8814c15 	stw	r2,1328(sp)
    2b5c:	003c1606 	br	1bb8 <___vfprintf_internal_r+0x1fc>
    2b60:	d8800407 	ldb	r2,16(sp)
    2b64:	1000461e 	bne	r2,zero,2c80 <___vfprintf_internal_r+0x12c4>
    2b68:	00800804 	movi	r2,32
    2b6c:	d8800405 	stb	r2,16(sp)
    2b70:	b8c00007 	ldb	r3,0(r23)
    2b74:	003c1006 	br	1bb8 <___vfprintf_internal_r+0x1fc>
    2b78:	d9814c17 	ldw	r6,1328(sp)
    2b7c:	b8c00007 	ldb	r3,0(r23)
    2b80:	31800214 	ori	r6,r6,8
    2b84:	d9814c15 	stw	r6,1328(sp)
    2b88:	003c0b06 	br	1bb8 <___vfprintf_internal_r+0x1fc>
    2b8c:	0007883a 	mov	r3,zero
    2b90:	01000244 	movi	r4,9
    2b94:	188002a4 	muli	r2,r3,10
    2b98:	b8c00007 	ldb	r3,0(r23)
    2b9c:	d9814d17 	ldw	r6,1332(sp)
    2ba0:	bdc00044 	addi	r23,r23,1
    2ba4:	d8c14d15 	stw	r3,1332(sp)
    2ba8:	d9414d17 	ldw	r5,1332(sp)
    2bac:	3085883a 	add	r2,r6,r2
    2bb0:	10fff404 	addi	r3,r2,-48
    2bb4:	28bff404 	addi	r2,r5,-48
    2bb8:	20bff62e 	bgeu	r4,r2,2b94 <___vfprintf_internal_r+0x11d8>
    2bbc:	d8c14a15 	stw	r3,1320(sp)
    2bc0:	003bff06 	br	1bc0 <___vfprintf_internal_r+0x204>
    2bc4:	d9414c17 	ldw	r5,1328(sp)
    2bc8:	b8c00007 	ldb	r3,0(r23)
    2bcc:	29402014 	ori	r5,r5,128
    2bd0:	d9414c15 	stw	r5,1328(sp)
    2bd4:	003bf806 	br	1bb8 <___vfprintf_internal_r+0x1fc>
    2bd8:	b8c00007 	ldb	r3,0(r23)
    2bdc:	00800a84 	movi	r2,42
    2be0:	bdc00044 	addi	r23,r23,1
    2be4:	18831526 	beq	r3,r2,383c <___vfprintf_internal_r+0x1e80>
    2be8:	d8c14d15 	stw	r3,1332(sp)
    2bec:	18bff404 	addi	r2,r3,-48
    2bf0:	00c00244 	movi	r3,9
    2bf4:	18827836 	bltu	r3,r2,35d8 <___vfprintf_internal_r+0x1c1c>
    2bf8:	000d883a 	mov	r6,zero
    2bfc:	308002a4 	muli	r2,r6,10
    2c00:	b9800007 	ldb	r6,0(r23)
    2c04:	d9414d17 	ldw	r5,1332(sp)
    2c08:	bdc00044 	addi	r23,r23,1
    2c0c:	d9814d15 	stw	r6,1332(sp)
    2c10:	d9014d17 	ldw	r4,1332(sp)
    2c14:	1145883a 	add	r2,r2,r5
    2c18:	11bff404 	addi	r6,r2,-48
    2c1c:	20bff404 	addi	r2,r4,-48
    2c20:	18bff62e 	bgeu	r3,r2,2bfc <___vfprintf_internal_r+0x1240>
    2c24:	3027883a 	mov	r19,r6
    2c28:	303be50e 	bge	r6,zero,1bc0 <___vfprintf_internal_r+0x204>
    2c2c:	04ffffc4 	movi	r19,-1
    2c30:	003be306 	br	1bc0 <___vfprintf_internal_r+0x204>
    2c34:	d8000405 	stb	zero,16(sp)
    2c38:	39800017 	ldw	r6,0(r7)
    2c3c:	39c00104 	addi	r7,r7,4
    2c40:	d9c14015 	stw	r7,1280(sp)
    2c44:	d9814115 	stw	r6,1284(sp)
    2c48:	3001c926 	beq	r6,zero,3370 <___vfprintf_internal_r+0x19b4>
    2c4c:	98000e16 	blt	r19,zero,2c88 <___vfprintf_internal_r+0x12cc>
    2c50:	d9014117 	ldw	r4,1284(sp)
    2c54:	000b883a 	mov	r5,zero
    2c58:	980d883a 	mov	r6,r19
    2c5c:	00064ec0 	call	64ec <memchr>
    2c60:	10025926 	beq	r2,zero,35c8 <___vfprintf_internal_r+0x1c0c>
    2c64:	d8c14117 	ldw	r3,1284(sp)
    2c68:	10cfc83a 	sub	r7,r2,r3
    2c6c:	99c19e16 	blt	r19,r7,32e8 <___vfprintf_internal_r+0x192c>
    2c70:	d9c14515 	stw	r7,1300(sp)
    2c74:	38000916 	blt	r7,zero,2c9c <___vfprintf_internal_r+0x12e0>
    2c78:	d8014615 	stw	zero,1304(sp)
    2c7c:	003df106 	br	2444 <___vfprintf_internal_r+0xa88>
    2c80:	b8c00007 	ldb	r3,0(r23)
    2c84:	003bcc06 	br	1bb8 <___vfprintf_internal_r+0x1fc>
    2c88:	d9014117 	ldw	r4,1284(sp)
    2c8c:	00018f00 	call	18f0 <strlen>
    2c90:	d8814515 	stw	r2,1300(sp)
    2c94:	100f883a 	mov	r7,r2
    2c98:	103ff70e 	bge	r2,zero,2c78 <___vfprintf_internal_r+0x12bc>
    2c9c:	d8014515 	stw	zero,1300(sp)
    2ca0:	d8014615 	stw	zero,1304(sp)
    2ca4:	003de706 	br	2444 <___vfprintf_internal_r+0xa88>
    2ca8:	20c03fcc 	andi	r3,r4,255
    2cac:	00800044 	movi	r2,1
    2cb0:	18802d26 	beq	r3,r2,2d68 <___vfprintf_internal_r+0x13ac>
    2cb4:	18800e36 	bltu	r3,r2,2cf0 <___vfprintf_internal_r+0x1334>
    2cb8:	00800084 	movi	r2,2
    2cbc:	1880fa26 	beq	r3,r2,30a8 <___vfprintf_internal_r+0x16ec>
    2cc0:	01000074 	movhi	r4,1
    2cc4:	2135f804 	addi	r4,r4,-10272
    2cc8:	00018f00 	call	18f0 <strlen>
    2ccc:	100f883a 	mov	r7,r2
    2cd0:	dcc14515 	stw	r19,1300(sp)
    2cd4:	9880010e 	bge	r19,r2,2cdc <___vfprintf_internal_r+0x1320>
    2cd8:	d8814515 	stw	r2,1300(sp)
    2cdc:	00800074 	movhi	r2,1
    2ce0:	10b5f804 	addi	r2,r2,-10272
    2ce4:	dcc14615 	stw	r19,1304(sp)
    2ce8:	d8814115 	stw	r2,1284(sp)
    2cec:	003dd506 	br	2444 <___vfprintf_internal_r+0xa88>
    2cf0:	d9401904 	addi	r5,sp,100
    2cf4:	dd000f04 	addi	r20,sp,60
    2cf8:	d9414115 	stw	r5,1284(sp)
    2cfc:	880a977a 	slli	r5,r17,29
    2d00:	d9814117 	ldw	r6,1284(sp)
    2d04:	8004d0fa 	srli	r2,r16,3
    2d08:	8806d0fa 	srli	r3,r17,3
    2d0c:	810001cc 	andi	r4,r16,7
    2d10:	2884b03a 	or	r2,r5,r2
    2d14:	31bfffc4 	addi	r6,r6,-1
    2d18:	21000c04 	addi	r4,r4,48
    2d1c:	d9814115 	stw	r6,1284(sp)
    2d20:	10cab03a 	or	r5,r2,r3
    2d24:	31000005 	stb	r4,0(r6)
    2d28:	1021883a 	mov	r16,r2
    2d2c:	1823883a 	mov	r17,r3
    2d30:	283ff21e 	bne	r5,zero,2cfc <___vfprintf_internal_r+0x1340>
    2d34:	d8c14c17 	ldw	r3,1328(sp)
    2d38:	1880004c 	andi	r2,r3,1
    2d3c:	1005003a 	cmpeq	r2,r2,zero
    2d40:	103db91e 	bne	r2,zero,2428 <___vfprintf_internal_r+0xa6c>
    2d44:	20803fcc 	andi	r2,r4,255
    2d48:	1080201c 	xori	r2,r2,128
    2d4c:	10bfe004 	addi	r2,r2,-128
    2d50:	00c00c04 	movi	r3,48
    2d54:	10fdb426 	beq	r2,r3,2428 <___vfprintf_internal_r+0xa6c>
    2d58:	31bfffc4 	addi	r6,r6,-1
    2d5c:	d9814115 	stw	r6,1284(sp)
    2d60:	30c00005 	stb	r3,0(r6)
    2d64:	003db006 	br	2428 <___vfprintf_internal_r+0xa6c>
    2d68:	88800068 	cmpgeui	r2,r17,1
    2d6c:	10002c1e 	bne	r2,zero,2e20 <___vfprintf_internal_r+0x1464>
    2d70:	8800021e 	bne	r17,zero,2d7c <___vfprintf_internal_r+0x13c0>
    2d74:	00800244 	movi	r2,9
    2d78:	14002936 	bltu	r2,r16,2e20 <___vfprintf_internal_r+0x1464>
    2d7c:	d90018c4 	addi	r4,sp,99
    2d80:	dd000f04 	addi	r20,sp,60
    2d84:	d9014115 	stw	r4,1284(sp)
    2d88:	d9014117 	ldw	r4,1284(sp)
    2d8c:	80800c04 	addi	r2,r16,48
    2d90:	20800005 	stb	r2,0(r4)
    2d94:	003da406 	br	2428 <___vfprintf_internal_r+0xa6c>
    2d98:	dc400d17 	ldw	r17,52(sp)
    2d9c:	07000074 	movhi	fp,1
    2da0:	e735ff84 	addi	fp,fp,-10242
    2da4:	9425883a 	add	r18,r18,r16
    2da8:	8c400044 	addi	r17,r17,1
    2dac:	008001c4 	movi	r2,7
    2db0:	1f000015 	stw	fp,0(r3)
    2db4:	1c000115 	stw	r16,4(r3)
    2db8:	dc800e15 	stw	r18,56(sp)
    2dbc:	dc400d15 	stw	r17,52(sp)
    2dc0:	147de216 	blt	r2,r17,254c <___vfprintf_internal_r+0xb90>
    2dc4:	18c00204 	addi	r3,r3,8
    2dc8:	003c7a06 	br	1fb4 <___vfprintf_internal_r+0x5f8>
    2dcc:	01000084 	movi	r4,2
    2dd0:	d8000405 	stb	zero,16(sp)
    2dd4:	003d8706 	br	23f4 <___vfprintf_internal_r+0xa38>
    2dd8:	d9814c17 	ldw	r6,1328(sp)
    2ddc:	30c4703a 	and	r2,r6,r3
    2de0:	1005003a 	cmpeq	r2,r2,zero
    2de4:	103cb926 	beq	r2,zero,20cc <___vfprintf_internal_r+0x710>
    2de8:	d9014117 	ldw	r4,1284(sp)
    2dec:	94800044 	addi	r18,r18,1
    2df0:	8c400044 	addi	r17,r17,1
    2df4:	008001c4 	movi	r2,7
    2df8:	a9000015 	stw	r4,0(r21)
    2dfc:	a8c00115 	stw	r3,4(r21)
    2e00:	dc800e15 	stw	r18,56(sp)
    2e04:	dc400d15 	stw	r17,52(sp)
    2e08:	147e6616 	blt	r2,r17,27a4 <___vfprintf_internal_r+0xde8>
    2e0c:	acc00204 	addi	r19,r21,8
    2e10:	003cd706 	br	2170 <___vfprintf_internal_r+0x7b4>
    2e14:	07000074 	movhi	fp,1
    2e18:	e735ff84 	addi	fp,fp,-10242
    2e1c:	003c4f06 	br	1f5c <___vfprintf_internal_r+0x5a0>
    2e20:	dd000f04 	addi	r20,sp,60
    2e24:	dc801904 	addi	r18,sp,100
    2e28:	8009883a 	mov	r4,r16
    2e2c:	880b883a 	mov	r5,r17
    2e30:	01800284 	movi	r6,10
    2e34:	000f883a 	mov	r7,zero
    2e38:	0008df00 	call	8df0 <__umoddi3>
    2e3c:	12000c04 	addi	r8,r2,48
    2e40:	94bfffc4 	addi	r18,r18,-1
    2e44:	8009883a 	mov	r4,r16
    2e48:	880b883a 	mov	r5,r17
    2e4c:	01800284 	movi	r6,10
    2e50:	000f883a 	mov	r7,zero
    2e54:	92000005 	stb	r8,0(r18)
    2e58:	00088140 	call	8814 <__udivdi3>
    2e5c:	1009883a 	mov	r4,r2
    2e60:	1021883a 	mov	r16,r2
    2e64:	18800068 	cmpgeui	r2,r3,1
    2e68:	1823883a 	mov	r17,r3
    2e6c:	103fee1e 	bne	r2,zero,2e28 <___vfprintf_internal_r+0x146c>
    2e70:	1800021e 	bne	r3,zero,2e7c <___vfprintf_internal_r+0x14c0>
    2e74:	00800244 	movi	r2,9
    2e78:	113feb36 	bltu	r2,r4,2e28 <___vfprintf_internal_r+0x146c>
    2e7c:	94bfffc4 	addi	r18,r18,-1
    2e80:	dc814115 	stw	r18,1284(sp)
    2e84:	003fc006 	br	2d88 <___vfprintf_internal_r+0x13cc>
    2e88:	d9014c17 	ldw	r4,1328(sp)
    2e8c:	2080004c 	andi	r2,r4,1
    2e90:	10009a1e 	bne	r2,zero,30fc <___vfprintf_internal_r+0x1740>
    2e94:	d9401904 	addi	r5,sp,100
    2e98:	dd000f04 	addi	r20,sp,60
    2e9c:	d9414115 	stw	r5,1284(sp)
    2ea0:	003d6106 	br	2428 <___vfprintf_internal_r+0xa6c>
    2ea4:	d9014f17 	ldw	r4,1340(sp)
    2ea8:	b00b883a 	mov	r5,r22
    2eac:	d9800c04 	addi	r6,sp,48
    2eb0:	00019640 	call	1964 <__sprint_r>
    2eb4:	103c791e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    2eb8:	dc800e17 	ldw	r18,56(sp)
    2ebc:	d8c01904 	addi	r3,sp,100
    2ec0:	003cff06 	br	22c0 <___vfprintf_internal_r+0x904>
    2ec4:	d8c14c17 	ldw	r3,1328(sp)
    2ec8:	1880040c 	andi	r2,r3,16
    2ecc:	1000711e 	bne	r2,zero,3094 <___vfprintf_internal_r+0x16d8>
    2ed0:	d9014c17 	ldw	r4,1328(sp)
    2ed4:	2080100c 	andi	r2,r4,64
    2ed8:	10006e26 	beq	r2,zero,3094 <___vfprintf_internal_r+0x16d8>
    2edc:	3c00000b 	ldhu	r16,0(r7)
    2ee0:	0023883a 	mov	r17,zero
    2ee4:	39c00104 	addi	r7,r7,4
    2ee8:	d9c14015 	stw	r7,1280(sp)
    2eec:	003f0006 	br	2af0 <___vfprintf_internal_r+0x1134>
    2ef0:	dc400d17 	ldw	r17,52(sp)
    2ef4:	07000074 	movhi	fp,1
    2ef8:	e735ff84 	addi	fp,fp,-10242
    2efc:	9425883a 	add	r18,r18,r16
    2f00:	8c400044 	addi	r17,r17,1
    2f04:	008001c4 	movi	r2,7
    2f08:	1f000015 	stw	fp,0(r3)
    2f0c:	1c000115 	stw	r16,4(r3)
    2f10:	dc800e15 	stw	r18,56(sp)
    2f14:	dc400d15 	stw	r17,52(sp)
    2f18:	147d7616 	blt	r2,r17,24f4 <___vfprintf_internal_r+0xb38>
    2f1c:	18c00204 	addi	r3,r3,8
    2f20:	003d7b06 	br	2510 <___vfprintf_internal_r+0xb54>
    2f24:	dc800e17 	ldw	r18,56(sp)
    2f28:	dc400d17 	ldw	r17,52(sp)
    2f2c:	07000074 	movhi	fp,1
    2f30:	e7360384 	addi	fp,fp,-10226
    2f34:	003bc006 	br	1e38 <___vfprintf_internal_r+0x47c>
    2f38:	d9014f17 	ldw	r4,1340(sp)
    2f3c:	b00b883a 	mov	r5,r22
    2f40:	d9800c04 	addi	r6,sp,48
    2f44:	00019640 	call	1964 <__sprint_r>
    2f48:	103c541e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    2f4c:	dc800e17 	ldw	r18,56(sp)
    2f50:	d8c01904 	addi	r3,sp,100
    2f54:	003ce906 	br	22fc <___vfprintf_internal_r+0x940>
    2f58:	3c000017 	ldw	r16,0(r7)
    2f5c:	0009883a 	mov	r4,zero
    2f60:	39c00104 	addi	r7,r7,4
    2f64:	0023883a 	mov	r17,zero
    2f68:	d9c14015 	stw	r7,1280(sp)
    2f6c:	d8000405 	stb	zero,16(sp)
    2f70:	003d2006 	br	23f4 <___vfprintf_internal_r+0xa38>
    2f74:	38800017 	ldw	r2,0(r7)
    2f78:	39c00104 	addi	r7,r7,4
    2f7c:	d9c14015 	stw	r7,1280(sp)
    2f80:	1023d7fa 	srai	r17,r2,31
    2f84:	1021883a 	mov	r16,r2
    2f88:	003d1806 	br	23ec <___vfprintf_internal_r+0xa30>
    2f8c:	3c000017 	ldw	r16,0(r7)
    2f90:	01000044 	movi	r4,1
    2f94:	39c00104 	addi	r7,r7,4
    2f98:	0023883a 	mov	r17,zero
    2f9c:	d9c14015 	stw	r7,1280(sp)
    2fa0:	d8000405 	stb	zero,16(sp)
    2fa4:	003d1306 	br	23f4 <___vfprintf_internal_r+0xa38>
    2fa8:	00800074 	movhi	r2,1
    2fac:	10b5ff04 	addi	r2,r2,-10244
    2fb0:	94800044 	addi	r18,r18,1
    2fb4:	8c400044 	addi	r17,r17,1
    2fb8:	a8800015 	stw	r2,0(r21)
    2fbc:	00c00044 	movi	r3,1
    2fc0:	008001c4 	movi	r2,7
    2fc4:	a8c00115 	stw	r3,4(r21)
    2fc8:	dc800e15 	stw	r18,56(sp)
    2fcc:	dc400d15 	stw	r17,52(sp)
    2fd0:	1440ca16 	blt	r2,r17,32fc <___vfprintf_internal_r+0x1940>
    2fd4:	a8c00204 	addi	r3,r21,8
    2fd8:	2000061e 	bne	r4,zero,2ff4 <___vfprintf_internal_r+0x1638>
    2fdc:	d9414717 	ldw	r5,1308(sp)
    2fe0:	2800041e 	bne	r5,zero,2ff4 <___vfprintf_internal_r+0x1638>
    2fe4:	d9814c17 	ldw	r6,1328(sp)
    2fe8:	3080004c 	andi	r2,r6,1
    2fec:	1005003a 	cmpeq	r2,r2,zero
    2ff0:	103bf01e 	bne	r2,zero,1fb4 <___vfprintf_internal_r+0x5f8>
    2ff4:	00800044 	movi	r2,1
    2ff8:	dc400d17 	ldw	r17,52(sp)
    2ffc:	18800115 	stw	r2,4(r3)
    3000:	d8814917 	ldw	r2,1316(sp)
    3004:	94800044 	addi	r18,r18,1
    3008:	8c400044 	addi	r17,r17,1
    300c:	18800015 	stw	r2,0(r3)
    3010:	008001c4 	movi	r2,7
    3014:	dc800e15 	stw	r18,56(sp)
    3018:	dc400d15 	stw	r17,52(sp)
    301c:	1440ca16 	blt	r2,r17,3348 <___vfprintf_internal_r+0x198c>
    3020:	18c00204 	addi	r3,r3,8
    3024:	0121c83a 	sub	r16,zero,r4
    3028:	0400500e 	bge	zero,r16,316c <___vfprintf_internal_r+0x17b0>
    302c:	00800404 	movi	r2,16
    3030:	1400800e 	bge	r2,r16,3234 <___vfprintf_internal_r+0x1878>
    3034:	1027883a 	mov	r19,r2
    3038:	07000074 	movhi	fp,1
    303c:	e735ff84 	addi	fp,fp,-10242
    3040:	050001c4 	movi	r20,7
    3044:	00000306 	br	3054 <___vfprintf_internal_r+0x1698>
    3048:	18c00204 	addi	r3,r3,8
    304c:	843ffc04 	addi	r16,r16,-16
    3050:	9c007a0e 	bge	r19,r16,323c <___vfprintf_internal_r+0x1880>
    3054:	94800404 	addi	r18,r18,16
    3058:	8c400044 	addi	r17,r17,1
    305c:	1f000015 	stw	fp,0(r3)
    3060:	1cc00115 	stw	r19,4(r3)
    3064:	dc800e15 	stw	r18,56(sp)
    3068:	dc400d15 	stw	r17,52(sp)
    306c:	a47ff60e 	bge	r20,r17,3048 <___vfprintf_internal_r+0x168c>
    3070:	d9014f17 	ldw	r4,1340(sp)
    3074:	b00b883a 	mov	r5,r22
    3078:	d9800c04 	addi	r6,sp,48
    307c:	00019640 	call	1964 <__sprint_r>
    3080:	103c061e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    3084:	dc800e17 	ldw	r18,56(sp)
    3088:	dc400d17 	ldw	r17,52(sp)
    308c:	d8c01904 	addi	r3,sp,100
    3090:	003fee06 	br	304c <___vfprintf_internal_r+0x1690>
    3094:	3c000017 	ldw	r16,0(r7)
    3098:	0023883a 	mov	r17,zero
    309c:	39c00104 	addi	r7,r7,4
    30a0:	d9c14015 	stw	r7,1280(sp)
    30a4:	003e9206 	br	2af0 <___vfprintf_internal_r+0x1134>
    30a8:	d9401904 	addi	r5,sp,100
    30ac:	dd000f04 	addi	r20,sp,60
    30b0:	d9414115 	stw	r5,1284(sp)
    30b4:	d9814417 	ldw	r6,1296(sp)
    30b8:	880a973a 	slli	r5,r17,28
    30bc:	8004d13a 	srli	r2,r16,4
    30c0:	810003cc 	andi	r4,r16,15
    30c4:	3109883a 	add	r4,r6,r4
    30c8:	2884b03a 	or	r2,r5,r2
    30cc:	21400003 	ldbu	r5,0(r4)
    30d0:	d9014117 	ldw	r4,1284(sp)
    30d4:	8806d13a 	srli	r3,r17,4
    30d8:	1021883a 	mov	r16,r2
    30dc:	213fffc4 	addi	r4,r4,-1
    30e0:	d9014115 	stw	r4,1284(sp)
    30e4:	d9814117 	ldw	r6,1284(sp)
    30e8:	10c8b03a 	or	r4,r2,r3
    30ec:	1823883a 	mov	r17,r3
    30f0:	31400005 	stb	r5,0(r6)
    30f4:	203fef1e 	bne	r4,zero,30b4 <___vfprintf_internal_r+0x16f8>
    30f8:	003ccb06 	br	2428 <___vfprintf_internal_r+0xa6c>
    30fc:	00800c04 	movi	r2,48
    3100:	d98018c4 	addi	r6,sp,99
    3104:	dd000f04 	addi	r20,sp,60
    3108:	d88018c5 	stb	r2,99(sp)
    310c:	d9814115 	stw	r6,1284(sp)
    3110:	003cc506 	br	2428 <___vfprintf_internal_r+0xa6c>
    3114:	dc400d17 	ldw	r17,52(sp)
    3118:	07000074 	movhi	fp,1
    311c:	e7360384 	addi	fp,fp,-10226
    3120:	003bc706 	br	2040 <___vfprintf_internal_r+0x684>
    3124:	d9414c17 	ldw	r5,1328(sp)
    3128:	2880040c 	andi	r2,r5,16
    312c:	10007c26 	beq	r2,zero,3320 <___vfprintf_internal_r+0x1964>
    3130:	38800017 	ldw	r2,0(r7)
    3134:	39c00104 	addi	r7,r7,4
    3138:	d9c14015 	stw	r7,1280(sp)
    313c:	d9814b17 	ldw	r6,1324(sp)
    3140:	d9c14017 	ldw	r7,1280(sp)
    3144:	11800015 	stw	r6,0(r2)
    3148:	003a7806 	br	1b2c <___vfprintf_internal_r+0x170>
    314c:	d9014f17 	ldw	r4,1340(sp)
    3150:	b00b883a 	mov	r5,r22
    3154:	d9800c04 	addi	r6,sp,48
    3158:	00019640 	call	1964 <__sprint_r>
    315c:	103bcf1e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    3160:	dc800e17 	ldw	r18,56(sp)
    3164:	dc400d17 	ldw	r17,52(sp)
    3168:	d8c01904 	addi	r3,sp,100
    316c:	d9014717 	ldw	r4,1308(sp)
    3170:	d9414117 	ldw	r5,1284(sp)
    3174:	8c400044 	addi	r17,r17,1
    3178:	9125883a 	add	r18,r18,r4
    317c:	008001c4 	movi	r2,7
    3180:	19400015 	stw	r5,0(r3)
    3184:	19000115 	stw	r4,4(r3)
    3188:	dc800e15 	stw	r18,56(sp)
    318c:	dc400d15 	stw	r17,52(sp)
    3190:	147cee16 	blt	r2,r17,254c <___vfprintf_internal_r+0xb90>
    3194:	18c00204 	addi	r3,r3,8
    3198:	003b8606 	br	1fb4 <___vfprintf_internal_r+0x5f8>
    319c:	38c00017 	ldw	r3,0(r7)
    31a0:	39000204 	addi	r4,r7,8
    31a4:	d9014015 	stw	r4,1280(sp)
    31a8:	d8c14215 	stw	r3,1288(sp)
    31ac:	39c00117 	ldw	r7,4(r7)
    31b0:	d9c14315 	stw	r7,1292(sp)
    31b4:	003e2006 	br	2a38 <___vfprintf_internal_r+0x107c>
    31b8:	0005883a 	mov	r2,zero
    31bc:	1409c83a 	sub	r4,r2,r16
    31c0:	1105803a 	cmpltu	r2,r2,r4
    31c4:	044bc83a 	sub	r5,zero,r17
    31c8:	2885c83a 	sub	r2,r5,r2
    31cc:	2021883a 	mov	r16,r4
    31d0:	1023883a 	mov	r17,r2
    31d4:	01000044 	movi	r4,1
    31d8:	00800b44 	movi	r2,45
    31dc:	d8800405 	stb	r2,16(sp)
    31e0:	003c8406 	br	23f4 <___vfprintf_internal_r+0xa38>
    31e4:	d9014f17 	ldw	r4,1340(sp)
    31e8:	b00b883a 	mov	r5,r22
    31ec:	d9800c04 	addi	r6,sp,48
    31f0:	00019640 	call	1964 <__sprint_r>
    31f4:	103ba91e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    31f8:	dc800e17 	ldw	r18,56(sp)
    31fc:	dc400d17 	ldw	r17,52(sp)
    3200:	d9000517 	ldw	r4,20(sp)
    3204:	d9401904 	addi	r5,sp,100
    3208:	003da706 	br	28a8 <___vfprintf_internal_r+0xeec>
    320c:	d9014f17 	ldw	r4,1340(sp)
    3210:	b00b883a 	mov	r5,r22
    3214:	d9800c04 	addi	r6,sp,48
    3218:	00019640 	call	1964 <__sprint_r>
    321c:	103b9f1e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    3220:	dc800e17 	ldw	r18,56(sp)
    3224:	dc400d17 	ldw	r17,52(sp)
    3228:	d9000517 	ldw	r4,20(sp)
    322c:	d8c01904 	addi	r3,sp,100
    3230:	003d9106 	br	2878 <___vfprintf_internal_r+0xebc>
    3234:	07000074 	movhi	fp,1
    3238:	e735ff84 	addi	fp,fp,-10242
    323c:	9425883a 	add	r18,r18,r16
    3240:	8c400044 	addi	r17,r17,1
    3244:	008001c4 	movi	r2,7
    3248:	1f000015 	stw	fp,0(r3)
    324c:	1c000115 	stw	r16,4(r3)
    3250:	dc800e15 	stw	r18,56(sp)
    3254:	dc400d15 	stw	r17,52(sp)
    3258:	147fbc16 	blt	r2,r17,314c <___vfprintf_internal_r+0x1790>
    325c:	18c00204 	addi	r3,r3,8
    3260:	003fc206 	br	316c <___vfprintf_internal_r+0x17b0>
    3264:	d9014f17 	ldw	r4,1340(sp)
    3268:	b00b883a 	mov	r5,r22
    326c:	d9800c04 	addi	r6,sp,48
    3270:	00019640 	call	1964 <__sprint_r>
    3274:	103b891e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    3278:	dc800e17 	ldw	r18,56(sp)
    327c:	d9000517 	ldw	r4,20(sp)
    3280:	d8c01904 	addi	r3,sp,100
    3284:	003d0206 	br	2690 <___vfprintf_internal_r+0xcd4>
    3288:	07000074 	movhi	fp,1
    328c:	e735ff84 	addi	fp,fp,-10242
    3290:	003be406 	br	2224 <___vfprintf_internal_r+0x868>
    3294:	00800074 	movhi	r2,1
    3298:	10b5ee04 	addi	r2,r2,-10312
    329c:	d8814115 	stw	r2,1284(sp)
    32a0:	003df506 	br	2a78 <___vfprintf_internal_r+0x10bc>
    32a4:	d9014217 	ldw	r4,1288(sp)
    32a8:	d9414317 	ldw	r5,1292(sp)
    32ac:	0007ffc0 	call	7ffc <__isnand>
    32b0:	10003926 	beq	r2,zero,3398 <___vfprintf_internal_r+0x19dc>
    32b4:	d9414d17 	ldw	r5,1332(sp)
    32b8:	008011c4 	movi	r2,71
    32bc:	1140ce16 	blt	r2,r5,35f8 <___vfprintf_internal_r+0x1c3c>
    32c0:	01800074 	movhi	r6,1
    32c4:	31b5ef04 	addi	r6,r6,-10308
    32c8:	d9814115 	stw	r6,1284(sp)
    32cc:	003dea06 	br	2a78 <___vfprintf_internal_r+0x10bc>
    32d0:	d9014c17 	ldw	r4,1328(sp)
    32d4:	bdc00044 	addi	r23,r23,1
    32d8:	b8c00007 	ldb	r3,0(r23)
    32dc:	21000814 	ori	r4,r4,32
    32e0:	d9014c15 	stw	r4,1328(sp)
    32e4:	003a3406 	br	1bb8 <___vfprintf_internal_r+0x1fc>
    32e8:	dcc14515 	stw	r19,1300(sp)
    32ec:	98011016 	blt	r19,zero,3730 <___vfprintf_internal_r+0x1d74>
    32f0:	980f883a 	mov	r7,r19
    32f4:	d8014615 	stw	zero,1304(sp)
    32f8:	003c5206 	br	2444 <___vfprintf_internal_r+0xa88>
    32fc:	d9014f17 	ldw	r4,1340(sp)
    3300:	b00b883a 	mov	r5,r22
    3304:	d9800c04 	addi	r6,sp,48
    3308:	00019640 	call	1964 <__sprint_r>
    330c:	103b631e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    3310:	dc800e17 	ldw	r18,56(sp)
    3314:	d9000517 	ldw	r4,20(sp)
    3318:	d8c01904 	addi	r3,sp,100
    331c:	003f2e06 	br	2fd8 <___vfprintf_internal_r+0x161c>
    3320:	d8c14c17 	ldw	r3,1328(sp)
    3324:	1880100c 	andi	r2,r3,64
    3328:	1000a026 	beq	r2,zero,35ac <___vfprintf_internal_r+0x1bf0>
    332c:	38800017 	ldw	r2,0(r7)
    3330:	39c00104 	addi	r7,r7,4
    3334:	d9c14015 	stw	r7,1280(sp)
    3338:	d9014b17 	ldw	r4,1324(sp)
    333c:	d9c14017 	ldw	r7,1280(sp)
    3340:	1100000d 	sth	r4,0(r2)
    3344:	0039f906 	br	1b2c <___vfprintf_internal_r+0x170>
    3348:	d9014f17 	ldw	r4,1340(sp)
    334c:	b00b883a 	mov	r5,r22
    3350:	d9800c04 	addi	r6,sp,48
    3354:	00019640 	call	1964 <__sprint_r>
    3358:	103b501e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    335c:	dc800e17 	ldw	r18,56(sp)
    3360:	dc400d17 	ldw	r17,52(sp)
    3364:	d9000517 	ldw	r4,20(sp)
    3368:	d8c01904 	addi	r3,sp,100
    336c:	003f2d06 	br	3024 <___vfprintf_internal_r+0x1668>
    3370:	00800184 	movi	r2,6
    3374:	14c09a36 	bltu	r2,r19,35e0 <___vfprintf_internal_r+0x1c24>
    3378:	dcc14515 	stw	r19,1300(sp)
    337c:	9800010e 	bge	r19,zero,3384 <___vfprintf_internal_r+0x19c8>
    3380:	d8014515 	stw	zero,1300(sp)
    3384:	00800074 	movhi	r2,1
    3388:	10b5f104 	addi	r2,r2,-10300
    338c:	980f883a 	mov	r7,r19
    3390:	d8814115 	stw	r2,1284(sp)
    3394:	003a7806 	br	1d78 <___vfprintf_internal_r+0x3bc>
    3398:	00bfffc4 	movi	r2,-1
    339c:	9880e226 	beq	r19,r2,3728 <___vfprintf_internal_r+0x1d6c>
    33a0:	d9414d17 	ldw	r5,1332(sp)
    33a4:	008019c4 	movi	r2,103
    33a8:	2880dc26 	beq	r5,r2,371c <___vfprintf_internal_r+0x1d60>
    33ac:	008011c4 	movi	r2,71
    33b0:	2880da26 	beq	r5,r2,371c <___vfprintf_internal_r+0x1d60>
    33b4:	d9414c17 	ldw	r5,1328(sp)
    33b8:	d9014317 	ldw	r4,1292(sp)
    33bc:	d9814217 	ldw	r6,1288(sp)
    33c0:	29404014 	ori	r5,r5,256
    33c4:	d9414c15 	stw	r5,1328(sp)
    33c8:	2000cc16 	blt	r4,zero,36fc <___vfprintf_internal_r+0x1d40>
    33cc:	3021883a 	mov	r16,r6
    33d0:	2023883a 	mov	r17,r4
    33d4:	0039883a 	mov	fp,zero
    33d8:	d9414d17 	ldw	r5,1332(sp)
    33dc:	00801984 	movi	r2,102
    33e0:	2880b726 	beq	r5,r2,36c0 <___vfprintf_internal_r+0x1d04>
    33e4:	00801184 	movi	r2,70
    33e8:	2880b526 	beq	r5,r2,36c0 <___vfprintf_internal_r+0x1d04>
    33ec:	00801944 	movi	r2,101
    33f0:	2880c826 	beq	r5,r2,3714 <___vfprintf_internal_r+0x1d58>
    33f4:	00801144 	movi	r2,69
    33f8:	2880c626 	beq	r5,r2,3714 <___vfprintf_internal_r+0x1d58>
    33fc:	9829883a 	mov	r20,r19
    3400:	d9014f17 	ldw	r4,1340(sp)
    3404:	d8800504 	addi	r2,sp,20
    3408:	880d883a 	mov	r6,r17
    340c:	d8800115 	stw	r2,4(sp)
    3410:	d8c00604 	addi	r3,sp,24
    3414:	d8800704 	addi	r2,sp,28
    3418:	800b883a 	mov	r5,r16
    341c:	01c00084 	movi	r7,2
    3420:	d8c00215 	stw	r3,8(sp)
    3424:	d8800315 	stw	r2,12(sp)
    3428:	dd000015 	stw	r20,0(sp)
    342c:	0003d940 	call	3d94 <_dtoa_r>
    3430:	d9814d17 	ldw	r6,1332(sp)
    3434:	d8814115 	stw	r2,1284(sp)
    3438:	008019c4 	movi	r2,103
    343c:	30809526 	beq	r6,r2,3694 <___vfprintf_internal_r+0x1cd8>
    3440:	d8c14d17 	ldw	r3,1332(sp)
    3444:	008011c4 	movi	r2,71
    3448:	18809226 	beq	r3,r2,3694 <___vfprintf_internal_r+0x1cd8>
    344c:	d9414117 	ldw	r5,1284(sp)
    3450:	d9814d17 	ldw	r6,1332(sp)
    3454:	00801984 	movi	r2,102
    3458:	2d25883a 	add	r18,r5,r20
    345c:	30808626 	beq	r6,r2,3678 <___vfprintf_internal_r+0x1cbc>
    3460:	00801184 	movi	r2,70
    3464:	30808426 	beq	r6,r2,3678 <___vfprintf_internal_r+0x1cbc>
    3468:	000d883a 	mov	r6,zero
    346c:	000f883a 	mov	r7,zero
    3470:	880b883a 	mov	r5,r17
    3474:	8009883a 	mov	r4,r16
    3478:	0009ec00 	call	9ec0 <__eqdf2>
    347c:	1000751e 	bne	r2,zero,3654 <___vfprintf_internal_r+0x1c98>
    3480:	9005883a 	mov	r2,r18
    3484:	dc800715 	stw	r18,28(sp)
    3488:	d9014117 	ldw	r4,1284(sp)
    348c:	d9414d17 	ldw	r5,1332(sp)
    3490:	00c019c4 	movi	r3,103
    3494:	1125c83a 	sub	r18,r2,r4
    3498:	28c06826 	beq	r5,r3,363c <___vfprintf_internal_r+0x1c80>
    349c:	008011c4 	movi	r2,71
    34a0:	28806626 	beq	r5,r2,363c <___vfprintf_internal_r+0x1c80>
    34a4:	d9000517 	ldw	r4,20(sp)
    34a8:	d8c14d17 	ldw	r3,1332(sp)
    34ac:	00801944 	movi	r2,101
    34b0:	10c05516 	blt	r2,r3,3608 <___vfprintf_internal_r+0x1c4c>
    34b4:	213fffc4 	addi	r4,r4,-1
    34b8:	d9000515 	stw	r4,20(sp)
    34bc:	d8c00805 	stb	r3,32(sp)
    34c0:	2021883a 	mov	r16,r4
    34c4:	2000c116 	blt	r4,zero,37cc <___vfprintf_internal_r+0x1e10>
    34c8:	00800ac4 	movi	r2,43
    34cc:	d8800845 	stb	r2,33(sp)
    34d0:	00800244 	movi	r2,9
    34d4:	1400af0e 	bge	r2,r16,3794 <___vfprintf_internal_r+0x1dd8>
    34d8:	1027883a 	mov	r19,r2
    34dc:	dc400b84 	addi	r17,sp,46
    34e0:	8009883a 	mov	r4,r16
    34e4:	01400284 	movi	r5,10
    34e8:	000a5a80 	call	a5a8 <__modsi3>
    34ec:	10800c04 	addi	r2,r2,48
    34f0:	8c7fffc4 	addi	r17,r17,-1
    34f4:	8009883a 	mov	r4,r16
    34f8:	01400284 	movi	r5,10
    34fc:	88800005 	stb	r2,0(r17)
    3500:	000a5480 	call	a548 <__divsi3>
    3504:	1021883a 	mov	r16,r2
    3508:	98bff516 	blt	r19,r2,34e0 <___vfprintf_internal_r+0x1b24>
    350c:	10c00c04 	addi	r3,r2,48
    3510:	d88009c4 	addi	r2,sp,39
    3514:	108001c4 	addi	r2,r2,7
    3518:	897fffc4 	addi	r5,r17,-1
    351c:	88ffffc5 	stb	r3,-1(r17)
    3520:	2880a72e 	bgeu	r5,r2,37c0 <___vfprintf_internal_r+0x1e04>
    3524:	1009883a 	mov	r4,r2
    3528:	d9800804 	addi	r6,sp,32
    352c:	d8c00884 	addi	r3,sp,34
    3530:	28800003 	ldbu	r2,0(r5)
    3534:	29400044 	addi	r5,r5,1
    3538:	18800005 	stb	r2,0(r3)
    353c:	18c00044 	addi	r3,r3,1
    3540:	293ffb36 	bltu	r5,r4,3530 <___vfprintf_internal_r+0x1b74>
    3544:	1987c83a 	sub	r3,r3,r6
    3548:	00800044 	movi	r2,1
    354c:	d8c14815 	stw	r3,1312(sp)
    3550:	90cf883a 	add	r7,r18,r3
    3554:	1480960e 	bge	r2,r18,37b0 <___vfprintf_internal_r+0x1df4>
    3558:	39c00044 	addi	r7,r7,1
    355c:	d9c14515 	stw	r7,1300(sp)
    3560:	38003416 	blt	r7,zero,3634 <___vfprintf_internal_r+0x1c78>
    3564:	e0803fcc 	andi	r2,fp,255
    3568:	1080201c 	xori	r2,r2,128
    356c:	10bfe004 	addi	r2,r2,-128
    3570:	10004e26 	beq	r2,zero,36ac <___vfprintf_internal_r+0x1cf0>
    3574:	00800b44 	movi	r2,45
    3578:	dc814715 	stw	r18,1308(sp)
    357c:	d8014615 	stw	zero,1304(sp)
    3580:	d8800405 	stb	r2,16(sp)
    3584:	003bb106 	br	244c <___vfprintf_internal_r+0xa90>
    3588:	00800b44 	movi	r2,45
    358c:	d8800405 	stb	r2,16(sp)
    3590:	003d3306 	br	2a60 <___vfprintf_internal_r+0x10a4>
    3594:	d9014f17 	ldw	r4,1340(sp)
    3598:	b00b883a 	mov	r5,r22
    359c:	d9800c04 	addi	r6,sp,48
    35a0:	00019640 	call	1964 <__sprint_r>
    35a4:	103abd1e 	bne	r2,zero,209c <___vfprintf_internal_r+0x6e0>
    35a8:	003abb06 	br	2098 <___vfprintf_internal_r+0x6dc>
    35ac:	38800017 	ldw	r2,0(r7)
    35b0:	39c00104 	addi	r7,r7,4
    35b4:	d9c14015 	stw	r7,1280(sp)
    35b8:	d9414b17 	ldw	r5,1324(sp)
    35bc:	d9c14017 	ldw	r7,1280(sp)
    35c0:	11400015 	stw	r5,0(r2)
    35c4:	00395906 	br	1b2c <___vfprintf_internal_r+0x170>
    35c8:	980f883a 	mov	r7,r19
    35cc:	dcc14515 	stw	r19,1300(sp)
    35d0:	d8014615 	stw	zero,1304(sp)
    35d4:	003b9b06 	br	2444 <___vfprintf_internal_r+0xa88>
    35d8:	0027883a 	mov	r19,zero
    35dc:	00397806 	br	1bc0 <___vfprintf_internal_r+0x204>
    35e0:	00c00074 	movhi	r3,1
    35e4:	18f5f104 	addi	r3,r3,-10300
    35e8:	100f883a 	mov	r7,r2
    35ec:	d8814515 	stw	r2,1300(sp)
    35f0:	d8c14115 	stw	r3,1284(sp)
    35f4:	0039e006 	br	1d78 <___vfprintf_internal_r+0x3bc>
    35f8:	00800074 	movhi	r2,1
    35fc:	10b5f004 	addi	r2,r2,-10304
    3600:	d8814115 	stw	r2,1284(sp)
    3604:	003d1c06 	br	2a78 <___vfprintf_internal_r+0x10bc>
    3608:	d9414d17 	ldw	r5,1332(sp)
    360c:	00801984 	movi	r2,102
    3610:	28804926 	beq	r5,r2,3738 <___vfprintf_internal_r+0x1d7c>
    3614:	200f883a 	mov	r7,r4
    3618:	24805716 	blt	r4,r18,3778 <___vfprintf_internal_r+0x1dbc>
    361c:	d9414c17 	ldw	r5,1328(sp)
    3620:	2880004c 	andi	r2,r5,1
    3624:	10000126 	beq	r2,zero,362c <___vfprintf_internal_r+0x1c70>
    3628:	21c00044 	addi	r7,r4,1
    362c:	d9c14515 	stw	r7,1300(sp)
    3630:	383fcc0e 	bge	r7,zero,3564 <___vfprintf_internal_r+0x1ba8>
    3634:	d8014515 	stw	zero,1300(sp)
    3638:	003fca06 	br	3564 <___vfprintf_internal_r+0x1ba8>
    363c:	d9000517 	ldw	r4,20(sp)
    3640:	00bfff04 	movi	r2,-4
    3644:	1100480e 	bge	r2,r4,3768 <___vfprintf_internal_r+0x1dac>
    3648:	99004716 	blt	r19,r4,3768 <___vfprintf_internal_r+0x1dac>
    364c:	d8c14d15 	stw	r3,1332(sp)
    3650:	003ff006 	br	3614 <___vfprintf_internal_r+0x1c58>
    3654:	d8800717 	ldw	r2,28(sp)
    3658:	14bf8b2e 	bgeu	r2,r18,3488 <___vfprintf_internal_r+0x1acc>
    365c:	9007883a 	mov	r3,r18
    3660:	01000c04 	movi	r4,48
    3664:	11000005 	stb	r4,0(r2)
    3668:	10800044 	addi	r2,r2,1
    366c:	d8800715 	stw	r2,28(sp)
    3670:	18bffc1e 	bne	r3,r2,3664 <___vfprintf_internal_r+0x1ca8>
    3674:	003f8406 	br	3488 <___vfprintf_internal_r+0x1acc>
    3678:	d8814117 	ldw	r2,1284(sp)
    367c:	10c00007 	ldb	r3,0(r2)
    3680:	00800c04 	movi	r2,48
    3684:	18805b26 	beq	r3,r2,37f4 <___vfprintf_internal_r+0x1e38>
    3688:	d9000517 	ldw	r4,20(sp)
    368c:	9125883a 	add	r18,r18,r4
    3690:	003f7506 	br	3468 <___vfprintf_internal_r+0x1aac>
    3694:	d9014c17 	ldw	r4,1328(sp)
    3698:	2080004c 	andi	r2,r4,1
    369c:	1005003a 	cmpeq	r2,r2,zero
    36a0:	103f6a26 	beq	r2,zero,344c <___vfprintf_internal_r+0x1a90>
    36a4:	d8800717 	ldw	r2,28(sp)
    36a8:	003f7706 	br	3488 <___vfprintf_internal_r+0x1acc>
    36ac:	d9c14515 	stw	r7,1300(sp)
    36b0:	38004d16 	blt	r7,zero,37e8 <___vfprintf_internal_r+0x1e2c>
    36b4:	dc814715 	stw	r18,1308(sp)
    36b8:	d8014615 	stw	zero,1304(sp)
    36bc:	003b6106 	br	2444 <___vfprintf_internal_r+0xa88>
    36c0:	d9014f17 	ldw	r4,1340(sp)
    36c4:	d8800504 	addi	r2,sp,20
    36c8:	d8800115 	stw	r2,4(sp)
    36cc:	d8c00604 	addi	r3,sp,24
    36d0:	d8800704 	addi	r2,sp,28
    36d4:	800b883a 	mov	r5,r16
    36d8:	880d883a 	mov	r6,r17
    36dc:	01c000c4 	movi	r7,3
    36e0:	d8c00215 	stw	r3,8(sp)
    36e4:	d8800315 	stw	r2,12(sp)
    36e8:	dcc00015 	stw	r19,0(sp)
    36ec:	9829883a 	mov	r20,r19
    36f0:	0003d940 	call	3d94 <_dtoa_r>
    36f4:	d8814115 	stw	r2,1284(sp)
    36f8:	003f5106 	br	3440 <___vfprintf_internal_r+0x1a84>
    36fc:	d8c14217 	ldw	r3,1288(sp)
    3700:	d9014317 	ldw	r4,1292(sp)
    3704:	07000b44 	movi	fp,45
    3708:	1821883a 	mov	r16,r3
    370c:	2460003c 	xorhi	r17,r4,32768
    3710:	003f3106 	br	33d8 <___vfprintf_internal_r+0x1a1c>
    3714:	9d000044 	addi	r20,r19,1
    3718:	003f3906 	br	3400 <___vfprintf_internal_r+0x1a44>
    371c:	983f251e 	bne	r19,zero,33b4 <___vfprintf_internal_r+0x19f8>
    3720:	04c00044 	movi	r19,1
    3724:	003f2306 	br	33b4 <___vfprintf_internal_r+0x19f8>
    3728:	04c00184 	movi	r19,6
    372c:	003f2106 	br	33b4 <___vfprintf_internal_r+0x19f8>
    3730:	d8014515 	stw	zero,1300(sp)
    3734:	003eee06 	br	32f0 <___vfprintf_internal_r+0x1934>
    3738:	200f883a 	mov	r7,r4
    373c:	0100370e 	bge	zero,r4,381c <___vfprintf_internal_r+0x1e60>
    3740:	9800031e 	bne	r19,zero,3750 <___vfprintf_internal_r+0x1d94>
    3744:	d9814c17 	ldw	r6,1328(sp)
    3748:	3080004c 	andi	r2,r6,1
    374c:	103fb726 	beq	r2,zero,362c <___vfprintf_internal_r+0x1c70>
    3750:	20800044 	addi	r2,r4,1
    3754:	98a7883a 	add	r19,r19,r2
    3758:	dcc14515 	stw	r19,1300(sp)
    375c:	980f883a 	mov	r7,r19
    3760:	983f800e 	bge	r19,zero,3564 <___vfprintf_internal_r+0x1ba8>
    3764:	003fb306 	br	3634 <___vfprintf_internal_r+0x1c78>
    3768:	d9814d17 	ldw	r6,1332(sp)
    376c:	31bfff84 	addi	r6,r6,-2
    3770:	d9814d15 	stw	r6,1332(sp)
    3774:	003f4c06 	br	34a8 <___vfprintf_internal_r+0x1aec>
    3778:	0100180e 	bge	zero,r4,37dc <___vfprintf_internal_r+0x1e20>
    377c:	00800044 	movi	r2,1
    3780:	1485883a 	add	r2,r2,r18
    3784:	d8814515 	stw	r2,1300(sp)
    3788:	100f883a 	mov	r7,r2
    378c:	103f750e 	bge	r2,zero,3564 <___vfprintf_internal_r+0x1ba8>
    3790:	003fa806 	br	3634 <___vfprintf_internal_r+0x1c78>
    3794:	80c00c04 	addi	r3,r16,48
    3798:	00800c04 	movi	r2,48
    379c:	d8c008c5 	stb	r3,35(sp)
    37a0:	d9800804 	addi	r6,sp,32
    37a4:	d8c00904 	addi	r3,sp,36
    37a8:	d8800885 	stb	r2,34(sp)
    37ac:	003f6506 	br	3544 <___vfprintf_internal_r+0x1b88>
    37b0:	d9014c17 	ldw	r4,1328(sp)
    37b4:	2084703a 	and	r2,r4,r2
    37b8:	103f9c26 	beq	r2,zero,362c <___vfprintf_internal_r+0x1c70>
    37bc:	003f6606 	br	3558 <___vfprintf_internal_r+0x1b9c>
    37c0:	d9800804 	addi	r6,sp,32
    37c4:	d8c00884 	addi	r3,sp,34
    37c8:	003f5e06 	br	3544 <___vfprintf_internal_r+0x1b88>
    37cc:	00800b44 	movi	r2,45
    37d0:	0121c83a 	sub	r16,zero,r4
    37d4:	d8800845 	stb	r2,33(sp)
    37d8:	003f3d06 	br	34d0 <___vfprintf_internal_r+0x1b14>
    37dc:	00800084 	movi	r2,2
    37e0:	1105c83a 	sub	r2,r2,r4
    37e4:	003fe606 	br	3780 <___vfprintf_internal_r+0x1dc4>
    37e8:	d8014515 	stw	zero,1300(sp)
    37ec:	dc814715 	stw	r18,1308(sp)
    37f0:	003fb106 	br	36b8 <___vfprintf_internal_r+0x1cfc>
    37f4:	000d883a 	mov	r6,zero
    37f8:	000f883a 	mov	r7,zero
    37fc:	8009883a 	mov	r4,r16
    3800:	880b883a 	mov	r5,r17
    3804:	0009f480 	call	9f48 <__nedf2>
    3808:	103f9f26 	beq	r2,zero,3688 <___vfprintf_internal_r+0x1ccc>
    380c:	00800044 	movi	r2,1
    3810:	1509c83a 	sub	r4,r2,r20
    3814:	d9000515 	stw	r4,20(sp)
    3818:	003f9b06 	br	3688 <___vfprintf_internal_r+0x1ccc>
    381c:	98000d1e 	bne	r19,zero,3854 <___vfprintf_internal_r+0x1e98>
    3820:	d8c14c17 	ldw	r3,1328(sp)
    3824:	1880004c 	andi	r2,r3,1
    3828:	10000a1e 	bne	r2,zero,3854 <___vfprintf_internal_r+0x1e98>
    382c:	01000044 	movi	r4,1
    3830:	200f883a 	mov	r7,r4
    3834:	d9014515 	stw	r4,1300(sp)
    3838:	003f4a06 	br	3564 <___vfprintf_internal_r+0x1ba8>
    383c:	3cc00017 	ldw	r19,0(r7)
    3840:	39c00104 	addi	r7,r7,4
    3844:	983d0e0e 	bge	r19,zero,2c80 <___vfprintf_internal_r+0x12c4>
    3848:	b8c00007 	ldb	r3,0(r23)
    384c:	04ffffc4 	movi	r19,-1
    3850:	0038d906 	br	1bb8 <___vfprintf_internal_r+0x1fc>
    3854:	9cc00084 	addi	r19,r19,2
    3858:	dcc14515 	stw	r19,1300(sp)
    385c:	980f883a 	mov	r7,r19
    3860:	983f400e 	bge	r19,zero,3564 <___vfprintf_internal_r+0x1ba8>
    3864:	003f7306 	br	3634 <___vfprintf_internal_r+0x1c78>

00003868 <__vfprintf_internal>:
    3868:	00800074 	movhi	r2,1
    386c:	10bd3c04 	addi	r2,r2,-2832
    3870:	2013883a 	mov	r9,r4
    3874:	11000017 	ldw	r4,0(r2)
    3878:	2805883a 	mov	r2,r5
    387c:	300f883a 	mov	r7,r6
    3880:	480b883a 	mov	r5,r9
    3884:	100d883a 	mov	r6,r2
    3888:	00019bc1 	jmpi	19bc <___vfprintf_internal_r>

0000388c <__swsetup_r>:
    388c:	00800074 	movhi	r2,1
    3890:	10bd3c04 	addi	r2,r2,-2832
    3894:	10c00017 	ldw	r3,0(r2)
    3898:	defffd04 	addi	sp,sp,-12
    389c:	dc400115 	stw	r17,4(sp)
    38a0:	dc000015 	stw	r16,0(sp)
    38a4:	dfc00215 	stw	ra,8(sp)
    38a8:	2023883a 	mov	r17,r4
    38ac:	2821883a 	mov	r16,r5
    38b0:	18000226 	beq	r3,zero,38bc <__swsetup_r+0x30>
    38b4:	18800e17 	ldw	r2,56(r3)
    38b8:	10001f26 	beq	r2,zero,3938 <__swsetup_r+0xac>
    38bc:	8100030b 	ldhu	r4,12(r16)
    38c0:	2080020c 	andi	r2,r4,8
    38c4:	10002826 	beq	r2,zero,3968 <__swsetup_r+0xdc>
    38c8:	81400417 	ldw	r5,16(r16)
    38cc:	28001d26 	beq	r5,zero,3944 <__swsetup_r+0xb8>
    38d0:	2080004c 	andi	r2,r4,1
    38d4:	1005003a 	cmpeq	r2,r2,zero
    38d8:	10000b26 	beq	r2,zero,3908 <__swsetup_r+0x7c>
    38dc:	2080008c 	andi	r2,r4,2
    38e0:	10001226 	beq	r2,zero,392c <__swsetup_r+0xa0>
    38e4:	0005883a 	mov	r2,zero
    38e8:	80800215 	stw	r2,8(r16)
    38ec:	28000b26 	beq	r5,zero,391c <__swsetup_r+0x90>
    38f0:	0005883a 	mov	r2,zero
    38f4:	dfc00217 	ldw	ra,8(sp)
    38f8:	dc400117 	ldw	r17,4(sp)
    38fc:	dc000017 	ldw	r16,0(sp)
    3900:	dec00304 	addi	sp,sp,12
    3904:	f800283a 	ret
    3908:	80800517 	ldw	r2,20(r16)
    390c:	80000215 	stw	zero,8(r16)
    3910:	0085c83a 	sub	r2,zero,r2
    3914:	80800615 	stw	r2,24(r16)
    3918:	283ff51e 	bne	r5,zero,38f0 <__swsetup_r+0x64>
    391c:	2080200c 	andi	r2,r4,128
    3920:	103ff326 	beq	r2,zero,38f0 <__swsetup_r+0x64>
    3924:	00bfffc4 	movi	r2,-1
    3928:	003ff206 	br	38f4 <__swsetup_r+0x68>
    392c:	80800517 	ldw	r2,20(r16)
    3930:	80800215 	stw	r2,8(r16)
    3934:	003fed06 	br	38ec <__swsetup_r+0x60>
    3938:	1809883a 	mov	r4,r3
    393c:	00055e00 	call	55e0 <__sinit>
    3940:	003fde06 	br	38bc <__swsetup_r+0x30>
    3944:	20c0a00c 	andi	r3,r4,640
    3948:	00808004 	movi	r2,512
    394c:	18bfe026 	beq	r3,r2,38d0 <__swsetup_r+0x44>
    3950:	8809883a 	mov	r4,r17
    3954:	800b883a 	mov	r5,r16
    3958:	00063580 	call	6358 <__smakebuf_r>
    395c:	8100030b 	ldhu	r4,12(r16)
    3960:	81400417 	ldw	r5,16(r16)
    3964:	003fda06 	br	38d0 <__swsetup_r+0x44>
    3968:	2080040c 	andi	r2,r4,16
    396c:	103fed26 	beq	r2,zero,3924 <__swsetup_r+0x98>
    3970:	2080010c 	andi	r2,r4,4
    3974:	10001226 	beq	r2,zero,39c0 <__swsetup_r+0x134>
    3978:	81400c17 	ldw	r5,48(r16)
    397c:	28000526 	beq	r5,zero,3994 <__swsetup_r+0x108>
    3980:	80801004 	addi	r2,r16,64
    3984:	28800226 	beq	r5,r2,3990 <__swsetup_r+0x104>
    3988:	8809883a 	mov	r4,r17
    398c:	00059640 	call	5964 <_free_r>
    3990:	80000c15 	stw	zero,48(r16)
    3994:	8080030b 	ldhu	r2,12(r16)
    3998:	81400417 	ldw	r5,16(r16)
    399c:	80000115 	stw	zero,4(r16)
    39a0:	10bff6cc 	andi	r2,r2,65499
    39a4:	8080030d 	sth	r2,12(r16)
    39a8:	81400015 	stw	r5,0(r16)
    39ac:	8080030b 	ldhu	r2,12(r16)
    39b0:	10800214 	ori	r2,r2,8
    39b4:	113fffcc 	andi	r4,r2,65535
    39b8:	8080030d 	sth	r2,12(r16)
    39bc:	003fc306 	br	38cc <__swsetup_r+0x40>
    39c0:	81400417 	ldw	r5,16(r16)
    39c4:	003ff906 	br	39ac <__swsetup_r+0x120>

000039c8 <register_fini>:
    39c8:	f800283a 	ret

000039cc <__call_exitprocs>:
    39cc:	00800074 	movhi	r2,1
    39d0:	10bd3d04 	addi	r2,r2,-2828
    39d4:	10800017 	ldw	r2,0(r2)
    39d8:	defff304 	addi	sp,sp,-52
    39dc:	df000b15 	stw	fp,44(sp)
    39e0:	d8800115 	stw	r2,4(sp)
    39e4:	00800034 	movhi	r2,0
    39e8:	1083f204 	addi	r2,r2,4040
    39ec:	1005003a 	cmpeq	r2,r2,zero
    39f0:	d8800215 	stw	r2,8(sp)
    39f4:	d8800117 	ldw	r2,4(sp)
    39f8:	dd400815 	stw	r21,32(sp)
    39fc:	dd000715 	stw	r20,28(sp)
    3a00:	10805204 	addi	r2,r2,328
    3a04:	dfc00c15 	stw	ra,48(sp)
    3a08:	ddc00a15 	stw	r23,40(sp)
    3a0c:	dd800915 	stw	r22,36(sp)
    3a10:	dcc00615 	stw	r19,24(sp)
    3a14:	dc800515 	stw	r18,20(sp)
    3a18:	dc400415 	stw	r17,16(sp)
    3a1c:	dc000315 	stw	r16,12(sp)
    3a20:	282b883a 	mov	r21,r5
    3a24:	2039883a 	mov	fp,r4
    3a28:	d8800015 	stw	r2,0(sp)
    3a2c:	2829003a 	cmpeq	r20,r5,zero
    3a30:	d8800117 	ldw	r2,4(sp)
    3a34:	14405217 	ldw	r17,328(r2)
    3a38:	88001026 	beq	r17,zero,3a7c <__call_exitprocs+0xb0>
    3a3c:	ddc00017 	ldw	r23,0(sp)
    3a40:	88800117 	ldw	r2,4(r17)
    3a44:	8c802204 	addi	r18,r17,136
    3a48:	143fffc4 	addi	r16,r2,-1
    3a4c:	80000916 	blt	r16,zero,3a74 <__call_exitprocs+0xa8>
    3a50:	05bfffc4 	movi	r22,-1
    3a54:	a000151e 	bne	r20,zero,3aac <__call_exitprocs+0xe0>
    3a58:	8409883a 	add	r4,r16,r16
    3a5c:	2105883a 	add	r2,r4,r4
    3a60:	1485883a 	add	r2,r2,r18
    3a64:	10c02017 	ldw	r3,128(r2)
    3a68:	a8c01126 	beq	r21,r3,3ab0 <__call_exitprocs+0xe4>
    3a6c:	843fffc4 	addi	r16,r16,-1
    3a70:	85bff81e 	bne	r16,r22,3a54 <__call_exitprocs+0x88>
    3a74:	d8800217 	ldw	r2,8(sp)
    3a78:	10003126 	beq	r2,zero,3b40 <__call_exitprocs+0x174>
    3a7c:	dfc00c17 	ldw	ra,48(sp)
    3a80:	df000b17 	ldw	fp,44(sp)
    3a84:	ddc00a17 	ldw	r23,40(sp)
    3a88:	dd800917 	ldw	r22,36(sp)
    3a8c:	dd400817 	ldw	r21,32(sp)
    3a90:	dd000717 	ldw	r20,28(sp)
    3a94:	dcc00617 	ldw	r19,24(sp)
    3a98:	dc800517 	ldw	r18,20(sp)
    3a9c:	dc400417 	ldw	r17,16(sp)
    3aa0:	dc000317 	ldw	r16,12(sp)
    3aa4:	dec00d04 	addi	sp,sp,52
    3aa8:	f800283a 	ret
    3aac:	8409883a 	add	r4,r16,r16
    3ab0:	88c00117 	ldw	r3,4(r17)
    3ab4:	2105883a 	add	r2,r4,r4
    3ab8:	1445883a 	add	r2,r2,r17
    3abc:	18ffffc4 	addi	r3,r3,-1
    3ac0:	11800217 	ldw	r6,8(r2)
    3ac4:	1c001526 	beq	r3,r16,3b1c <__call_exitprocs+0x150>
    3ac8:	10000215 	stw	zero,8(r2)
    3acc:	303fe726 	beq	r6,zero,3a6c <__call_exitprocs+0xa0>
    3ad0:	00c00044 	movi	r3,1
    3ad4:	1c06983a 	sll	r3,r3,r16
    3ad8:	90804017 	ldw	r2,256(r18)
    3adc:	8cc00117 	ldw	r19,4(r17)
    3ae0:	1884703a 	and	r2,r3,r2
    3ae4:	10001426 	beq	r2,zero,3b38 <__call_exitprocs+0x16c>
    3ae8:	90804117 	ldw	r2,260(r18)
    3aec:	1884703a 	and	r2,r3,r2
    3af0:	10000c1e 	bne	r2,zero,3b24 <__call_exitprocs+0x158>
    3af4:	2105883a 	add	r2,r4,r4
    3af8:	1485883a 	add	r2,r2,r18
    3afc:	11400017 	ldw	r5,0(r2)
    3b00:	e009883a 	mov	r4,fp
    3b04:	303ee83a 	callr	r6
    3b08:	88800117 	ldw	r2,4(r17)
    3b0c:	98bfc81e 	bne	r19,r2,3a30 <__call_exitprocs+0x64>
    3b10:	b8800017 	ldw	r2,0(r23)
    3b14:	147fd526 	beq	r2,r17,3a6c <__call_exitprocs+0xa0>
    3b18:	003fc506 	br	3a30 <__call_exitprocs+0x64>
    3b1c:	8c000115 	stw	r16,4(r17)
    3b20:	003fea06 	br	3acc <__call_exitprocs+0x100>
    3b24:	2105883a 	add	r2,r4,r4
    3b28:	1485883a 	add	r2,r2,r18
    3b2c:	11000017 	ldw	r4,0(r2)
    3b30:	303ee83a 	callr	r6
    3b34:	003ff406 	br	3b08 <__call_exitprocs+0x13c>
    3b38:	303ee83a 	callr	r6
    3b3c:	003ff206 	br	3b08 <__call_exitprocs+0x13c>
    3b40:	88800117 	ldw	r2,4(r17)
    3b44:	1000081e 	bne	r2,zero,3b68 <__call_exitprocs+0x19c>
    3b48:	89000017 	ldw	r4,0(r17)
    3b4c:	20000726 	beq	r4,zero,3b6c <__call_exitprocs+0x1a0>
    3b50:	b9000015 	stw	r4,0(r23)
    3b54:	8809883a 	mov	r4,r17
    3b58:	0000fc80 	call	fc8 <free>
    3b5c:	bc400017 	ldw	r17,0(r23)
    3b60:	883fb71e 	bne	r17,zero,3a40 <__call_exitprocs+0x74>
    3b64:	003fc506 	br	3a7c <__call_exitprocs+0xb0>
    3b68:	89000017 	ldw	r4,0(r17)
    3b6c:	882f883a 	mov	r23,r17
    3b70:	2023883a 	mov	r17,r4
    3b74:	883fb21e 	bne	r17,zero,3a40 <__call_exitprocs+0x74>
    3b78:	003fc006 	br	3a7c <__call_exitprocs+0xb0>

00003b7c <quorem>:
    3b7c:	28c00417 	ldw	r3,16(r5)
    3b80:	20800417 	ldw	r2,16(r4)
    3b84:	defff604 	addi	sp,sp,-40
    3b88:	ddc00715 	stw	r23,28(sp)
    3b8c:	dd400515 	stw	r21,20(sp)
    3b90:	dfc00915 	stw	ra,36(sp)
    3b94:	df000815 	stw	fp,32(sp)
    3b98:	dd800615 	stw	r22,24(sp)
    3b9c:	dd000415 	stw	r20,16(sp)
    3ba0:	dcc00315 	stw	r19,12(sp)
    3ba4:	dc800215 	stw	r18,8(sp)
    3ba8:	dc400115 	stw	r17,4(sp)
    3bac:	dc000015 	stw	r16,0(sp)
    3bb0:	202f883a 	mov	r23,r4
    3bb4:	282b883a 	mov	r21,r5
    3bb8:	10c07416 	blt	r2,r3,3d8c <quorem+0x210>
    3bbc:	1c7fffc4 	addi	r17,r3,-1
    3bc0:	8c45883a 	add	r2,r17,r17
    3bc4:	1085883a 	add	r2,r2,r2
    3bc8:	2c000504 	addi	r16,r5,20
    3bcc:	24c00504 	addi	r19,r4,20
    3bd0:	14ed883a 	add	r22,r2,r19
    3bd4:	80a5883a 	add	r18,r16,r2
    3bd8:	b7000017 	ldw	fp,0(r22)
    3bdc:	91400017 	ldw	r5,0(r18)
    3be0:	e009883a 	mov	r4,fp
    3be4:	29400044 	addi	r5,r5,1
    3be8:	000a6080 	call	a608 <__udivsi3>
    3bec:	1029883a 	mov	r20,r2
    3bf0:	10003c1e 	bne	r2,zero,3ce4 <quorem+0x168>
    3bf4:	a80b883a 	mov	r5,r21
    3bf8:	b809883a 	mov	r4,r23
    3bfc:	00069440 	call	6944 <__mcmp>
    3c00:	10002b16 	blt	r2,zero,3cb0 <quorem+0x134>
    3c04:	a5000044 	addi	r20,r20,1
    3c08:	980f883a 	mov	r7,r19
    3c0c:	0011883a 	mov	r8,zero
    3c10:	0009883a 	mov	r4,zero
    3c14:	81400017 	ldw	r5,0(r16)
    3c18:	38c00017 	ldw	r3,0(r7)
    3c1c:	84000104 	addi	r16,r16,4
    3c20:	28bfffcc 	andi	r2,r5,65535
    3c24:	2085883a 	add	r2,r4,r2
    3c28:	11bfffcc 	andi	r6,r2,65535
    3c2c:	193fffcc 	andi	r4,r3,65535
    3c30:	1004d43a 	srli	r2,r2,16
    3c34:	280ad43a 	srli	r5,r5,16
    3c38:	2189c83a 	sub	r4,r4,r6
    3c3c:	2209883a 	add	r4,r4,r8
    3c40:	1806d43a 	srli	r3,r3,16
    3c44:	288b883a 	add	r5,r5,r2
    3c48:	200dd43a 	srai	r6,r4,16
    3c4c:	28bfffcc 	andi	r2,r5,65535
    3c50:	1887c83a 	sub	r3,r3,r2
    3c54:	1987883a 	add	r3,r3,r6
    3c58:	3900000d 	sth	r4,0(r7)
    3c5c:	38c0008d 	sth	r3,2(r7)
    3c60:	2808d43a 	srli	r4,r5,16
    3c64:	39c00104 	addi	r7,r7,4
    3c68:	1811d43a 	srai	r8,r3,16
    3c6c:	943fe92e 	bgeu	r18,r16,3c14 <quorem+0x98>
    3c70:	8c45883a 	add	r2,r17,r17
    3c74:	1085883a 	add	r2,r2,r2
    3c78:	9885883a 	add	r2,r19,r2
    3c7c:	10c00017 	ldw	r3,0(r2)
    3c80:	18000b1e 	bne	r3,zero,3cb0 <quorem+0x134>
    3c84:	113fff04 	addi	r4,r2,-4
    3c88:	9900082e 	bgeu	r19,r4,3cac <quorem+0x130>
    3c8c:	10bfff17 	ldw	r2,-4(r2)
    3c90:	10000326 	beq	r2,zero,3ca0 <quorem+0x124>
    3c94:	00000506 	br	3cac <quorem+0x130>
    3c98:	20800017 	ldw	r2,0(r4)
    3c9c:	1000031e 	bne	r2,zero,3cac <quorem+0x130>
    3ca0:	213fff04 	addi	r4,r4,-4
    3ca4:	8c7fffc4 	addi	r17,r17,-1
    3ca8:	993ffb36 	bltu	r19,r4,3c98 <quorem+0x11c>
    3cac:	bc400415 	stw	r17,16(r23)
    3cb0:	a005883a 	mov	r2,r20
    3cb4:	dfc00917 	ldw	ra,36(sp)
    3cb8:	df000817 	ldw	fp,32(sp)
    3cbc:	ddc00717 	ldw	r23,28(sp)
    3cc0:	dd800617 	ldw	r22,24(sp)
    3cc4:	dd400517 	ldw	r21,20(sp)
    3cc8:	dd000417 	ldw	r20,16(sp)
    3ccc:	dcc00317 	ldw	r19,12(sp)
    3cd0:	dc800217 	ldw	r18,8(sp)
    3cd4:	dc400117 	ldw	r17,4(sp)
    3cd8:	dc000017 	ldw	r16,0(sp)
    3cdc:	dec00a04 	addi	sp,sp,40
    3ce0:	f800283a 	ret
    3ce4:	980f883a 	mov	r7,r19
    3ce8:	8011883a 	mov	r8,r16
    3cec:	0013883a 	mov	r9,zero
    3cf0:	000d883a 	mov	r6,zero
    3cf4:	40c00017 	ldw	r3,0(r8)
    3cf8:	39000017 	ldw	r4,0(r7)
    3cfc:	42000104 	addi	r8,r8,4
    3d00:	18bfffcc 	andi	r2,r3,65535
    3d04:	a085383a 	mul	r2,r20,r2
    3d08:	1806d43a 	srli	r3,r3,16
    3d0c:	217fffcc 	andi	r5,r4,65535
    3d10:	3085883a 	add	r2,r6,r2
    3d14:	11bfffcc 	andi	r6,r2,65535
    3d18:	a0c7383a 	mul	r3,r20,r3
    3d1c:	1004d43a 	srli	r2,r2,16
    3d20:	298bc83a 	sub	r5,r5,r6
    3d24:	2a4b883a 	add	r5,r5,r9
    3d28:	2008d43a 	srli	r4,r4,16
    3d2c:	1887883a 	add	r3,r3,r2
    3d30:	280dd43a 	srai	r6,r5,16
    3d34:	18bfffcc 	andi	r2,r3,65535
    3d38:	2089c83a 	sub	r4,r4,r2
    3d3c:	2189883a 	add	r4,r4,r6
    3d40:	3900008d 	sth	r4,2(r7)
    3d44:	3940000d 	sth	r5,0(r7)
    3d48:	180cd43a 	srli	r6,r3,16
    3d4c:	39c00104 	addi	r7,r7,4
    3d50:	2013d43a 	srai	r9,r4,16
    3d54:	923fe72e 	bgeu	r18,r8,3cf4 <quorem+0x178>
    3d58:	e03fa61e 	bne	fp,zero,3bf4 <quorem+0x78>
    3d5c:	b0ffff04 	addi	r3,r22,-4
    3d60:	98c0082e 	bgeu	r19,r3,3d84 <quorem+0x208>
    3d64:	b0bfff17 	ldw	r2,-4(r22)
    3d68:	10000326 	beq	r2,zero,3d78 <quorem+0x1fc>
    3d6c:	00000506 	br	3d84 <quorem+0x208>
    3d70:	18800017 	ldw	r2,0(r3)
    3d74:	1000031e 	bne	r2,zero,3d84 <quorem+0x208>
    3d78:	18ffff04 	addi	r3,r3,-4
    3d7c:	8c7fffc4 	addi	r17,r17,-1
    3d80:	98fffb36 	bltu	r19,r3,3d70 <quorem+0x1f4>
    3d84:	bc400415 	stw	r17,16(r23)
    3d88:	003f9a06 	br	3bf4 <quorem+0x78>
    3d8c:	0005883a 	mov	r2,zero
    3d90:	003fc806 	br	3cb4 <quorem+0x138>

00003d94 <_dtoa_r>:
    3d94:	22001017 	ldw	r8,64(r4)
    3d98:	deffda04 	addi	sp,sp,-152
    3d9c:	dd402115 	stw	r21,132(sp)
    3da0:	dd002015 	stw	r20,128(sp)
    3da4:	dc801e15 	stw	r18,120(sp)
    3da8:	dc401d15 	stw	r17,116(sp)
    3dac:	dfc02515 	stw	ra,148(sp)
    3db0:	df002415 	stw	fp,144(sp)
    3db4:	ddc02315 	stw	r23,140(sp)
    3db8:	dd802215 	stw	r22,136(sp)
    3dbc:	dcc01f15 	stw	r19,124(sp)
    3dc0:	dc001c15 	stw	r16,112(sp)
    3dc4:	d9001615 	stw	r4,88(sp)
    3dc8:	3023883a 	mov	r17,r6
    3dcc:	2829883a 	mov	r20,r5
    3dd0:	d9c01715 	stw	r7,92(sp)
    3dd4:	dc802817 	ldw	r18,160(sp)
    3dd8:	302b883a 	mov	r21,r6
    3ddc:	40000a26 	beq	r8,zero,3e08 <_dtoa_r+0x74>
    3de0:	20801117 	ldw	r2,68(r4)
    3de4:	400b883a 	mov	r5,r8
    3de8:	40800115 	stw	r2,4(r8)
    3dec:	20c01117 	ldw	r3,68(r4)
    3df0:	00800044 	movi	r2,1
    3df4:	10c4983a 	sll	r2,r2,r3
    3df8:	40800215 	stw	r2,8(r8)
    3dfc:	00067e80 	call	67e8 <_Bfree>
    3e00:	d8c01617 	ldw	r3,88(sp)
    3e04:	18001015 	stw	zero,64(r3)
    3e08:	8800a316 	blt	r17,zero,4098 <_dtoa_r+0x304>
    3e0c:	90000015 	stw	zero,0(r18)
    3e10:	a8dffc2c 	andhi	r3,r21,32752
    3e14:	009ffc34 	movhi	r2,32752
    3e18:	18809126 	beq	r3,r2,4060 <_dtoa_r+0x2cc>
    3e1c:	000d883a 	mov	r6,zero
    3e20:	000f883a 	mov	r7,zero
    3e24:	a009883a 	mov	r4,r20
    3e28:	a80b883a 	mov	r5,r21
    3e2c:	dd001215 	stw	r20,72(sp)
    3e30:	dd401315 	stw	r21,76(sp)
    3e34:	0009f480 	call	9f48 <__nedf2>
    3e38:	1000171e 	bne	r2,zero,3e98 <_dtoa_r+0x104>
    3e3c:	d9802717 	ldw	r6,156(sp)
    3e40:	00800044 	movi	r2,1
    3e44:	30800015 	stw	r2,0(r6)
    3e48:	d8802917 	ldw	r2,164(sp)
    3e4c:	10029b26 	beq	r2,zero,48bc <_dtoa_r+0xb28>
    3e50:	d9002917 	ldw	r4,164(sp)
    3e54:	00800074 	movhi	r2,1
    3e58:	10b5ff44 	addi	r2,r2,-10243
    3e5c:	10ffffc4 	addi	r3,r2,-1
    3e60:	20800015 	stw	r2,0(r4)
    3e64:	1805883a 	mov	r2,r3
    3e68:	dfc02517 	ldw	ra,148(sp)
    3e6c:	df002417 	ldw	fp,144(sp)
    3e70:	ddc02317 	ldw	r23,140(sp)
    3e74:	dd802217 	ldw	r22,136(sp)
    3e78:	dd402117 	ldw	r21,132(sp)
    3e7c:	dd002017 	ldw	r20,128(sp)
    3e80:	dcc01f17 	ldw	r19,124(sp)
    3e84:	dc801e17 	ldw	r18,120(sp)
    3e88:	dc401d17 	ldw	r17,116(sp)
    3e8c:	dc001c17 	ldw	r16,112(sp)
    3e90:	dec02604 	addi	sp,sp,152
    3e94:	f800283a 	ret
    3e98:	d9001617 	ldw	r4,88(sp)
    3e9c:	d9401217 	ldw	r5,72(sp)
    3ea0:	d8800104 	addi	r2,sp,4
    3ea4:	a80d883a 	mov	r6,r21
    3ea8:	d9c00204 	addi	r7,sp,8
    3eac:	d8800015 	stw	r2,0(sp)
    3eb0:	0006e240 	call	6e24 <__d2b>
    3eb4:	d8800715 	stw	r2,28(sp)
    3eb8:	a804d53a 	srli	r2,r21,20
    3ebc:	1101ffcc 	andi	r4,r2,2047
    3ec0:	20008626 	beq	r4,zero,40dc <_dtoa_r+0x348>
    3ec4:	d8c01217 	ldw	r3,72(sp)
    3ec8:	00800434 	movhi	r2,16
    3ecc:	10bfffc4 	addi	r2,r2,-1
    3ed0:	ddc00117 	ldw	r23,4(sp)
    3ed4:	a884703a 	and	r2,r21,r2
    3ed8:	1811883a 	mov	r8,r3
    3edc:	124ffc34 	orhi	r9,r2,16368
    3ee0:	25bf0044 	addi	r22,r4,-1023
    3ee4:	d8000815 	stw	zero,32(sp)
    3ee8:	0005883a 	mov	r2,zero
    3eec:	00cffe34 	movhi	r3,16376
    3ef0:	480b883a 	mov	r5,r9
    3ef4:	4009883a 	mov	r4,r8
    3ef8:	180f883a 	mov	r7,r3
    3efc:	100d883a 	mov	r6,r2
    3f00:	00097b00 	call	97b0 <__subdf3>
    3f04:	0218dbf4 	movhi	r8,25455
    3f08:	4210d844 	addi	r8,r8,17249
    3f0c:	024ff4f4 	movhi	r9,16339
    3f10:	4a61e9c4 	addi	r9,r9,-30809
    3f14:	480f883a 	mov	r7,r9
    3f18:	400d883a 	mov	r6,r8
    3f1c:	180b883a 	mov	r5,r3
    3f20:	1009883a 	mov	r4,r2
    3f24:	00098a40 	call	98a4 <__muldf3>
    3f28:	0222d874 	movhi	r8,35681
    3f2c:	42322cc4 	addi	r8,r8,-14157
    3f30:	024ff1f4 	movhi	r9,16327
    3f34:	4a628a04 	addi	r9,r9,-30168
    3f38:	480f883a 	mov	r7,r9
    3f3c:	400d883a 	mov	r6,r8
    3f40:	180b883a 	mov	r5,r3
    3f44:	1009883a 	mov	r4,r2
    3f48:	00098300 	call	9830 <__adddf3>
    3f4c:	b009883a 	mov	r4,r22
    3f50:	1021883a 	mov	r16,r2
    3f54:	1823883a 	mov	r17,r3
    3f58:	000a1680 	call	a168 <__floatsidf>
    3f5c:	021427f4 	movhi	r8,20639
    3f60:	421e7ec4 	addi	r8,r8,31227
    3f64:	024ff4f4 	movhi	r9,16339
    3f68:	4a5104c4 	addi	r9,r9,17427
    3f6c:	480f883a 	mov	r7,r9
    3f70:	400d883a 	mov	r6,r8
    3f74:	180b883a 	mov	r5,r3
    3f78:	1009883a 	mov	r4,r2
    3f7c:	00098a40 	call	98a4 <__muldf3>
    3f80:	180f883a 	mov	r7,r3
    3f84:	880b883a 	mov	r5,r17
    3f88:	100d883a 	mov	r6,r2
    3f8c:	8009883a 	mov	r4,r16
    3f90:	00098300 	call	9830 <__adddf3>
    3f94:	1009883a 	mov	r4,r2
    3f98:	180b883a 	mov	r5,r3
    3f9c:	1021883a 	mov	r16,r2
    3fa0:	1823883a 	mov	r17,r3
    3fa4:	000a2600 	call	a260 <__fixdfsi>
    3fa8:	000d883a 	mov	r6,zero
    3fac:	000f883a 	mov	r7,zero
    3fb0:	8009883a 	mov	r4,r16
    3fb4:	880b883a 	mov	r5,r17
    3fb8:	d8800d15 	stw	r2,52(sp)
    3fbc:	000a0e00 	call	a0e0 <__ltdf2>
    3fc0:	10031716 	blt	r2,zero,4c20 <_dtoa_r+0xe8c>
    3fc4:	d8c00d17 	ldw	r3,52(sp)
    3fc8:	00800584 	movi	r2,22
    3fcc:	10c1482e 	bgeu	r2,r3,44f0 <_dtoa_r+0x75c>
    3fd0:	01000044 	movi	r4,1
    3fd4:	d9000c15 	stw	r4,48(sp)
    3fd8:	bd85c83a 	sub	r2,r23,r22
    3fdc:	11bfffc4 	addi	r6,r2,-1
    3fe0:	30030b16 	blt	r6,zero,4c10 <_dtoa_r+0xe7c>
    3fe4:	d9800a15 	stw	r6,40(sp)
    3fe8:	d8001115 	stw	zero,68(sp)
    3fec:	d8c00d17 	ldw	r3,52(sp)
    3ff0:	1802ff16 	blt	r3,zero,4bf0 <_dtoa_r+0xe5c>
    3ff4:	d9000a17 	ldw	r4,40(sp)
    3ff8:	d8c00915 	stw	r3,36(sp)
    3ffc:	d8001015 	stw	zero,64(sp)
    4000:	20c9883a 	add	r4,r4,r3
    4004:	d9000a15 	stw	r4,40(sp)
    4008:	d9001717 	ldw	r4,92(sp)
    400c:	00800244 	movi	r2,9
    4010:	11004636 	bltu	r2,r4,412c <_dtoa_r+0x398>
    4014:	00800144 	movi	r2,5
    4018:	11020416 	blt	r2,r4,482c <_dtoa_r+0xa98>
    401c:	04400044 	movi	r17,1
    4020:	d8c01717 	ldw	r3,92(sp)
    4024:	00800144 	movi	r2,5
    4028:	10c1ed36 	bltu	r2,r3,47e0 <_dtoa_r+0xa4c>
    402c:	18c5883a 	add	r2,r3,r3
    4030:	1085883a 	add	r2,r2,r2
    4034:	00c00034 	movhi	r3,0
    4038:	18d01204 	addi	r3,r3,16456
    403c:	10c5883a 	add	r2,r2,r3
    4040:	11000017 	ldw	r4,0(r2)
    4044:	2000683a 	jmp	r4
    4048:	00004134 	movhi	zero,260
    404c:	00004134 	movhi	zero,260
    4050:	00004b34 	movhi	zero,300
    4054:	00004b0c 	andi	zero,zero,300
    4058:	00004b50 	cmplti	zero,zero,301
    405c:	00004b5c 	xori	zero,zero,301
    4060:	d9002717 	ldw	r4,156(sp)
    4064:	0089c3c4 	movi	r2,9999
    4068:	20800015 	stw	r2,0(r4)
    406c:	a0001026 	beq	r20,zero,40b0 <_dtoa_r+0x31c>
    4070:	00c00074 	movhi	r3,1
    4074:	18f60b04 	addi	r3,r3,-10196
    4078:	d9802917 	ldw	r6,164(sp)
    407c:	303f7926 	beq	r6,zero,3e64 <_dtoa_r+0xd0>
    4080:	188000c7 	ldb	r2,3(r3)
    4084:	190000c4 	addi	r4,r3,3
    4088:	1000101e 	bne	r2,zero,40cc <_dtoa_r+0x338>
    408c:	d8802917 	ldw	r2,164(sp)
    4090:	11000015 	stw	r4,0(r2)
    4094:	003f7306 	br	3e64 <_dtoa_r+0xd0>
    4098:	00a00034 	movhi	r2,32768
    409c:	10bfffc4 	addi	r2,r2,-1
    40a0:	00c00044 	movi	r3,1
    40a4:	88aa703a 	and	r21,r17,r2
    40a8:	90c00015 	stw	r3,0(r18)
    40ac:	003f5806 	br	3e10 <_dtoa_r+0x7c>
    40b0:	00800434 	movhi	r2,16
    40b4:	10bfffc4 	addi	r2,r2,-1
    40b8:	a884703a 	and	r2,r21,r2
    40bc:	103fec1e 	bne	r2,zero,4070 <_dtoa_r+0x2dc>
    40c0:	00c00074 	movhi	r3,1
    40c4:	18f60804 	addi	r3,r3,-10208
    40c8:	003feb06 	br	4078 <_dtoa_r+0x2e4>
    40cc:	d8802917 	ldw	r2,164(sp)
    40d0:	19000204 	addi	r4,r3,8
    40d4:	11000015 	stw	r4,0(r2)
    40d8:	003f6206 	br	3e64 <_dtoa_r+0xd0>
    40dc:	ddc00117 	ldw	r23,4(sp)
    40e0:	d8800217 	ldw	r2,8(sp)
    40e4:	01000804 	movi	r4,32
    40e8:	b8c10c84 	addi	r3,r23,1074
    40ec:	18a3883a 	add	r17,r3,r2
    40f0:	2441b80e 	bge	r4,r17,47d4 <_dtoa_r+0xa40>
    40f4:	00c01004 	movi	r3,64
    40f8:	1c47c83a 	sub	r3,r3,r17
    40fc:	88bff804 	addi	r2,r17,-32
    4100:	a8c6983a 	sll	r3,r21,r3
    4104:	a084d83a 	srl	r2,r20,r2
    4108:	1888b03a 	or	r4,r3,r2
    410c:	000a3380 	call	a338 <__floatunsidf>
    4110:	1011883a 	mov	r8,r2
    4114:	00bf8434 	movhi	r2,65040
    4118:	01000044 	movi	r4,1
    411c:	10d3883a 	add	r9,r2,r3
    4120:	8dbef344 	addi	r22,r17,-1075
    4124:	d9000815 	stw	r4,32(sp)
    4128:	003f6f06 	br	3ee8 <_dtoa_r+0x154>
    412c:	d8001715 	stw	zero,92(sp)
    4130:	04400044 	movi	r17,1
    4134:	00bfffc4 	movi	r2,-1
    4138:	00c00044 	movi	r3,1
    413c:	d8800e15 	stw	r2,56(sp)
    4140:	d8002615 	stw	zero,152(sp)
    4144:	d8800f15 	stw	r2,60(sp)
    4148:	d8c00b15 	stw	r3,44(sp)
    414c:	1021883a 	mov	r16,r2
    4150:	d8801617 	ldw	r2,88(sp)
    4154:	10001115 	stw	zero,68(r2)
    4158:	d8801617 	ldw	r2,88(sp)
    415c:	11401117 	ldw	r5,68(r2)
    4160:	1009883a 	mov	r4,r2
    4164:	0006d680 	call	6d68 <_Balloc>
    4168:	d8c01617 	ldw	r3,88(sp)
    416c:	d8800515 	stw	r2,20(sp)
    4170:	18801015 	stw	r2,64(r3)
    4174:	00800384 	movi	r2,14
    4178:	14006836 	bltu	r2,r16,431c <_dtoa_r+0x588>
    417c:	8805003a 	cmpeq	r2,r17,zero
    4180:	1000661e 	bne	r2,zero,431c <_dtoa_r+0x588>
    4184:	d9000d17 	ldw	r4,52(sp)
    4188:	0102300e 	bge	zero,r4,4a4c <_dtoa_r+0xcb8>
    418c:	208003cc 	andi	r2,r4,15
    4190:	100490fa 	slli	r2,r2,3
    4194:	2025d13a 	srai	r18,r4,4
    4198:	00c00074 	movhi	r3,1
    419c:	18f61c04 	addi	r3,r3,-10128
    41a0:	10c5883a 	add	r2,r2,r3
    41a4:	90c0040c 	andi	r3,r18,16
    41a8:	14000017 	ldw	r16,0(r2)
    41ac:	14400117 	ldw	r17,4(r2)
    41b0:	18036a1e 	bne	r3,zero,4f5c <_dtoa_r+0x11c8>
    41b4:	05800084 	movi	r22,2
    41b8:	90001026 	beq	r18,zero,41fc <_dtoa_r+0x468>
    41bc:	04c00074 	movhi	r19,1
    41c0:	9cf64e04 	addi	r19,r19,-9928
    41c4:	9080004c 	andi	r2,r18,1
    41c8:	1005003a 	cmpeq	r2,r2,zero
    41cc:	1000081e 	bne	r2,zero,41f0 <_dtoa_r+0x45c>
    41d0:	99800017 	ldw	r6,0(r19)
    41d4:	99c00117 	ldw	r7,4(r19)
    41d8:	880b883a 	mov	r5,r17
    41dc:	8009883a 	mov	r4,r16
    41e0:	00098a40 	call	98a4 <__muldf3>
    41e4:	1021883a 	mov	r16,r2
    41e8:	b5800044 	addi	r22,r22,1
    41ec:	1823883a 	mov	r17,r3
    41f0:	9025d07a 	srai	r18,r18,1
    41f4:	9cc00204 	addi	r19,r19,8
    41f8:	903ff21e 	bne	r18,zero,41c4 <_dtoa_r+0x430>
    41fc:	a80b883a 	mov	r5,r21
    4200:	a009883a 	mov	r4,r20
    4204:	880f883a 	mov	r7,r17
    4208:	800d883a 	mov	r6,r16
    420c:	0009c680 	call	9c68 <__divdf3>
    4210:	1029883a 	mov	r20,r2
    4214:	182b883a 	mov	r21,r3
    4218:	d8c00c17 	ldw	r3,48(sp)
    421c:	1805003a 	cmpeq	r2,r3,zero
    4220:	1000081e 	bne	r2,zero,4244 <_dtoa_r+0x4b0>
    4224:	0005883a 	mov	r2,zero
    4228:	00cffc34 	movhi	r3,16368
    422c:	180f883a 	mov	r7,r3
    4230:	a009883a 	mov	r4,r20
    4234:	a80b883a 	mov	r5,r21
    4238:	100d883a 	mov	r6,r2
    423c:	000a0e00 	call	a0e0 <__ltdf2>
    4240:	1003fe16 	blt	r2,zero,523c <_dtoa_r+0x14a8>
    4244:	b009883a 	mov	r4,r22
    4248:	000a1680 	call	a168 <__floatsidf>
    424c:	180b883a 	mov	r5,r3
    4250:	1009883a 	mov	r4,r2
    4254:	a00d883a 	mov	r6,r20
    4258:	a80f883a 	mov	r7,r21
    425c:	00098a40 	call	98a4 <__muldf3>
    4260:	0011883a 	mov	r8,zero
    4264:	02500734 	movhi	r9,16412
    4268:	1009883a 	mov	r4,r2
    426c:	180b883a 	mov	r5,r3
    4270:	480f883a 	mov	r7,r9
    4274:	400d883a 	mov	r6,r8
    4278:	00098300 	call	9830 <__adddf3>
    427c:	d9000f17 	ldw	r4,60(sp)
    4280:	102d883a 	mov	r22,r2
    4284:	00bf3034 	movhi	r2,64704
    4288:	18b9883a 	add	fp,r3,r2
    428c:	e02f883a 	mov	r23,fp
    4290:	20028f1e 	bne	r4,zero,4cd0 <_dtoa_r+0xf3c>
    4294:	0005883a 	mov	r2,zero
    4298:	00d00534 	movhi	r3,16404
    429c:	a009883a 	mov	r4,r20
    42a0:	a80b883a 	mov	r5,r21
    42a4:	180f883a 	mov	r7,r3
    42a8:	100d883a 	mov	r6,r2
    42ac:	00097b00 	call	97b0 <__subdf3>
    42b0:	1009883a 	mov	r4,r2
    42b4:	e00f883a 	mov	r7,fp
    42b8:	180b883a 	mov	r5,r3
    42bc:	b00d883a 	mov	r6,r22
    42c0:	1025883a 	mov	r18,r2
    42c4:	1827883a 	mov	r19,r3
    42c8:	0009fd00 	call	9fd0 <__gtdf2>
    42cc:	00834f16 	blt	zero,r2,500c <_dtoa_r+0x1278>
    42d0:	e0e0003c 	xorhi	r3,fp,32768
    42d4:	9009883a 	mov	r4,r18
    42d8:	980b883a 	mov	r5,r19
    42dc:	180f883a 	mov	r7,r3
    42e0:	b00d883a 	mov	r6,r22
    42e4:	000a0e00 	call	a0e0 <__ltdf2>
    42e8:	1000080e 	bge	r2,zero,430c <_dtoa_r+0x578>
    42ec:	0027883a 	mov	r19,zero
    42f0:	0025883a 	mov	r18,zero
    42f4:	d8802617 	ldw	r2,152(sp)
    42f8:	df000517 	ldw	fp,20(sp)
    42fc:	d8000615 	stw	zero,24(sp)
    4300:	0084303a 	nor	r2,zero,r2
    4304:	d8800d15 	stw	r2,52(sp)
    4308:	00019b06 	br	4978 <_dtoa_r+0xbe4>
    430c:	d9801217 	ldw	r6,72(sp)
    4310:	d8801317 	ldw	r2,76(sp)
    4314:	3029883a 	mov	r20,r6
    4318:	102b883a 	mov	r21,r2
    431c:	d8c00217 	ldw	r3,8(sp)
    4320:	18008516 	blt	r3,zero,4538 <_dtoa_r+0x7a4>
    4324:	d9000d17 	ldw	r4,52(sp)
    4328:	00800384 	movi	r2,14
    432c:	11008216 	blt	r2,r4,4538 <_dtoa_r+0x7a4>
    4330:	200490fa 	slli	r2,r4,3
    4334:	d9802617 	ldw	r6,152(sp)
    4338:	00c00074 	movhi	r3,1
    433c:	18f61c04 	addi	r3,r3,-10128
    4340:	10c5883a 	add	r2,r2,r3
    4344:	14800017 	ldw	r18,0(r2)
    4348:	14c00117 	ldw	r19,4(r2)
    434c:	30031e16 	blt	r6,zero,4fc8 <_dtoa_r+0x1234>
    4350:	d9000517 	ldw	r4,20(sp)
    4354:	d8c00f17 	ldw	r3,60(sp)
    4358:	a823883a 	mov	r17,r21
    435c:	a021883a 	mov	r16,r20
    4360:	192b883a 	add	r21,r3,r4
    4364:	2039883a 	mov	fp,r4
    4368:	00000f06 	br	43a8 <_dtoa_r+0x614>
    436c:	0005883a 	mov	r2,zero
    4370:	00d00934 	movhi	r3,16420
    4374:	5009883a 	mov	r4,r10
    4378:	580b883a 	mov	r5,r11
    437c:	180f883a 	mov	r7,r3
    4380:	100d883a 	mov	r6,r2
    4384:	00098a40 	call	98a4 <__muldf3>
    4388:	180b883a 	mov	r5,r3
    438c:	000d883a 	mov	r6,zero
    4390:	000f883a 	mov	r7,zero
    4394:	1009883a 	mov	r4,r2
    4398:	1021883a 	mov	r16,r2
    439c:	1823883a 	mov	r17,r3
    43a0:	0009f480 	call	9f48 <__nedf2>
    43a4:	10004526 	beq	r2,zero,44bc <_dtoa_r+0x728>
    43a8:	900d883a 	mov	r6,r18
    43ac:	980f883a 	mov	r7,r19
    43b0:	8009883a 	mov	r4,r16
    43b4:	880b883a 	mov	r5,r17
    43b8:	0009c680 	call	9c68 <__divdf3>
    43bc:	180b883a 	mov	r5,r3
    43c0:	1009883a 	mov	r4,r2
    43c4:	000a2600 	call	a260 <__fixdfsi>
    43c8:	1009883a 	mov	r4,r2
    43cc:	1029883a 	mov	r20,r2
    43d0:	000a1680 	call	a168 <__floatsidf>
    43d4:	180f883a 	mov	r7,r3
    43d8:	9009883a 	mov	r4,r18
    43dc:	980b883a 	mov	r5,r19
    43e0:	100d883a 	mov	r6,r2
    43e4:	00098a40 	call	98a4 <__muldf3>
    43e8:	180f883a 	mov	r7,r3
    43ec:	880b883a 	mov	r5,r17
    43f0:	8009883a 	mov	r4,r16
    43f4:	100d883a 	mov	r6,r2
    43f8:	00097b00 	call	97b0 <__subdf3>
    43fc:	1015883a 	mov	r10,r2
    4400:	a0800c04 	addi	r2,r20,48
    4404:	e0800005 	stb	r2,0(fp)
    4408:	e7000044 	addi	fp,fp,1
    440c:	1817883a 	mov	r11,r3
    4410:	e57fd61e 	bne	fp,r21,436c <_dtoa_r+0x5d8>
    4414:	500d883a 	mov	r6,r10
    4418:	180f883a 	mov	r7,r3
    441c:	5009883a 	mov	r4,r10
    4420:	180b883a 	mov	r5,r3
    4424:	00098300 	call	9830 <__adddf3>
    4428:	100d883a 	mov	r6,r2
    442c:	9009883a 	mov	r4,r18
    4430:	980b883a 	mov	r5,r19
    4434:	180f883a 	mov	r7,r3
    4438:	1021883a 	mov	r16,r2
    443c:	1823883a 	mov	r17,r3
    4440:	000a0e00 	call	a0e0 <__ltdf2>
    4444:	10000816 	blt	r2,zero,4468 <_dtoa_r+0x6d4>
    4448:	980b883a 	mov	r5,r19
    444c:	800d883a 	mov	r6,r16
    4450:	880f883a 	mov	r7,r17
    4454:	9009883a 	mov	r4,r18
    4458:	0009ec00 	call	9ec0 <__eqdf2>
    445c:	1000171e 	bne	r2,zero,44bc <_dtoa_r+0x728>
    4460:	a080004c 	andi	r2,r20,1
    4464:	10001526 	beq	r2,zero,44bc <_dtoa_r+0x728>
    4468:	d8800d17 	ldw	r2,52(sp)
    446c:	d8800415 	stw	r2,16(sp)
    4470:	e009883a 	mov	r4,fp
    4474:	213fffc4 	addi	r4,r4,-1
    4478:	20c00007 	ldb	r3,0(r4)
    447c:	00800e44 	movi	r2,57
    4480:	1880081e 	bne	r3,r2,44a4 <_dtoa_r+0x710>
    4484:	d8800517 	ldw	r2,20(sp)
    4488:	113ffa1e 	bne	r2,r4,4474 <_dtoa_r+0x6e0>
    448c:	d8c00417 	ldw	r3,16(sp)
    4490:	d9800517 	ldw	r6,20(sp)
    4494:	00800c04 	movi	r2,48
    4498:	18c00044 	addi	r3,r3,1
    449c:	d8c00415 	stw	r3,16(sp)
    44a0:	30800005 	stb	r2,0(r6)
    44a4:	20800003 	ldbu	r2,0(r4)
    44a8:	d8c00417 	ldw	r3,16(sp)
    44ac:	27000044 	addi	fp,r4,1
    44b0:	10800044 	addi	r2,r2,1
    44b4:	d8c00d15 	stw	r3,52(sp)
    44b8:	20800005 	stb	r2,0(r4)
    44bc:	d9001617 	ldw	r4,88(sp)
    44c0:	d9400717 	ldw	r5,28(sp)
    44c4:	00067e80 	call	67e8 <_Bfree>
    44c8:	e0000005 	stb	zero,0(fp)
    44cc:	d9800d17 	ldw	r6,52(sp)
    44d0:	d8c02717 	ldw	r3,156(sp)
    44d4:	d9002917 	ldw	r4,164(sp)
    44d8:	30800044 	addi	r2,r6,1
    44dc:	18800015 	stw	r2,0(r3)
    44e0:	20029c26 	beq	r4,zero,4f54 <_dtoa_r+0x11c0>
    44e4:	d8c00517 	ldw	r3,20(sp)
    44e8:	27000015 	stw	fp,0(r4)
    44ec:	003e5d06 	br	3e64 <_dtoa_r+0xd0>
    44f0:	d9800d17 	ldw	r6,52(sp)
    44f4:	00c00074 	movhi	r3,1
    44f8:	18f61c04 	addi	r3,r3,-10128
    44fc:	d9001217 	ldw	r4,72(sp)
    4500:	300490fa 	slli	r2,r6,3
    4504:	d9401317 	ldw	r5,76(sp)
    4508:	10c5883a 	add	r2,r2,r3
    450c:	12000017 	ldw	r8,0(r2)
    4510:	12400117 	ldw	r9,4(r2)
    4514:	400d883a 	mov	r6,r8
    4518:	480f883a 	mov	r7,r9
    451c:	000a0e00 	call	a0e0 <__ltdf2>
    4520:	1000030e 	bge	r2,zero,4530 <_dtoa_r+0x79c>
    4524:	d8800d17 	ldw	r2,52(sp)
    4528:	10bfffc4 	addi	r2,r2,-1
    452c:	d8800d15 	stw	r2,52(sp)
    4530:	d8000c15 	stw	zero,48(sp)
    4534:	003ea806 	br	3fd8 <_dtoa_r+0x244>
    4538:	d9000b17 	ldw	r4,44(sp)
    453c:	202cc03a 	cmpne	r22,r4,zero
    4540:	b000c71e 	bne	r22,zero,4860 <_dtoa_r+0xacc>
    4544:	dc001117 	ldw	r16,68(sp)
    4548:	dc801017 	ldw	r18,64(sp)
    454c:	0027883a 	mov	r19,zero
    4550:	04000b0e 	bge	zero,r16,4580 <_dtoa_r+0x7ec>
    4554:	d8c00a17 	ldw	r3,40(sp)
    4558:	00c0090e 	bge	zero,r3,4580 <_dtoa_r+0x7ec>
    455c:	8005883a 	mov	r2,r16
    4560:	1c011316 	blt	r3,r16,49b0 <_dtoa_r+0xc1c>
    4564:	d9000a17 	ldw	r4,40(sp)
    4568:	d9801117 	ldw	r6,68(sp)
    456c:	80a1c83a 	sub	r16,r16,r2
    4570:	2089c83a 	sub	r4,r4,r2
    4574:	308dc83a 	sub	r6,r6,r2
    4578:	d9000a15 	stw	r4,40(sp)
    457c:	d9801115 	stw	r6,68(sp)
    4580:	d8801017 	ldw	r2,64(sp)
    4584:	0080150e 	bge	zero,r2,45dc <_dtoa_r+0x848>
    4588:	d8c00b17 	ldw	r3,44(sp)
    458c:	1805003a 	cmpeq	r2,r3,zero
    4590:	1001c91e 	bne	r2,zero,4cb8 <_dtoa_r+0xf24>
    4594:	04800e0e 	bge	zero,r18,45d0 <_dtoa_r+0x83c>
    4598:	d9001617 	ldw	r4,88(sp)
    459c:	980b883a 	mov	r5,r19
    45a0:	900d883a 	mov	r6,r18
    45a4:	000759c0 	call	759c <__pow5mult>
    45a8:	d9001617 	ldw	r4,88(sp)
    45ac:	d9800717 	ldw	r6,28(sp)
    45b0:	100b883a 	mov	r5,r2
    45b4:	1027883a 	mov	r19,r2
    45b8:	00072780 	call	7278 <__multiply>
    45bc:	d9001617 	ldw	r4,88(sp)
    45c0:	d9400717 	ldw	r5,28(sp)
    45c4:	1023883a 	mov	r17,r2
    45c8:	00067e80 	call	67e8 <_Bfree>
    45cc:	dc400715 	stw	r17,28(sp)
    45d0:	d9001017 	ldw	r4,64(sp)
    45d4:	248dc83a 	sub	r6,r4,r18
    45d8:	30010e1e 	bne	r6,zero,4a14 <_dtoa_r+0xc80>
    45dc:	d9001617 	ldw	r4,88(sp)
    45e0:	04400044 	movi	r17,1
    45e4:	880b883a 	mov	r5,r17
    45e8:	00074600 	call	7460 <__i2b>
    45ec:	d9800917 	ldw	r6,36(sp)
    45f0:	1025883a 	mov	r18,r2
    45f4:	0180040e 	bge	zero,r6,4608 <_dtoa_r+0x874>
    45f8:	d9001617 	ldw	r4,88(sp)
    45fc:	100b883a 	mov	r5,r2
    4600:	000759c0 	call	759c <__pow5mult>
    4604:	1025883a 	mov	r18,r2
    4608:	d8801717 	ldw	r2,92(sp)
    460c:	8880f30e 	bge	r17,r2,49dc <_dtoa_r+0xc48>
    4610:	0023883a 	mov	r17,zero
    4614:	d9800917 	ldw	r6,36(sp)
    4618:	30019e1e 	bne	r6,zero,4c94 <_dtoa_r+0xf00>
    461c:	00c00044 	movi	r3,1
    4620:	d9000a17 	ldw	r4,40(sp)
    4624:	20c5883a 	add	r2,r4,r3
    4628:	10c007cc 	andi	r3,r2,31
    462c:	1800841e 	bne	r3,zero,4840 <_dtoa_r+0xaac>
    4630:	00800704 	movi	r2,28
    4634:	d9000a17 	ldw	r4,40(sp)
    4638:	d9801117 	ldw	r6,68(sp)
    463c:	80a1883a 	add	r16,r16,r2
    4640:	2089883a 	add	r4,r4,r2
    4644:	308d883a 	add	r6,r6,r2
    4648:	d9000a15 	stw	r4,40(sp)
    464c:	d9801115 	stw	r6,68(sp)
    4650:	d8801117 	ldw	r2,68(sp)
    4654:	0080050e 	bge	zero,r2,466c <_dtoa_r+0x8d8>
    4658:	d9400717 	ldw	r5,28(sp)
    465c:	d9001617 	ldw	r4,88(sp)
    4660:	100d883a 	mov	r6,r2
    4664:	000712c0 	call	712c <__lshift>
    4668:	d8800715 	stw	r2,28(sp)
    466c:	d8c00a17 	ldw	r3,40(sp)
    4670:	00c0050e 	bge	zero,r3,4688 <_dtoa_r+0x8f4>
    4674:	d9001617 	ldw	r4,88(sp)
    4678:	900b883a 	mov	r5,r18
    467c:	180d883a 	mov	r6,r3
    4680:	000712c0 	call	712c <__lshift>
    4684:	1025883a 	mov	r18,r2
    4688:	d9000c17 	ldw	r4,48(sp)
    468c:	2005003a 	cmpeq	r2,r4,zero
    4690:	10016f26 	beq	r2,zero,4c50 <_dtoa_r+0xebc>
    4694:	d9000f17 	ldw	r4,60(sp)
    4698:	0102170e 	bge	zero,r4,4ef8 <_dtoa_r+0x1164>
    469c:	d9800b17 	ldw	r6,44(sp)
    46a0:	3005003a 	cmpeq	r2,r6,zero
    46a4:	1000881e 	bne	r2,zero,48c8 <_dtoa_r+0xb34>
    46a8:	0400050e 	bge	zero,r16,46c0 <_dtoa_r+0x92c>
    46ac:	d9001617 	ldw	r4,88(sp)
    46b0:	980b883a 	mov	r5,r19
    46b4:	800d883a 	mov	r6,r16
    46b8:	000712c0 	call	712c <__lshift>
    46bc:	1027883a 	mov	r19,r2
    46c0:	8804c03a 	cmpne	r2,r17,zero
    46c4:	1002541e 	bne	r2,zero,5018 <_dtoa_r+0x1284>
    46c8:	980b883a 	mov	r5,r19
    46cc:	dd800517 	ldw	r22,20(sp)
    46d0:	dcc00615 	stw	r19,24(sp)
    46d4:	a700004c 	andi	fp,r20,1
    46d8:	2827883a 	mov	r19,r5
    46dc:	d9000717 	ldw	r4,28(sp)
    46e0:	900b883a 	mov	r5,r18
    46e4:	0003b7c0 	call	3b7c <quorem>
    46e8:	d9000717 	ldw	r4,28(sp)
    46ec:	d9400617 	ldw	r5,24(sp)
    46f0:	1023883a 	mov	r17,r2
    46f4:	8dc00c04 	addi	r23,r17,48
    46f8:	00069440 	call	6944 <__mcmp>
    46fc:	d9001617 	ldw	r4,88(sp)
    4700:	900b883a 	mov	r5,r18
    4704:	980d883a 	mov	r6,r19
    4708:	1029883a 	mov	r20,r2
    470c:	0006fa00 	call	6fa0 <__mdiff>
    4710:	102b883a 	mov	r21,r2
    4714:	10800317 	ldw	r2,12(r2)
    4718:	1001281e 	bne	r2,zero,4bbc <_dtoa_r+0xe28>
    471c:	d9000717 	ldw	r4,28(sp)
    4720:	a80b883a 	mov	r5,r21
    4724:	00069440 	call	6944 <__mcmp>
    4728:	d9001617 	ldw	r4,88(sp)
    472c:	1021883a 	mov	r16,r2
    4730:	a80b883a 	mov	r5,r21
    4734:	00067e80 	call	67e8 <_Bfree>
    4738:	8000041e 	bne	r16,zero,474c <_dtoa_r+0x9b8>
    473c:	d8801717 	ldw	r2,92(sp)
    4740:	1000021e 	bne	r2,zero,474c <_dtoa_r+0x9b8>
    4744:	e004c03a 	cmpne	r2,fp,zero
    4748:	10011726 	beq	r2,zero,4ba8 <_dtoa_r+0xe14>
    474c:	a0010616 	blt	r20,zero,4b68 <_dtoa_r+0xdd4>
    4750:	a000041e 	bne	r20,zero,4764 <_dtoa_r+0x9d0>
    4754:	d8c01717 	ldw	r3,92(sp)
    4758:	1800021e 	bne	r3,zero,4764 <_dtoa_r+0x9d0>
    475c:	e004c03a 	cmpne	r2,fp,zero
    4760:	10010126 	beq	r2,zero,4b68 <_dtoa_r+0xdd4>
    4764:	04023d16 	blt	zero,r16,505c <_dtoa_r+0x12c8>
    4768:	b5c00005 	stb	r23,0(r22)
    476c:	d9800517 	ldw	r6,20(sp)
    4770:	d9000f17 	ldw	r4,60(sp)
    4774:	b5800044 	addi	r22,r22,1
    4778:	3105883a 	add	r2,r6,r4
    477c:	b0806526 	beq	r22,r2,4914 <_dtoa_r+0xb80>
    4780:	d9400717 	ldw	r5,28(sp)
    4784:	d9001617 	ldw	r4,88(sp)
    4788:	01800284 	movi	r6,10
    478c:	000f883a 	mov	r7,zero
    4790:	000749c0 	call	749c <__multadd>
    4794:	d8800715 	stw	r2,28(sp)
    4798:	d8800617 	ldw	r2,24(sp)
    479c:	14c10c26 	beq	r2,r19,4bd0 <_dtoa_r+0xe3c>
    47a0:	d9400617 	ldw	r5,24(sp)
    47a4:	d9001617 	ldw	r4,88(sp)
    47a8:	01800284 	movi	r6,10
    47ac:	000f883a 	mov	r7,zero
    47b0:	000749c0 	call	749c <__multadd>
    47b4:	d9001617 	ldw	r4,88(sp)
    47b8:	980b883a 	mov	r5,r19
    47bc:	01800284 	movi	r6,10
    47c0:	000f883a 	mov	r7,zero
    47c4:	d8800615 	stw	r2,24(sp)
    47c8:	000749c0 	call	749c <__multadd>
    47cc:	1027883a 	mov	r19,r2
    47d0:	003fc206 	br	46dc <_dtoa_r+0x948>
    47d4:	2445c83a 	sub	r2,r4,r17
    47d8:	a088983a 	sll	r4,r20,r2
    47dc:	003e4b06 	br	410c <_dtoa_r+0x378>
    47e0:	01bfffc4 	movi	r6,-1
    47e4:	00800044 	movi	r2,1
    47e8:	d9800e15 	stw	r6,56(sp)
    47ec:	d9800f15 	stw	r6,60(sp)
    47f0:	d8800b15 	stw	r2,44(sp)
    47f4:	d8c01617 	ldw	r3,88(sp)
    47f8:	008005c4 	movi	r2,23
    47fc:	18001115 	stw	zero,68(r3)
    4800:	1580082e 	bgeu	r2,r22,4824 <_dtoa_r+0xa90>
    4804:	00c00104 	movi	r3,4
    4808:	0009883a 	mov	r4,zero
    480c:	18c7883a 	add	r3,r3,r3
    4810:	18800504 	addi	r2,r3,20
    4814:	21000044 	addi	r4,r4,1
    4818:	b0bffc2e 	bgeu	r22,r2,480c <_dtoa_r+0xa78>
    481c:	d9801617 	ldw	r6,88(sp)
    4820:	31001115 	stw	r4,68(r6)
    4824:	dc000f17 	ldw	r16,60(sp)
    4828:	003e4b06 	br	4158 <_dtoa_r+0x3c4>
    482c:	d9801717 	ldw	r6,92(sp)
    4830:	0023883a 	mov	r17,zero
    4834:	31bfff04 	addi	r6,r6,-4
    4838:	d9801715 	stw	r6,92(sp)
    483c:	003df806 	br	4020 <_dtoa_r+0x28c>
    4840:	00800804 	movi	r2,32
    4844:	10c9c83a 	sub	r4,r2,r3
    4848:	00c00104 	movi	r3,4
    484c:	19005a16 	blt	r3,r4,49b8 <_dtoa_r+0xc24>
    4850:	008000c4 	movi	r2,3
    4854:	113f7e16 	blt	r2,r4,4650 <_dtoa_r+0x8bc>
    4858:	20800704 	addi	r2,r4,28
    485c:	003f7506 	br	4634 <_dtoa_r+0x8a0>
    4860:	d9801717 	ldw	r6,92(sp)
    4864:	00800044 	movi	r2,1
    4868:	1180a10e 	bge	r2,r6,4af0 <_dtoa_r+0xd5c>
    486c:	d9800f17 	ldw	r6,60(sp)
    4870:	d8c01017 	ldw	r3,64(sp)
    4874:	30bfffc4 	addi	r2,r6,-1
    4878:	1881c616 	blt	r3,r2,4f94 <_dtoa_r+0x1200>
    487c:	18a5c83a 	sub	r18,r3,r2
    4880:	d8800f17 	ldw	r2,60(sp)
    4884:	10026216 	blt	r2,zero,5210 <_dtoa_r+0x147c>
    4888:	dc001117 	ldw	r16,68(sp)
    488c:	1007883a 	mov	r3,r2
    4890:	d9800a17 	ldw	r6,40(sp)
    4894:	d8801117 	ldw	r2,68(sp)
    4898:	d9001617 	ldw	r4,88(sp)
    489c:	30cd883a 	add	r6,r6,r3
    48a0:	10c5883a 	add	r2,r2,r3
    48a4:	01400044 	movi	r5,1
    48a8:	d9800a15 	stw	r6,40(sp)
    48ac:	d8801115 	stw	r2,68(sp)
    48b0:	00074600 	call	7460 <__i2b>
    48b4:	1027883a 	mov	r19,r2
    48b8:	003f2506 	br	4550 <_dtoa_r+0x7bc>
    48bc:	00c00074 	movhi	r3,1
    48c0:	18f5ff04 	addi	r3,r3,-10244
    48c4:	003d6706 	br	3e64 <_dtoa_r+0xd0>
    48c8:	dd800517 	ldw	r22,20(sp)
    48cc:	04000044 	movi	r16,1
    48d0:	00000706 	br	48f0 <_dtoa_r+0xb5c>
    48d4:	d9400717 	ldw	r5,28(sp)
    48d8:	d9001617 	ldw	r4,88(sp)
    48dc:	01800284 	movi	r6,10
    48e0:	000f883a 	mov	r7,zero
    48e4:	000749c0 	call	749c <__multadd>
    48e8:	d8800715 	stw	r2,28(sp)
    48ec:	84000044 	addi	r16,r16,1
    48f0:	d9000717 	ldw	r4,28(sp)
    48f4:	900b883a 	mov	r5,r18
    48f8:	0003b7c0 	call	3b7c <quorem>
    48fc:	15c00c04 	addi	r23,r2,48
    4900:	b5c00005 	stb	r23,0(r22)
    4904:	d8c00f17 	ldw	r3,60(sp)
    4908:	b5800044 	addi	r22,r22,1
    490c:	80fff116 	blt	r16,r3,48d4 <_dtoa_r+0xb40>
    4910:	d8000615 	stw	zero,24(sp)
    4914:	d9400717 	ldw	r5,28(sp)
    4918:	d9001617 	ldw	r4,88(sp)
    491c:	01800044 	movi	r6,1
    4920:	000712c0 	call	712c <__lshift>
    4924:	1009883a 	mov	r4,r2
    4928:	900b883a 	mov	r5,r18
    492c:	d8800715 	stw	r2,28(sp)
    4930:	00069440 	call	6944 <__mcmp>
    4934:	00803c0e 	bge	zero,r2,4a28 <_dtoa_r+0xc94>
    4938:	b009883a 	mov	r4,r22
    493c:	213fffc4 	addi	r4,r4,-1
    4940:	21400003 	ldbu	r5,0(r4)
    4944:	00800e44 	movi	r2,57
    4948:	28c03fcc 	andi	r3,r5,255
    494c:	18c0201c 	xori	r3,r3,128
    4950:	18ffe004 	addi	r3,r3,-128
    4954:	1881981e 	bne	r3,r2,4fb8 <_dtoa_r+0x1224>
    4958:	d9800517 	ldw	r6,20(sp)
    495c:	21bff71e 	bne	r4,r6,493c <_dtoa_r+0xba8>
    4960:	d8800d17 	ldw	r2,52(sp)
    4964:	37000044 	addi	fp,r6,1
    4968:	10800044 	addi	r2,r2,1
    496c:	d8800d15 	stw	r2,52(sp)
    4970:	00800c44 	movi	r2,49
    4974:	30800005 	stb	r2,0(r6)
    4978:	d9001617 	ldw	r4,88(sp)
    497c:	900b883a 	mov	r5,r18
    4980:	00067e80 	call	67e8 <_Bfree>
    4984:	983ecd26 	beq	r19,zero,44bc <_dtoa_r+0x728>
    4988:	d8c00617 	ldw	r3,24(sp)
    498c:	18000426 	beq	r3,zero,49a0 <_dtoa_r+0xc0c>
    4990:	1cc00326 	beq	r3,r19,49a0 <_dtoa_r+0xc0c>
    4994:	d9001617 	ldw	r4,88(sp)
    4998:	180b883a 	mov	r5,r3
    499c:	00067e80 	call	67e8 <_Bfree>
    49a0:	d9001617 	ldw	r4,88(sp)
    49a4:	980b883a 	mov	r5,r19
    49a8:	00067e80 	call	67e8 <_Bfree>
    49ac:	003ec306 	br	44bc <_dtoa_r+0x728>
    49b0:	1805883a 	mov	r2,r3
    49b4:	003eeb06 	br	4564 <_dtoa_r+0x7d0>
    49b8:	d9800a17 	ldw	r6,40(sp)
    49bc:	d8c01117 	ldw	r3,68(sp)
    49c0:	20bfff04 	addi	r2,r4,-4
    49c4:	308d883a 	add	r6,r6,r2
    49c8:	1887883a 	add	r3,r3,r2
    49cc:	80a1883a 	add	r16,r16,r2
    49d0:	d9800a15 	stw	r6,40(sp)
    49d4:	d8c01115 	stw	r3,68(sp)
    49d8:	003f1d06 	br	4650 <_dtoa_r+0x8bc>
    49dc:	a03f0c1e 	bne	r20,zero,4610 <_dtoa_r+0x87c>
    49e0:	00800434 	movhi	r2,16
    49e4:	10bfffc4 	addi	r2,r2,-1
    49e8:	a884703a 	and	r2,r21,r2
    49ec:	103f081e 	bne	r2,zero,4610 <_dtoa_r+0x87c>
    49f0:	a89ffc2c 	andhi	r2,r21,32752
    49f4:	103f0626 	beq	r2,zero,4610 <_dtoa_r+0x87c>
    49f8:	d8c01117 	ldw	r3,68(sp)
    49fc:	d9000a17 	ldw	r4,40(sp)
    4a00:	18c00044 	addi	r3,r3,1
    4a04:	21000044 	addi	r4,r4,1
    4a08:	d8c01115 	stw	r3,68(sp)
    4a0c:	d9000a15 	stw	r4,40(sp)
    4a10:	003f0006 	br	4614 <_dtoa_r+0x880>
    4a14:	d9400717 	ldw	r5,28(sp)
    4a18:	d9001617 	ldw	r4,88(sp)
    4a1c:	000759c0 	call	759c <__pow5mult>
    4a20:	d8800715 	stw	r2,28(sp)
    4a24:	003eed06 	br	45dc <_dtoa_r+0x848>
    4a28:	1000021e 	bne	r2,zero,4a34 <_dtoa_r+0xca0>
    4a2c:	b880004c 	andi	r2,r23,1
    4a30:	103fc11e 	bne	r2,zero,4938 <_dtoa_r+0xba4>
    4a34:	b5bfffc4 	addi	r22,r22,-1
    4a38:	b0c00007 	ldb	r3,0(r22)
    4a3c:	00800c04 	movi	r2,48
    4a40:	18bffc26 	beq	r3,r2,4a34 <_dtoa_r+0xca0>
    4a44:	b7000044 	addi	fp,r22,1
    4a48:	003fcb06 	br	4978 <_dtoa_r+0xbe4>
    4a4c:	d9800d17 	ldw	r6,52(sp)
    4a50:	018fc83a 	sub	r7,zero,r6
    4a54:	3801f726 	beq	r7,zero,5234 <_dtoa_r+0x14a0>
    4a58:	398003cc 	andi	r6,r7,15
    4a5c:	300c90fa 	slli	r6,r6,3
    4a60:	01400074 	movhi	r5,1
    4a64:	29761c04 	addi	r5,r5,-10128
    4a68:	d9001217 	ldw	r4,72(sp)
    4a6c:	314d883a 	add	r6,r6,r5
    4a70:	30c00117 	ldw	r3,4(r6)
    4a74:	30800017 	ldw	r2,0(r6)
    4a78:	d9401317 	ldw	r5,76(sp)
    4a7c:	3821d13a 	srai	r16,r7,4
    4a80:	100d883a 	mov	r6,r2
    4a84:	180f883a 	mov	r7,r3
    4a88:	00098a40 	call	98a4 <__muldf3>
    4a8c:	1011883a 	mov	r8,r2
    4a90:	1813883a 	mov	r9,r3
    4a94:	1029883a 	mov	r20,r2
    4a98:	182b883a 	mov	r21,r3
    4a9c:	8001e526 	beq	r16,zero,5234 <_dtoa_r+0x14a0>
    4aa0:	05800084 	movi	r22,2
    4aa4:	04400074 	movhi	r17,1
    4aa8:	8c764e04 	addi	r17,r17,-9928
    4aac:	8080004c 	andi	r2,r16,1
    4ab0:	1005003a 	cmpeq	r2,r2,zero
    4ab4:	1000081e 	bne	r2,zero,4ad8 <_dtoa_r+0xd44>
    4ab8:	89800017 	ldw	r6,0(r17)
    4abc:	89c00117 	ldw	r7,4(r17)
    4ac0:	480b883a 	mov	r5,r9
    4ac4:	4009883a 	mov	r4,r8
    4ac8:	00098a40 	call	98a4 <__muldf3>
    4acc:	1011883a 	mov	r8,r2
    4ad0:	b5800044 	addi	r22,r22,1
    4ad4:	1813883a 	mov	r9,r3
    4ad8:	8021d07a 	srai	r16,r16,1
    4adc:	8c400204 	addi	r17,r17,8
    4ae0:	803ff21e 	bne	r16,zero,4aac <_dtoa_r+0xd18>
    4ae4:	4029883a 	mov	r20,r8
    4ae8:	482b883a 	mov	r21,r9
    4aec:	003dca06 	br	4218 <_dtoa_r+0x484>
    4af0:	d9000817 	ldw	r4,32(sp)
    4af4:	2005003a 	cmpeq	r2,r4,zero
    4af8:	1001f61e 	bne	r2,zero,52d4 <_dtoa_r+0x1540>
    4afc:	dc001117 	ldw	r16,68(sp)
    4b00:	dc801017 	ldw	r18,64(sp)
    4b04:	18c10cc4 	addi	r3,r3,1075
    4b08:	003f6106 	br	4890 <_dtoa_r+0xafc>
    4b0c:	d8000b15 	stw	zero,44(sp)
    4b10:	d9802617 	ldw	r6,152(sp)
    4b14:	d8c00d17 	ldw	r3,52(sp)
    4b18:	30800044 	addi	r2,r6,1
    4b1c:	18ad883a 	add	r22,r3,r2
    4b20:	b13fffc4 	addi	r4,r22,-1
    4b24:	d9000e15 	stw	r4,56(sp)
    4b28:	0581f60e 	bge	zero,r22,5304 <_dtoa_r+0x1570>
    4b2c:	dd800f15 	stw	r22,60(sp)
    4b30:	003f3006 	br	47f4 <_dtoa_r+0xa60>
    4b34:	d8000b15 	stw	zero,44(sp)
    4b38:	d9002617 	ldw	r4,152(sp)
    4b3c:	0101eb0e 	bge	zero,r4,52ec <_dtoa_r+0x1558>
    4b40:	202d883a 	mov	r22,r4
    4b44:	d9000e15 	stw	r4,56(sp)
    4b48:	d9000f15 	stw	r4,60(sp)
    4b4c:	003f2906 	br	47f4 <_dtoa_r+0xa60>
    4b50:	01800044 	movi	r6,1
    4b54:	d9800b15 	stw	r6,44(sp)
    4b58:	003ff706 	br	4b38 <_dtoa_r+0xda4>
    4b5c:	01000044 	movi	r4,1
    4b60:	d9000b15 	stw	r4,44(sp)
    4b64:	003fea06 	br	4b10 <_dtoa_r+0xd7c>
    4b68:	04000c0e 	bge	zero,r16,4b9c <_dtoa_r+0xe08>
    4b6c:	d9400717 	ldw	r5,28(sp)
    4b70:	d9001617 	ldw	r4,88(sp)
    4b74:	01800044 	movi	r6,1
    4b78:	000712c0 	call	712c <__lshift>
    4b7c:	1009883a 	mov	r4,r2
    4b80:	900b883a 	mov	r5,r18
    4b84:	d8800715 	stw	r2,28(sp)
    4b88:	00069440 	call	6944 <__mcmp>
    4b8c:	0081e00e 	bge	zero,r2,5310 <_dtoa_r+0x157c>
    4b90:	bdc00044 	addi	r23,r23,1
    4b94:	00800e84 	movi	r2,58
    4b98:	b881a226 	beq	r23,r2,5224 <_dtoa_r+0x1490>
    4b9c:	b7000044 	addi	fp,r22,1
    4ba0:	b5c00005 	stb	r23,0(r22)
    4ba4:	003f7406 	br	4978 <_dtoa_r+0xbe4>
    4ba8:	00800e44 	movi	r2,57
    4bac:	b8819d26 	beq	r23,r2,5224 <_dtoa_r+0x1490>
    4bb0:	053ffa0e 	bge	zero,r20,4b9c <_dtoa_r+0xe08>
    4bb4:	8dc00c44 	addi	r23,r17,49
    4bb8:	003ff806 	br	4b9c <_dtoa_r+0xe08>
    4bbc:	d9001617 	ldw	r4,88(sp)
    4bc0:	a80b883a 	mov	r5,r21
    4bc4:	04000044 	movi	r16,1
    4bc8:	00067e80 	call	67e8 <_Bfree>
    4bcc:	003edf06 	br	474c <_dtoa_r+0x9b8>
    4bd0:	d9001617 	ldw	r4,88(sp)
    4bd4:	980b883a 	mov	r5,r19
    4bd8:	01800284 	movi	r6,10
    4bdc:	000f883a 	mov	r7,zero
    4be0:	000749c0 	call	749c <__multadd>
    4be4:	1027883a 	mov	r19,r2
    4be8:	d8800615 	stw	r2,24(sp)
    4bec:	003ebb06 	br	46dc <_dtoa_r+0x948>
    4bf0:	d9801117 	ldw	r6,68(sp)
    4bf4:	d8800d17 	ldw	r2,52(sp)
    4bf8:	d8000915 	stw	zero,36(sp)
    4bfc:	308dc83a 	sub	r6,r6,r2
    4c00:	0087c83a 	sub	r3,zero,r2
    4c04:	d9801115 	stw	r6,68(sp)
    4c08:	d8c01015 	stw	r3,64(sp)
    4c0c:	003cfe06 	br	4008 <_dtoa_r+0x274>
    4c10:	018dc83a 	sub	r6,zero,r6
    4c14:	d9801115 	stw	r6,68(sp)
    4c18:	d8000a15 	stw	zero,40(sp)
    4c1c:	003cf306 	br	3fec <_dtoa_r+0x258>
    4c20:	d9000d17 	ldw	r4,52(sp)
    4c24:	000a1680 	call	a168 <__floatsidf>
    4c28:	880b883a 	mov	r5,r17
    4c2c:	8009883a 	mov	r4,r16
    4c30:	180f883a 	mov	r7,r3
    4c34:	100d883a 	mov	r6,r2
    4c38:	0009f480 	call	9f48 <__nedf2>
    4c3c:	103ce126 	beq	r2,zero,3fc4 <_dtoa_r+0x230>
    4c40:	d9800d17 	ldw	r6,52(sp)
    4c44:	31bfffc4 	addi	r6,r6,-1
    4c48:	d9800d15 	stw	r6,52(sp)
    4c4c:	003cdd06 	br	3fc4 <_dtoa_r+0x230>
    4c50:	d9000717 	ldw	r4,28(sp)
    4c54:	900b883a 	mov	r5,r18
    4c58:	00069440 	call	6944 <__mcmp>
    4c5c:	103e8d0e 	bge	r2,zero,4694 <_dtoa_r+0x900>
    4c60:	d9400717 	ldw	r5,28(sp)
    4c64:	d9001617 	ldw	r4,88(sp)
    4c68:	01800284 	movi	r6,10
    4c6c:	000f883a 	mov	r7,zero
    4c70:	000749c0 	call	749c <__multadd>
    4c74:	d9800d17 	ldw	r6,52(sp)
    4c78:	d8800715 	stw	r2,28(sp)
    4c7c:	31bfffc4 	addi	r6,r6,-1
    4c80:	d9800d15 	stw	r6,52(sp)
    4c84:	b001a71e 	bne	r22,zero,5324 <_dtoa_r+0x1590>
    4c88:	d8800e17 	ldw	r2,56(sp)
    4c8c:	d8800f15 	stw	r2,60(sp)
    4c90:	003e8006 	br	4694 <_dtoa_r+0x900>
    4c94:	90800417 	ldw	r2,16(r18)
    4c98:	1085883a 	add	r2,r2,r2
    4c9c:	1085883a 	add	r2,r2,r2
    4ca0:	1485883a 	add	r2,r2,r18
    4ca4:	11000417 	ldw	r4,16(r2)
    4ca8:	00068100 	call	6810 <__hi0bits>
    4cac:	00c00804 	movi	r3,32
    4cb0:	1887c83a 	sub	r3,r3,r2
    4cb4:	003e5a06 	br	4620 <_dtoa_r+0x88c>
    4cb8:	d9400717 	ldw	r5,28(sp)
    4cbc:	d9801017 	ldw	r6,64(sp)
    4cc0:	d9001617 	ldw	r4,88(sp)
    4cc4:	000759c0 	call	759c <__pow5mult>
    4cc8:	d8800715 	stw	r2,28(sp)
    4ccc:	003e4306 	br	45dc <_dtoa_r+0x848>
    4cd0:	d9800f17 	ldw	r6,60(sp)
    4cd4:	d8800d17 	ldw	r2,52(sp)
    4cd8:	d9800315 	stw	r6,12(sp)
    4cdc:	d8800415 	stw	r2,16(sp)
    4ce0:	d8c00b17 	ldw	r3,44(sp)
    4ce4:	1805003a 	cmpeq	r2,r3,zero
    4ce8:	1000e21e 	bne	r2,zero,5074 <_dtoa_r+0x12e0>
    4cec:	d9000317 	ldw	r4,12(sp)
    4cf0:	0005883a 	mov	r2,zero
    4cf4:	00cff834 	movhi	r3,16352
    4cf8:	200c90fa 	slli	r6,r4,3
    4cfc:	01000074 	movhi	r4,1
    4d00:	21361c04 	addi	r4,r4,-10128
    4d04:	180b883a 	mov	r5,r3
    4d08:	310d883a 	add	r6,r6,r4
    4d0c:	327fff17 	ldw	r9,-4(r6)
    4d10:	323ffe17 	ldw	r8,-8(r6)
    4d14:	1009883a 	mov	r4,r2
    4d18:	480f883a 	mov	r7,r9
    4d1c:	400d883a 	mov	r6,r8
    4d20:	0009c680 	call	9c68 <__divdf3>
    4d24:	180b883a 	mov	r5,r3
    4d28:	b00d883a 	mov	r6,r22
    4d2c:	b80f883a 	mov	r7,r23
    4d30:	1009883a 	mov	r4,r2
    4d34:	00097b00 	call	97b0 <__subdf3>
    4d38:	a80b883a 	mov	r5,r21
    4d3c:	a009883a 	mov	r4,r20
    4d40:	d8c01915 	stw	r3,100(sp)
    4d44:	d8801815 	stw	r2,96(sp)
    4d48:	000a2600 	call	a260 <__fixdfsi>
    4d4c:	1009883a 	mov	r4,r2
    4d50:	1027883a 	mov	r19,r2
    4d54:	000a1680 	call	a168 <__floatsidf>
    4d58:	a80b883a 	mov	r5,r21
    4d5c:	a009883a 	mov	r4,r20
    4d60:	180f883a 	mov	r7,r3
    4d64:	100d883a 	mov	r6,r2
    4d68:	00097b00 	call	97b0 <__subdf3>
    4d6c:	d9801817 	ldw	r6,96(sp)
    4d70:	1823883a 	mov	r17,r3
    4d74:	d8801415 	stw	r2,80(sp)
    4d78:	302d883a 	mov	r22,r6
    4d7c:	d9800517 	ldw	r6,20(sp)
    4d80:	9cc00c04 	addi	r19,r19,48
    4d84:	dc401515 	stw	r17,84(sp)
    4d88:	d8c01917 	ldw	r3,100(sp)
    4d8c:	34c00005 	stb	r19,0(r6)
    4d90:	d8800517 	ldw	r2,20(sp)
    4d94:	d9401917 	ldw	r5,100(sp)
    4d98:	d9801417 	ldw	r6,80(sp)
    4d9c:	b009883a 	mov	r4,r22
    4da0:	880f883a 	mov	r7,r17
    4da4:	182f883a 	mov	r23,r3
    4da8:	17000044 	addi	fp,r2,1
    4dac:	0009fd00 	call	9fd0 <__gtdf2>
    4db0:	00804e16 	blt	zero,r2,4eec <_dtoa_r+0x1158>
    4db4:	d9801417 	ldw	r6,80(sp)
    4db8:	0005883a 	mov	r2,zero
    4dbc:	00cffc34 	movhi	r3,16368
    4dc0:	180b883a 	mov	r5,r3
    4dc4:	880f883a 	mov	r7,r17
    4dc8:	1009883a 	mov	r4,r2
    4dcc:	00097b00 	call	97b0 <__subdf3>
    4dd0:	d9401917 	ldw	r5,100(sp)
    4dd4:	180f883a 	mov	r7,r3
    4dd8:	b009883a 	mov	r4,r22
    4ddc:	100d883a 	mov	r6,r2
    4de0:	0009fd00 	call	9fd0 <__gtdf2>
    4de4:	00bda216 	blt	zero,r2,4470 <_dtoa_r+0x6dc>
    4de8:	d8c00317 	ldw	r3,12(sp)
    4dec:	00800044 	movi	r2,1
    4df0:	10c01216 	blt	r2,r3,4e3c <_dtoa_r+0x10a8>
    4df4:	003d4506 	br	430c <_dtoa_r+0x578>
    4df8:	d9801417 	ldw	r6,80(sp)
    4dfc:	0005883a 	mov	r2,zero
    4e00:	00cffc34 	movhi	r3,16368
    4e04:	180b883a 	mov	r5,r3
    4e08:	880f883a 	mov	r7,r17
    4e0c:	1009883a 	mov	r4,r2
    4e10:	00097b00 	call	97b0 <__subdf3>
    4e14:	d9c01b17 	ldw	r7,108(sp)
    4e18:	180b883a 	mov	r5,r3
    4e1c:	1009883a 	mov	r4,r2
    4e20:	b00d883a 	mov	r6,r22
    4e24:	000a0e00 	call	a0e0 <__ltdf2>
    4e28:	103d9116 	blt	r2,zero,4470 <_dtoa_r+0x6dc>
    4e2c:	d9800517 	ldw	r6,20(sp)
    4e30:	d9000317 	ldw	r4,12(sp)
    4e34:	3105883a 	add	r2,r6,r4
    4e38:	e0bd3426 	beq	fp,r2,430c <_dtoa_r+0x578>
    4e3c:	04500934 	movhi	r17,16420
    4e40:	0021883a 	mov	r16,zero
    4e44:	b80b883a 	mov	r5,r23
    4e48:	b009883a 	mov	r4,r22
    4e4c:	800d883a 	mov	r6,r16
    4e50:	880f883a 	mov	r7,r17
    4e54:	00098a40 	call	98a4 <__muldf3>
    4e58:	d9401517 	ldw	r5,84(sp)
    4e5c:	d9001417 	ldw	r4,80(sp)
    4e60:	880f883a 	mov	r7,r17
    4e64:	000d883a 	mov	r6,zero
    4e68:	d8801a15 	stw	r2,104(sp)
    4e6c:	d8c01b15 	stw	r3,108(sp)
    4e70:	00098a40 	call	98a4 <__muldf3>
    4e74:	180b883a 	mov	r5,r3
    4e78:	1009883a 	mov	r4,r2
    4e7c:	1823883a 	mov	r17,r3
    4e80:	1021883a 	mov	r16,r2
    4e84:	000a2600 	call	a260 <__fixdfsi>
    4e88:	1009883a 	mov	r4,r2
    4e8c:	102b883a 	mov	r21,r2
    4e90:	000a1680 	call	a168 <__floatsidf>
    4e94:	880b883a 	mov	r5,r17
    4e98:	8009883a 	mov	r4,r16
    4e9c:	180f883a 	mov	r7,r3
    4ea0:	100d883a 	mov	r6,r2
    4ea4:	00097b00 	call	97b0 <__subdf3>
    4ea8:	1021883a 	mov	r16,r2
    4eac:	d9001b17 	ldw	r4,108(sp)
    4eb0:	1823883a 	mov	r17,r3
    4eb4:	dc001415 	stw	r16,80(sp)
    4eb8:	ad400c04 	addi	r21,r21,48
    4ebc:	dc401515 	stw	r17,84(sp)
    4ec0:	d8801a17 	ldw	r2,104(sp)
    4ec4:	e5400005 	stb	r21,0(fp)
    4ec8:	202f883a 	mov	r23,r4
    4ecc:	d9c01b17 	ldw	r7,108(sp)
    4ed0:	d9001417 	ldw	r4,80(sp)
    4ed4:	880b883a 	mov	r5,r17
    4ed8:	100d883a 	mov	r6,r2
    4edc:	102d883a 	mov	r22,r2
    4ee0:	e7000044 	addi	fp,fp,1
    4ee4:	000a0e00 	call	a0e0 <__ltdf2>
    4ee8:	103fc30e 	bge	r2,zero,4df8 <_dtoa_r+0x1064>
    4eec:	d9000417 	ldw	r4,16(sp)
    4ef0:	d9000d15 	stw	r4,52(sp)
    4ef4:	003d7106 	br	44bc <_dtoa_r+0x728>
    4ef8:	d9801717 	ldw	r6,92(sp)
    4efc:	00800084 	movi	r2,2
    4f00:	11bde60e 	bge	r2,r6,469c <_dtoa_r+0x908>
    4f04:	203cfb1e 	bne	r4,zero,42f4 <_dtoa_r+0x560>
    4f08:	d9001617 	ldw	r4,88(sp)
    4f0c:	900b883a 	mov	r5,r18
    4f10:	01800144 	movi	r6,5
    4f14:	000f883a 	mov	r7,zero
    4f18:	000749c0 	call	749c <__multadd>
    4f1c:	d9000717 	ldw	r4,28(sp)
    4f20:	100b883a 	mov	r5,r2
    4f24:	1025883a 	mov	r18,r2
    4f28:	00069440 	call	6944 <__mcmp>
    4f2c:	00bcf10e 	bge	zero,r2,42f4 <_dtoa_r+0x560>
    4f30:	d8c00d17 	ldw	r3,52(sp)
    4f34:	d9000517 	ldw	r4,20(sp)
    4f38:	d8000615 	stw	zero,24(sp)
    4f3c:	18c00044 	addi	r3,r3,1
    4f40:	d8c00d15 	stw	r3,52(sp)
    4f44:	00800c44 	movi	r2,49
    4f48:	27000044 	addi	fp,r4,1
    4f4c:	20800005 	stb	r2,0(r4)
    4f50:	003e8906 	br	4978 <_dtoa_r+0xbe4>
    4f54:	d8c00517 	ldw	r3,20(sp)
    4f58:	003bc206 	br	3e64 <_dtoa_r+0xd0>
    4f5c:	01800074 	movhi	r6,1
    4f60:	31b64e04 	addi	r6,r6,-9928
    4f64:	30c00917 	ldw	r3,36(r6)
    4f68:	30800817 	ldw	r2,32(r6)
    4f6c:	d9001217 	ldw	r4,72(sp)
    4f70:	d9401317 	ldw	r5,76(sp)
    4f74:	180f883a 	mov	r7,r3
    4f78:	100d883a 	mov	r6,r2
    4f7c:	0009c680 	call	9c68 <__divdf3>
    4f80:	948003cc 	andi	r18,r18,15
    4f84:	058000c4 	movi	r22,3
    4f88:	1029883a 	mov	r20,r2
    4f8c:	182b883a 	mov	r21,r3
    4f90:	003c8906 	br	41b8 <_dtoa_r+0x424>
    4f94:	d9001017 	ldw	r4,64(sp)
    4f98:	d9800917 	ldw	r6,36(sp)
    4f9c:	0025883a 	mov	r18,zero
    4fa0:	1105c83a 	sub	r2,r2,r4
    4fa4:	2089883a 	add	r4,r4,r2
    4fa8:	308d883a 	add	r6,r6,r2
    4fac:	d9001015 	stw	r4,64(sp)
    4fb0:	d9800915 	stw	r6,36(sp)
    4fb4:	003e3206 	br	4880 <_dtoa_r+0xaec>
    4fb8:	28800044 	addi	r2,r5,1
    4fbc:	27000044 	addi	fp,r4,1
    4fc0:	20800005 	stb	r2,0(r4)
    4fc4:	003e6c06 	br	4978 <_dtoa_r+0xbe4>
    4fc8:	d8800f17 	ldw	r2,60(sp)
    4fcc:	00bce016 	blt	zero,r2,4350 <_dtoa_r+0x5bc>
    4fd0:	d9800f17 	ldw	r6,60(sp)
    4fd4:	303cc51e 	bne	r6,zero,42ec <_dtoa_r+0x558>
    4fd8:	0005883a 	mov	r2,zero
    4fdc:	00d00534 	movhi	r3,16404
    4fe0:	980b883a 	mov	r5,r19
    4fe4:	180f883a 	mov	r7,r3
    4fe8:	9009883a 	mov	r4,r18
    4fec:	100d883a 	mov	r6,r2
    4ff0:	00098a40 	call	98a4 <__muldf3>
    4ff4:	180b883a 	mov	r5,r3
    4ff8:	a80f883a 	mov	r7,r21
    4ffc:	1009883a 	mov	r4,r2
    5000:	a00d883a 	mov	r6,r20
    5004:	000a0580 	call	a058 <__gedf2>
    5008:	103cb80e 	bge	r2,zero,42ec <_dtoa_r+0x558>
    500c:	0027883a 	mov	r19,zero
    5010:	0025883a 	mov	r18,zero
    5014:	003fc606 	br	4f30 <_dtoa_r+0x119c>
    5018:	99400117 	ldw	r5,4(r19)
    501c:	d9001617 	ldw	r4,88(sp)
    5020:	0006d680 	call	6d68 <_Balloc>
    5024:	99800417 	ldw	r6,16(r19)
    5028:	11000304 	addi	r4,r2,12
    502c:	99400304 	addi	r5,r19,12
    5030:	318d883a 	add	r6,r6,r6
    5034:	318d883a 	add	r6,r6,r6
    5038:	31800204 	addi	r6,r6,8
    503c:	1023883a 	mov	r17,r2
    5040:	00065d00 	call	65d0 <memcpy>
    5044:	d9001617 	ldw	r4,88(sp)
    5048:	880b883a 	mov	r5,r17
    504c:	01800044 	movi	r6,1
    5050:	000712c0 	call	712c <__lshift>
    5054:	100b883a 	mov	r5,r2
    5058:	003d9c06 	br	46cc <_dtoa_r+0x938>
    505c:	00800e44 	movi	r2,57
    5060:	b8807026 	beq	r23,r2,5224 <_dtoa_r+0x1490>
    5064:	b8800044 	addi	r2,r23,1
    5068:	b7000044 	addi	fp,r22,1
    506c:	b0800005 	stb	r2,0(r22)
    5070:	003e4106 	br	4978 <_dtoa_r+0xbe4>
    5074:	d8800317 	ldw	r2,12(sp)
    5078:	01800074 	movhi	r6,1
    507c:	31b61c04 	addi	r6,r6,-10128
    5080:	b009883a 	mov	r4,r22
    5084:	100e90fa 	slli	r7,r2,3
    5088:	b80b883a 	mov	r5,r23
    508c:	398f883a 	add	r7,r7,r6
    5090:	38bffe17 	ldw	r2,-8(r7)
    5094:	d9800517 	ldw	r6,20(sp)
    5098:	38ffff17 	ldw	r3,-4(r7)
    509c:	37000044 	addi	fp,r6,1
    50a0:	180f883a 	mov	r7,r3
    50a4:	100d883a 	mov	r6,r2
    50a8:	00098a40 	call	98a4 <__muldf3>
    50ac:	a80b883a 	mov	r5,r21
    50b0:	a009883a 	mov	r4,r20
    50b4:	182f883a 	mov	r23,r3
    50b8:	102d883a 	mov	r22,r2
    50bc:	000a2600 	call	a260 <__fixdfsi>
    50c0:	1009883a 	mov	r4,r2
    50c4:	1027883a 	mov	r19,r2
    50c8:	000a1680 	call	a168 <__floatsidf>
    50cc:	a80b883a 	mov	r5,r21
    50d0:	a009883a 	mov	r4,r20
    50d4:	180f883a 	mov	r7,r3
    50d8:	100d883a 	mov	r6,r2
    50dc:	00097b00 	call	97b0 <__subdf3>
    50e0:	180b883a 	mov	r5,r3
    50e4:	d8c00517 	ldw	r3,20(sp)
    50e8:	9cc00c04 	addi	r19,r19,48
    50ec:	1009883a 	mov	r4,r2
    50f0:	1cc00005 	stb	r19,0(r3)
    50f4:	2021883a 	mov	r16,r4
    50f8:	d9000317 	ldw	r4,12(sp)
    50fc:	00800044 	movi	r2,1
    5100:	2823883a 	mov	r17,r5
    5104:	20802226 	beq	r4,r2,5190 <_dtoa_r+0x13fc>
    5108:	1029883a 	mov	r20,r2
    510c:	0005883a 	mov	r2,zero
    5110:	00d00934 	movhi	r3,16420
    5114:	180f883a 	mov	r7,r3
    5118:	100d883a 	mov	r6,r2
    511c:	880b883a 	mov	r5,r17
    5120:	8009883a 	mov	r4,r16
    5124:	00098a40 	call	98a4 <__muldf3>
    5128:	180b883a 	mov	r5,r3
    512c:	1009883a 	mov	r4,r2
    5130:	1823883a 	mov	r17,r3
    5134:	1021883a 	mov	r16,r2
    5138:	000a2600 	call	a260 <__fixdfsi>
    513c:	1009883a 	mov	r4,r2
    5140:	102b883a 	mov	r21,r2
    5144:	000a1680 	call	a168 <__floatsidf>
    5148:	880b883a 	mov	r5,r17
    514c:	8009883a 	mov	r4,r16
    5150:	180f883a 	mov	r7,r3
    5154:	100d883a 	mov	r6,r2
    5158:	00097b00 	call	97b0 <__subdf3>
    515c:	180b883a 	mov	r5,r3
    5160:	d8c00517 	ldw	r3,20(sp)
    5164:	1009883a 	mov	r4,r2
    5168:	ad400c04 	addi	r21,r21,48
    516c:	1d05883a 	add	r2,r3,r20
    5170:	15400005 	stb	r21,0(r2)
    5174:	2021883a 	mov	r16,r4
    5178:	d9000317 	ldw	r4,12(sp)
    517c:	a5000044 	addi	r20,r20,1
    5180:	2823883a 	mov	r17,r5
    5184:	a13fe11e 	bne	r20,r4,510c <_dtoa_r+0x1378>
    5188:	e505883a 	add	r2,fp,r20
    518c:	173fffc4 	addi	fp,r2,-1
    5190:	0025883a 	mov	r18,zero
    5194:	04cff834 	movhi	r19,16352
    5198:	b009883a 	mov	r4,r22
    519c:	b80b883a 	mov	r5,r23
    51a0:	900d883a 	mov	r6,r18
    51a4:	980f883a 	mov	r7,r19
    51a8:	00098300 	call	9830 <__adddf3>
    51ac:	180b883a 	mov	r5,r3
    51b0:	1009883a 	mov	r4,r2
    51b4:	800d883a 	mov	r6,r16
    51b8:	880f883a 	mov	r7,r17
    51bc:	000a0e00 	call	a0e0 <__ltdf2>
    51c0:	103cab16 	blt	r2,zero,4470 <_dtoa_r+0x6dc>
    51c4:	0009883a 	mov	r4,zero
    51c8:	980b883a 	mov	r5,r19
    51cc:	b80f883a 	mov	r7,r23
    51d0:	b00d883a 	mov	r6,r22
    51d4:	00097b00 	call	97b0 <__subdf3>
    51d8:	180b883a 	mov	r5,r3
    51dc:	880f883a 	mov	r7,r17
    51e0:	1009883a 	mov	r4,r2
    51e4:	800d883a 	mov	r6,r16
    51e8:	0009fd00 	call	9fd0 <__gtdf2>
    51ec:	00bc470e 	bge	zero,r2,430c <_dtoa_r+0x578>
    51f0:	00c00c04 	movi	r3,48
    51f4:	e73fffc4 	addi	fp,fp,-1
    51f8:	e0800007 	ldb	r2,0(fp)
    51fc:	10fffd26 	beq	r2,r3,51f4 <_dtoa_r+0x1460>
    5200:	d9800417 	ldw	r6,16(sp)
    5204:	e7000044 	addi	fp,fp,1
    5208:	d9800d15 	stw	r6,52(sp)
    520c:	003cab06 	br	44bc <_dtoa_r+0x728>
    5210:	d8c00f17 	ldw	r3,60(sp)
    5214:	d9001117 	ldw	r4,68(sp)
    5218:	20e1c83a 	sub	r16,r4,r3
    521c:	0007883a 	mov	r3,zero
    5220:	003d9b06 	br	4890 <_dtoa_r+0xafc>
    5224:	00800e44 	movi	r2,57
    5228:	b0800005 	stb	r2,0(r22)
    522c:	b5800044 	addi	r22,r22,1
    5230:	003dc106 	br	4938 <_dtoa_r+0xba4>
    5234:	05800084 	movi	r22,2
    5238:	003bf706 	br	4218 <_dtoa_r+0x484>
    523c:	d9000f17 	ldw	r4,60(sp)
    5240:	013c000e 	bge	zero,r4,4244 <_dtoa_r+0x4b0>
    5244:	d9800e17 	ldw	r6,56(sp)
    5248:	01bc300e 	bge	zero,r6,430c <_dtoa_r+0x578>
    524c:	0005883a 	mov	r2,zero
    5250:	00d00934 	movhi	r3,16420
    5254:	a80b883a 	mov	r5,r21
    5258:	180f883a 	mov	r7,r3
    525c:	a009883a 	mov	r4,r20
    5260:	100d883a 	mov	r6,r2
    5264:	00098a40 	call	98a4 <__muldf3>
    5268:	b1000044 	addi	r4,r22,1
    526c:	1021883a 	mov	r16,r2
    5270:	1823883a 	mov	r17,r3
    5274:	000a1680 	call	a168 <__floatsidf>
    5278:	880b883a 	mov	r5,r17
    527c:	8009883a 	mov	r4,r16
    5280:	180f883a 	mov	r7,r3
    5284:	100d883a 	mov	r6,r2
    5288:	00098a40 	call	98a4 <__muldf3>
    528c:	0011883a 	mov	r8,zero
    5290:	02500734 	movhi	r9,16412
    5294:	180b883a 	mov	r5,r3
    5298:	480f883a 	mov	r7,r9
    529c:	1009883a 	mov	r4,r2
    52a0:	400d883a 	mov	r6,r8
    52a4:	00098300 	call	9830 <__adddf3>
    52a8:	102d883a 	mov	r22,r2
    52ac:	00bf3034 	movhi	r2,64704
    52b0:	10ef883a 	add	r23,r2,r3
    52b4:	d8800d17 	ldw	r2,52(sp)
    52b8:	d8c00e17 	ldw	r3,56(sp)
    52bc:	8029883a 	mov	r20,r16
    52c0:	10bfffc4 	addi	r2,r2,-1
    52c4:	882b883a 	mov	r21,r17
    52c8:	d8800415 	stw	r2,16(sp)
    52cc:	d8c00315 	stw	r3,12(sp)
    52d0:	003e8306 	br	4ce0 <_dtoa_r+0xf4c>
    52d4:	d8800117 	ldw	r2,4(sp)
    52d8:	dc001117 	ldw	r16,68(sp)
    52dc:	dc801017 	ldw	r18,64(sp)
    52e0:	00c00d84 	movi	r3,54
    52e4:	1887c83a 	sub	r3,r3,r2
    52e8:	003d6906 	br	4890 <_dtoa_r+0xafc>
    52ec:	01800044 	movi	r6,1
    52f0:	3021883a 	mov	r16,r6
    52f4:	d9800f15 	stw	r6,60(sp)
    52f8:	d9802615 	stw	r6,152(sp)
    52fc:	d9800e15 	stw	r6,56(sp)
    5300:	003b9306 	br	4150 <_dtoa_r+0x3bc>
    5304:	b021883a 	mov	r16,r22
    5308:	dd800f15 	stw	r22,60(sp)
    530c:	003b9006 	br	4150 <_dtoa_r+0x3bc>
    5310:	103e221e 	bne	r2,zero,4b9c <_dtoa_r+0xe08>
    5314:	b880004c 	andi	r2,r23,1
    5318:	1005003a 	cmpeq	r2,r2,zero
    531c:	103e1f1e 	bne	r2,zero,4b9c <_dtoa_r+0xe08>
    5320:	003e1b06 	br	4b90 <_dtoa_r+0xdfc>
    5324:	d9001617 	ldw	r4,88(sp)
    5328:	980b883a 	mov	r5,r19
    532c:	01800284 	movi	r6,10
    5330:	000f883a 	mov	r7,zero
    5334:	000749c0 	call	749c <__multadd>
    5338:	d8c00e17 	ldw	r3,56(sp)
    533c:	1027883a 	mov	r19,r2
    5340:	d8c00f15 	stw	r3,60(sp)
    5344:	003cd306 	br	4694 <_dtoa_r+0x900>

00005348 <_fflush_r>:
    5348:	defffb04 	addi	sp,sp,-20
    534c:	dcc00315 	stw	r19,12(sp)
    5350:	dc800215 	stw	r18,8(sp)
    5354:	dfc00415 	stw	ra,16(sp)
    5358:	dc400115 	stw	r17,4(sp)
    535c:	dc000015 	stw	r16,0(sp)
    5360:	2027883a 	mov	r19,r4
    5364:	2825883a 	mov	r18,r5
    5368:	20000226 	beq	r4,zero,5374 <_fflush_r+0x2c>
    536c:	20800e17 	ldw	r2,56(r4)
    5370:	10005626 	beq	r2,zero,54cc <_fflush_r+0x184>
    5374:	9100030b 	ldhu	r4,12(r18)
    5378:	20ffffcc 	andi	r3,r4,65535
    537c:	18e0001c 	xori	r3,r3,32768
    5380:	18e00004 	addi	r3,r3,-32768
    5384:	1880020c 	andi	r2,r3,8
    5388:	1000261e 	bne	r2,zero,5424 <_fflush_r+0xdc>
    538c:	90c00117 	ldw	r3,4(r18)
    5390:	20820014 	ori	r2,r4,2048
    5394:	9080030d 	sth	r2,12(r18)
    5398:	1009883a 	mov	r4,r2
    539c:	00c0400e 	bge	zero,r3,54a0 <_fflush_r+0x158>
    53a0:	92000a17 	ldw	r8,40(r18)
    53a4:	40004026 	beq	r8,zero,54a8 <_fflush_r+0x160>
    53a8:	2084000c 	andi	r2,r4,4096
    53ac:	10005326 	beq	r2,zero,54fc <_fflush_r+0x1b4>
    53b0:	94001417 	ldw	r16,80(r18)
    53b4:	9080030b 	ldhu	r2,12(r18)
    53b8:	1080010c 	andi	r2,r2,4
    53bc:	1000481e 	bne	r2,zero,54e0 <_fflush_r+0x198>
    53c0:	91400717 	ldw	r5,28(r18)
    53c4:	9809883a 	mov	r4,r19
    53c8:	800d883a 	mov	r6,r16
    53cc:	000f883a 	mov	r7,zero
    53d0:	403ee83a 	callr	r8
    53d4:	8080261e 	bne	r16,r2,5470 <_fflush_r+0x128>
    53d8:	9080030b 	ldhu	r2,12(r18)
    53dc:	91000417 	ldw	r4,16(r18)
    53e0:	90000115 	stw	zero,4(r18)
    53e4:	10bdffcc 	andi	r2,r2,63487
    53e8:	10ffffcc 	andi	r3,r2,65535
    53ec:	18c4000c 	andi	r3,r3,4096
    53f0:	9080030d 	sth	r2,12(r18)
    53f4:	91000015 	stw	r4,0(r18)
    53f8:	18002b26 	beq	r3,zero,54a8 <_fflush_r+0x160>
    53fc:	0007883a 	mov	r3,zero
    5400:	1805883a 	mov	r2,r3
    5404:	94001415 	stw	r16,80(r18)
    5408:	dfc00417 	ldw	ra,16(sp)
    540c:	dcc00317 	ldw	r19,12(sp)
    5410:	dc800217 	ldw	r18,8(sp)
    5414:	dc400117 	ldw	r17,4(sp)
    5418:	dc000017 	ldw	r16,0(sp)
    541c:	dec00504 	addi	sp,sp,20
    5420:	f800283a 	ret
    5424:	94400417 	ldw	r17,16(r18)
    5428:	88001f26 	beq	r17,zero,54a8 <_fflush_r+0x160>
    542c:	90800017 	ldw	r2,0(r18)
    5430:	18c000cc 	andi	r3,r3,3
    5434:	94400015 	stw	r17,0(r18)
    5438:	1461c83a 	sub	r16,r2,r17
    543c:	18002526 	beq	r3,zero,54d4 <_fflush_r+0x18c>
    5440:	0005883a 	mov	r2,zero
    5444:	90800215 	stw	r2,8(r18)
    5448:	0400170e 	bge	zero,r16,54a8 <_fflush_r+0x160>
    544c:	90c00917 	ldw	r3,36(r18)
    5450:	91400717 	ldw	r5,28(r18)
    5454:	880d883a 	mov	r6,r17
    5458:	800f883a 	mov	r7,r16
    545c:	9809883a 	mov	r4,r19
    5460:	183ee83a 	callr	r3
    5464:	88a3883a 	add	r17,r17,r2
    5468:	80a1c83a 	sub	r16,r16,r2
    546c:	00bff616 	blt	zero,r2,5448 <_fflush_r+0x100>
    5470:	9080030b 	ldhu	r2,12(r18)
    5474:	00ffffc4 	movi	r3,-1
    5478:	10801014 	ori	r2,r2,64
    547c:	9080030d 	sth	r2,12(r18)
    5480:	1805883a 	mov	r2,r3
    5484:	dfc00417 	ldw	ra,16(sp)
    5488:	dcc00317 	ldw	r19,12(sp)
    548c:	dc800217 	ldw	r18,8(sp)
    5490:	dc400117 	ldw	r17,4(sp)
    5494:	dc000017 	ldw	r16,0(sp)
    5498:	dec00504 	addi	sp,sp,20
    549c:	f800283a 	ret
    54a0:	90800f17 	ldw	r2,60(r18)
    54a4:	00bfbe16 	blt	zero,r2,53a0 <_fflush_r+0x58>
    54a8:	0007883a 	mov	r3,zero
    54ac:	1805883a 	mov	r2,r3
    54b0:	dfc00417 	ldw	ra,16(sp)
    54b4:	dcc00317 	ldw	r19,12(sp)
    54b8:	dc800217 	ldw	r18,8(sp)
    54bc:	dc400117 	ldw	r17,4(sp)
    54c0:	dc000017 	ldw	r16,0(sp)
    54c4:	dec00504 	addi	sp,sp,20
    54c8:	f800283a 	ret
    54cc:	00055e00 	call	55e0 <__sinit>
    54d0:	003fa806 	br	5374 <_fflush_r+0x2c>
    54d4:	90800517 	ldw	r2,20(r18)
    54d8:	90800215 	stw	r2,8(r18)
    54dc:	003fda06 	br	5448 <_fflush_r+0x100>
    54e0:	90800117 	ldw	r2,4(r18)
    54e4:	90c00c17 	ldw	r3,48(r18)
    54e8:	80a1c83a 	sub	r16,r16,r2
    54ec:	183fb426 	beq	r3,zero,53c0 <_fflush_r+0x78>
    54f0:	90800f17 	ldw	r2,60(r18)
    54f4:	80a1c83a 	sub	r16,r16,r2
    54f8:	003fb106 	br	53c0 <_fflush_r+0x78>
    54fc:	91400717 	ldw	r5,28(r18)
    5500:	9809883a 	mov	r4,r19
    5504:	000d883a 	mov	r6,zero
    5508:	01c00044 	movi	r7,1
    550c:	403ee83a 	callr	r8
    5510:	1021883a 	mov	r16,r2
    5514:	00bfffc4 	movi	r2,-1
    5518:	80800226 	beq	r16,r2,5524 <_fflush_r+0x1dc>
    551c:	92000a17 	ldw	r8,40(r18)
    5520:	003fa406 	br	53b4 <_fflush_r+0x6c>
    5524:	98c00017 	ldw	r3,0(r19)
    5528:	00800744 	movi	r2,29
    552c:	18bfde26 	beq	r3,r2,54a8 <_fflush_r+0x160>
    5530:	9080030b 	ldhu	r2,12(r18)
    5534:	8007883a 	mov	r3,r16
    5538:	10801014 	ori	r2,r2,64
    553c:	9080030d 	sth	r2,12(r18)
    5540:	003fcf06 	br	5480 <_fflush_r+0x138>

00005544 <fflush>:
    5544:	01400034 	movhi	r5,0
    5548:	2954d204 	addi	r5,r5,21320
    554c:	2007883a 	mov	r3,r4
    5550:	20000526 	beq	r4,zero,5568 <fflush+0x24>
    5554:	00800074 	movhi	r2,1
    5558:	10bd3c04 	addi	r2,r2,-2832
    555c:	11000017 	ldw	r4,0(r2)
    5560:	180b883a 	mov	r5,r3
    5564:	00053481 	jmpi	5348 <_fflush_r>
    5568:	00800074 	movhi	r2,1
    556c:	10bd3d04 	addi	r2,r2,-2828
    5570:	11000017 	ldw	r4,0(r2)
    5574:	00061141 	jmpi	6114 <_fwalk_reent>

00005578 <std>:
    5578:	00800074 	movhi	r2,1
    557c:	10a00b04 	addi	r2,r2,-32724
    5580:	20800b15 	stw	r2,44(r4)
    5584:	00800074 	movhi	r2,1
    5588:	10a04604 	addi	r2,r2,-32488
    558c:	20800815 	stw	r2,32(r4)
    5590:	00c00074 	movhi	r3,1
    5594:	18e02704 	addi	r3,r3,-32612
    5598:	00800074 	movhi	r2,1
    559c:	10a00d04 	addi	r2,r2,-32716
    55a0:	2140030d 	sth	r5,12(r4)
    55a4:	2180038d 	sth	r6,14(r4)
    55a8:	20c00915 	stw	r3,36(r4)
    55ac:	20800a15 	stw	r2,40(r4)
    55b0:	20000015 	stw	zero,0(r4)
    55b4:	20000115 	stw	zero,4(r4)
    55b8:	20000215 	stw	zero,8(r4)
    55bc:	20000415 	stw	zero,16(r4)
    55c0:	20000515 	stw	zero,20(r4)
    55c4:	20000615 	stw	zero,24(r4)
    55c8:	21000715 	stw	r4,28(r4)
    55cc:	f800283a 	ret

000055d0 <__sfp_lock_acquire>:
    55d0:	f800283a 	ret

000055d4 <__sfp_lock_release>:
    55d4:	f800283a 	ret

000055d8 <__sinit_lock_acquire>:
    55d8:	f800283a 	ret

000055dc <__sinit_lock_release>:
    55dc:	f800283a 	ret

000055e0 <__sinit>:
    55e0:	20800e17 	ldw	r2,56(r4)
    55e4:	defffd04 	addi	sp,sp,-12
    55e8:	dc400115 	stw	r17,4(sp)
    55ec:	dc000015 	stw	r16,0(sp)
    55f0:	dfc00215 	stw	ra,8(sp)
    55f4:	04400044 	movi	r17,1
    55f8:	01400104 	movi	r5,4
    55fc:	000d883a 	mov	r6,zero
    5600:	2021883a 	mov	r16,r4
    5604:	2200bb04 	addi	r8,r4,748
    5608:	200f883a 	mov	r7,r4
    560c:	10000526 	beq	r2,zero,5624 <__sinit+0x44>
    5610:	dfc00217 	ldw	ra,8(sp)
    5614:	dc400117 	ldw	r17,4(sp)
    5618:	dc000017 	ldw	r16,0(sp)
    561c:	dec00304 	addi	sp,sp,12
    5620:	f800283a 	ret
    5624:	21000117 	ldw	r4,4(r4)
    5628:	00800034 	movhi	r2,0
    562c:	1095b104 	addi	r2,r2,22212
    5630:	00c000c4 	movi	r3,3
    5634:	80800f15 	stw	r2,60(r16)
    5638:	80c0b915 	stw	r3,740(r16)
    563c:	8200ba15 	stw	r8,744(r16)
    5640:	84400e15 	stw	r17,56(r16)
    5644:	8000b815 	stw	zero,736(r16)
    5648:	00055780 	call	5578 <std>
    564c:	81000217 	ldw	r4,8(r16)
    5650:	880d883a 	mov	r6,r17
    5654:	800f883a 	mov	r7,r16
    5658:	01400284 	movi	r5,10
    565c:	00055780 	call	5578 <std>
    5660:	81000317 	ldw	r4,12(r16)
    5664:	800f883a 	mov	r7,r16
    5668:	01400484 	movi	r5,18
    566c:	01800084 	movi	r6,2
    5670:	dfc00217 	ldw	ra,8(sp)
    5674:	dc400117 	ldw	r17,4(sp)
    5678:	dc000017 	ldw	r16,0(sp)
    567c:	dec00304 	addi	sp,sp,12
    5680:	00055781 	jmpi	5578 <std>

00005684 <__fp_lock>:
    5684:	0005883a 	mov	r2,zero
    5688:	f800283a 	ret

0000568c <__fp_unlock>:
    568c:	0005883a 	mov	r2,zero
    5690:	f800283a 	ret

00005694 <__fp_unlock_all>:
    5694:	00800074 	movhi	r2,1
    5698:	10bd3c04 	addi	r2,r2,-2832
    569c:	11000017 	ldw	r4,0(r2)
    56a0:	01400034 	movhi	r5,0
    56a4:	2955a304 	addi	r5,r5,22156
    56a8:	00061dc1 	jmpi	61dc <_fwalk>

000056ac <__fp_lock_all>:
    56ac:	00800074 	movhi	r2,1
    56b0:	10bd3c04 	addi	r2,r2,-2832
    56b4:	11000017 	ldw	r4,0(r2)
    56b8:	01400034 	movhi	r5,0
    56bc:	2955a104 	addi	r5,r5,22148
    56c0:	00061dc1 	jmpi	61dc <_fwalk>

000056c4 <_cleanup_r>:
    56c4:	01400074 	movhi	r5,1
    56c8:	29618b04 	addi	r5,r5,-31188
    56cc:	00061dc1 	jmpi	61dc <_fwalk>

000056d0 <_cleanup>:
    56d0:	00800074 	movhi	r2,1
    56d4:	10bd3d04 	addi	r2,r2,-2828
    56d8:	11000017 	ldw	r4,0(r2)
    56dc:	00056c41 	jmpi	56c4 <_cleanup_r>

000056e0 <__sfmoreglue>:
    56e0:	defffc04 	addi	sp,sp,-16
    56e4:	dc400115 	stw	r17,4(sp)
    56e8:	2c401724 	muli	r17,r5,92
    56ec:	dc800215 	stw	r18,8(sp)
    56f0:	2825883a 	mov	r18,r5
    56f4:	89400304 	addi	r5,r17,12
    56f8:	dc000015 	stw	r16,0(sp)
    56fc:	dfc00315 	stw	ra,12(sp)
    5700:	0000ff00 	call	ff0 <_malloc_r>
    5704:	0021883a 	mov	r16,zero
    5708:	880d883a 	mov	r6,r17
    570c:	000b883a 	mov	r5,zero
    5710:	10000626 	beq	r2,zero,572c <__sfmoreglue+0x4c>
    5714:	11000304 	addi	r4,r2,12
    5718:	14800115 	stw	r18,4(r2)
    571c:	10000015 	stw	zero,0(r2)
    5720:	11000215 	stw	r4,8(r2)
    5724:	1021883a 	mov	r16,r2
    5728:	00067500 	call	6750 <memset>
    572c:	8005883a 	mov	r2,r16
    5730:	dfc00317 	ldw	ra,12(sp)
    5734:	dc800217 	ldw	r18,8(sp)
    5738:	dc400117 	ldw	r17,4(sp)
    573c:	dc000017 	ldw	r16,0(sp)
    5740:	dec00404 	addi	sp,sp,16
    5744:	f800283a 	ret

00005748 <__sfp>:
    5748:	defffd04 	addi	sp,sp,-12
    574c:	00800074 	movhi	r2,1
    5750:	10bd3d04 	addi	r2,r2,-2828
    5754:	dc000015 	stw	r16,0(sp)
    5758:	14000017 	ldw	r16,0(r2)
    575c:	dc400115 	stw	r17,4(sp)
    5760:	dfc00215 	stw	ra,8(sp)
    5764:	80800e17 	ldw	r2,56(r16)
    5768:	2023883a 	mov	r17,r4
    576c:	10002626 	beq	r2,zero,5808 <__sfp+0xc0>
    5770:	8400b804 	addi	r16,r16,736
    5774:	80800117 	ldw	r2,4(r16)
    5778:	81000217 	ldw	r4,8(r16)
    577c:	10ffffc4 	addi	r3,r2,-1
    5780:	18000916 	blt	r3,zero,57a8 <__sfp+0x60>
    5784:	2080030f 	ldh	r2,12(r4)
    5788:	10000b26 	beq	r2,zero,57b8 <__sfp+0x70>
    578c:	017fffc4 	movi	r5,-1
    5790:	00000206 	br	579c <__sfp+0x54>
    5794:	2080030f 	ldh	r2,12(r4)
    5798:	10000726 	beq	r2,zero,57b8 <__sfp+0x70>
    579c:	18ffffc4 	addi	r3,r3,-1
    57a0:	21001704 	addi	r4,r4,92
    57a4:	197ffb1e 	bne	r3,r5,5794 <__sfp+0x4c>
    57a8:	80800017 	ldw	r2,0(r16)
    57ac:	10001926 	beq	r2,zero,5814 <__sfp+0xcc>
    57b0:	1021883a 	mov	r16,r2
    57b4:	003fef06 	br	5774 <__sfp+0x2c>
    57b8:	00bfffc4 	movi	r2,-1
    57bc:	00c00044 	movi	r3,1
    57c0:	2080038d 	sth	r2,14(r4)
    57c4:	20c0030d 	sth	r3,12(r4)
    57c8:	20000015 	stw	zero,0(r4)
    57cc:	20000215 	stw	zero,8(r4)
    57d0:	20000115 	stw	zero,4(r4)
    57d4:	20000415 	stw	zero,16(r4)
    57d8:	20000515 	stw	zero,20(r4)
    57dc:	20000615 	stw	zero,24(r4)
    57e0:	20000c15 	stw	zero,48(r4)
    57e4:	20000d15 	stw	zero,52(r4)
    57e8:	20001115 	stw	zero,68(r4)
    57ec:	20001215 	stw	zero,72(r4)
    57f0:	2005883a 	mov	r2,r4
    57f4:	dfc00217 	ldw	ra,8(sp)
    57f8:	dc400117 	ldw	r17,4(sp)
    57fc:	dc000017 	ldw	r16,0(sp)
    5800:	dec00304 	addi	sp,sp,12
    5804:	f800283a 	ret
    5808:	8009883a 	mov	r4,r16
    580c:	00055e00 	call	55e0 <__sinit>
    5810:	003fd706 	br	5770 <__sfp+0x28>
    5814:	8809883a 	mov	r4,r17
    5818:	01400104 	movi	r5,4
    581c:	00056e00 	call	56e0 <__sfmoreglue>
    5820:	80800015 	stw	r2,0(r16)
    5824:	103fe21e 	bne	r2,zero,57b0 <__sfp+0x68>
    5828:	00800304 	movi	r2,12
    582c:	0009883a 	mov	r4,zero
    5830:	88800015 	stw	r2,0(r17)
    5834:	003fee06 	br	57f0 <__sfp+0xa8>

00005838 <_malloc_trim_r>:
    5838:	defffb04 	addi	sp,sp,-20
    583c:	dcc00315 	stw	r19,12(sp)
    5840:	04c00074 	movhi	r19,1
    5844:	9cf7b504 	addi	r19,r19,-8492
    5848:	dc800215 	stw	r18,8(sp)
    584c:	dc400115 	stw	r17,4(sp)
    5850:	dc000015 	stw	r16,0(sp)
    5854:	2823883a 	mov	r17,r5
    5858:	2025883a 	mov	r18,r4
    585c:	dfc00415 	stw	ra,16(sp)
    5860:	000b47c0 	call	b47c <__malloc_lock>
    5864:	98800217 	ldw	r2,8(r19)
    5868:	9009883a 	mov	r4,r18
    586c:	000b883a 	mov	r5,zero
    5870:	10c00117 	ldw	r3,4(r2)
    5874:	00bfff04 	movi	r2,-4
    5878:	18a0703a 	and	r16,r3,r2
    587c:	8463c83a 	sub	r17,r16,r17
    5880:	8c43fbc4 	addi	r17,r17,4079
    5884:	8822d33a 	srli	r17,r17,12
    5888:	0083ffc4 	movi	r2,4095
    588c:	8c7fffc4 	addi	r17,r17,-1
    5890:	8822933a 	slli	r17,r17,12
    5894:	1440060e 	bge	r2,r17,58b0 <_malloc_trim_r+0x78>
    5898:	00018800 	call	1880 <_sbrk_r>
    589c:	98c00217 	ldw	r3,8(r19)
    58a0:	9009883a 	mov	r4,r18
    58a4:	044bc83a 	sub	r5,zero,r17
    58a8:	80c7883a 	add	r3,r16,r3
    58ac:	10c00926 	beq	r2,r3,58d4 <_malloc_trim_r+0x9c>
    58b0:	000b49c0 	call	b49c <__malloc_unlock>
    58b4:	0005883a 	mov	r2,zero
    58b8:	dfc00417 	ldw	ra,16(sp)
    58bc:	dcc00317 	ldw	r19,12(sp)
    58c0:	dc800217 	ldw	r18,8(sp)
    58c4:	dc400117 	ldw	r17,4(sp)
    58c8:	dc000017 	ldw	r16,0(sp)
    58cc:	dec00504 	addi	sp,sp,20
    58d0:	f800283a 	ret
    58d4:	9009883a 	mov	r4,r18
    58d8:	00018800 	call	1880 <_sbrk_r>
    58dc:	844dc83a 	sub	r6,r16,r17
    58e0:	00ffffc4 	movi	r3,-1
    58e4:	9009883a 	mov	r4,r18
    58e8:	000b883a 	mov	r5,zero
    58ec:	01c00074 	movhi	r7,1
    58f0:	39c3fe04 	addi	r7,r7,4088
    58f4:	31800054 	ori	r6,r6,1
    58f8:	10c00926 	beq	r2,r3,5920 <_malloc_trim_r+0xe8>
    58fc:	38800017 	ldw	r2,0(r7)
    5900:	98c00217 	ldw	r3,8(r19)
    5904:	9009883a 	mov	r4,r18
    5908:	1445c83a 	sub	r2,r2,r17
    590c:	38800015 	stw	r2,0(r7)
    5910:	19800115 	stw	r6,4(r3)
    5914:	000b49c0 	call	b49c <__malloc_unlock>
    5918:	00800044 	movi	r2,1
    591c:	003fe606 	br	58b8 <_malloc_trim_r+0x80>
    5920:	00018800 	call	1880 <_sbrk_r>
    5924:	99800217 	ldw	r6,8(r19)
    5928:	100f883a 	mov	r7,r2
    592c:	9009883a 	mov	r4,r18
    5930:	1187c83a 	sub	r3,r2,r6
    5934:	008003c4 	movi	r2,15
    5938:	19400054 	ori	r5,r3,1
    593c:	10ffdc0e 	bge	r2,r3,58b0 <_malloc_trim_r+0x78>
    5940:	00800074 	movhi	r2,1
    5944:	10bd3f04 	addi	r2,r2,-2820
    5948:	10c00017 	ldw	r3,0(r2)
    594c:	00800074 	movhi	r2,1
    5950:	1083fe04 	addi	r2,r2,4088
    5954:	31400115 	stw	r5,4(r6)
    5958:	38c7c83a 	sub	r3,r7,r3
    595c:	10c00015 	stw	r3,0(r2)
    5960:	003fd306 	br	58b0 <_malloc_trim_r+0x78>

00005964 <_free_r>:
    5964:	defffd04 	addi	sp,sp,-12
    5968:	dc400115 	stw	r17,4(sp)
    596c:	dc000015 	stw	r16,0(sp)
    5970:	dfc00215 	stw	ra,8(sp)
    5974:	2821883a 	mov	r16,r5
    5978:	2023883a 	mov	r17,r4
    597c:	28005a26 	beq	r5,zero,5ae8 <_free_r+0x184>
    5980:	000b47c0 	call	b47c <__malloc_lock>
    5984:	823ffe04 	addi	r8,r16,-8
    5988:	41400117 	ldw	r5,4(r8)
    598c:	00bfff84 	movi	r2,-2
    5990:	02800074 	movhi	r10,1
    5994:	52b7b504 	addi	r10,r10,-8492
    5998:	288e703a 	and	r7,r5,r2
    599c:	41cd883a 	add	r6,r8,r7
    59a0:	30c00117 	ldw	r3,4(r6)
    59a4:	51000217 	ldw	r4,8(r10)
    59a8:	00bfff04 	movi	r2,-4
    59ac:	1892703a 	and	r9,r3,r2
    59b0:	5017883a 	mov	r11,r10
    59b4:	31006726 	beq	r6,r4,5b54 <_free_r+0x1f0>
    59b8:	2880004c 	andi	r2,r5,1
    59bc:	1005003a 	cmpeq	r2,r2,zero
    59c0:	32400115 	stw	r9,4(r6)
    59c4:	10001a1e 	bne	r2,zero,5a30 <_free_r+0xcc>
    59c8:	000b883a 	mov	r5,zero
    59cc:	3247883a 	add	r3,r6,r9
    59d0:	18800117 	ldw	r2,4(r3)
    59d4:	1080004c 	andi	r2,r2,1
    59d8:	1000231e 	bne	r2,zero,5a68 <_free_r+0x104>
    59dc:	280ac03a 	cmpne	r5,r5,zero
    59e0:	3a4f883a 	add	r7,r7,r9
    59e4:	2800451e 	bne	r5,zero,5afc <_free_r+0x198>
    59e8:	31000217 	ldw	r4,8(r6)
    59ec:	00800074 	movhi	r2,1
    59f0:	10b7b704 	addi	r2,r2,-8484
    59f4:	20807b26 	beq	r4,r2,5be4 <_free_r+0x280>
    59f8:	30800317 	ldw	r2,12(r6)
    59fc:	3a07883a 	add	r3,r7,r8
    5a00:	19c00015 	stw	r7,0(r3)
    5a04:	11000215 	stw	r4,8(r2)
    5a08:	20800315 	stw	r2,12(r4)
    5a0c:	38800054 	ori	r2,r7,1
    5a10:	40800115 	stw	r2,4(r8)
    5a14:	28001a26 	beq	r5,zero,5a80 <_free_r+0x11c>
    5a18:	8809883a 	mov	r4,r17
    5a1c:	dfc00217 	ldw	ra,8(sp)
    5a20:	dc400117 	ldw	r17,4(sp)
    5a24:	dc000017 	ldw	r16,0(sp)
    5a28:	dec00304 	addi	sp,sp,12
    5a2c:	000b49c1 	jmpi	b49c <__malloc_unlock>
    5a30:	80bffe17 	ldw	r2,-8(r16)
    5a34:	50c00204 	addi	r3,r10,8
    5a38:	4091c83a 	sub	r8,r8,r2
    5a3c:	41000217 	ldw	r4,8(r8)
    5a40:	388f883a 	add	r7,r7,r2
    5a44:	20c06126 	beq	r4,r3,5bcc <_free_r+0x268>
    5a48:	40800317 	ldw	r2,12(r8)
    5a4c:	3247883a 	add	r3,r6,r9
    5a50:	000b883a 	mov	r5,zero
    5a54:	11000215 	stw	r4,8(r2)
    5a58:	20800315 	stw	r2,12(r4)
    5a5c:	18800117 	ldw	r2,4(r3)
    5a60:	1080004c 	andi	r2,r2,1
    5a64:	103fdd26 	beq	r2,zero,59dc <_free_r+0x78>
    5a68:	38800054 	ori	r2,r7,1
    5a6c:	3a07883a 	add	r3,r7,r8
    5a70:	280ac03a 	cmpne	r5,r5,zero
    5a74:	40800115 	stw	r2,4(r8)
    5a78:	19c00015 	stw	r7,0(r3)
    5a7c:	283fe61e 	bne	r5,zero,5a18 <_free_r+0xb4>
    5a80:	00807fc4 	movi	r2,511
    5a84:	11c01f2e 	bgeu	r2,r7,5b04 <_free_r+0x1a0>
    5a88:	3806d27a 	srli	r3,r7,9
    5a8c:	1800481e 	bne	r3,zero,5bb0 <_free_r+0x24c>
    5a90:	3804d0fa 	srli	r2,r7,3
    5a94:	100690fa 	slli	r3,r2,3
    5a98:	1acd883a 	add	r6,r3,r11
    5a9c:	31400217 	ldw	r5,8(r6)
    5aa0:	31405926 	beq	r6,r5,5c08 <_free_r+0x2a4>
    5aa4:	28800117 	ldw	r2,4(r5)
    5aa8:	00ffff04 	movi	r3,-4
    5aac:	10c4703a 	and	r2,r2,r3
    5ab0:	3880022e 	bgeu	r7,r2,5abc <_free_r+0x158>
    5ab4:	29400217 	ldw	r5,8(r5)
    5ab8:	317ffa1e 	bne	r6,r5,5aa4 <_free_r+0x140>
    5abc:	29800317 	ldw	r6,12(r5)
    5ac0:	41800315 	stw	r6,12(r8)
    5ac4:	41400215 	stw	r5,8(r8)
    5ac8:	8809883a 	mov	r4,r17
    5acc:	2a000315 	stw	r8,12(r5)
    5ad0:	32000215 	stw	r8,8(r6)
    5ad4:	dfc00217 	ldw	ra,8(sp)
    5ad8:	dc400117 	ldw	r17,4(sp)
    5adc:	dc000017 	ldw	r16,0(sp)
    5ae0:	dec00304 	addi	sp,sp,12
    5ae4:	000b49c1 	jmpi	b49c <__malloc_unlock>
    5ae8:	dfc00217 	ldw	ra,8(sp)
    5aec:	dc400117 	ldw	r17,4(sp)
    5af0:	dc000017 	ldw	r16,0(sp)
    5af4:	dec00304 	addi	sp,sp,12
    5af8:	f800283a 	ret
    5afc:	31000217 	ldw	r4,8(r6)
    5b00:	003fbd06 	br	59f8 <_free_r+0x94>
    5b04:	3806d0fa 	srli	r3,r7,3
    5b08:	00800044 	movi	r2,1
    5b0c:	51400117 	ldw	r5,4(r10)
    5b10:	180890fa 	slli	r4,r3,3
    5b14:	1807d0ba 	srai	r3,r3,2
    5b18:	22c9883a 	add	r4,r4,r11
    5b1c:	21800217 	ldw	r6,8(r4)
    5b20:	10c4983a 	sll	r2,r2,r3
    5b24:	41000315 	stw	r4,12(r8)
    5b28:	41800215 	stw	r6,8(r8)
    5b2c:	288ab03a 	or	r5,r5,r2
    5b30:	22000215 	stw	r8,8(r4)
    5b34:	8809883a 	mov	r4,r17
    5b38:	51400115 	stw	r5,4(r10)
    5b3c:	32000315 	stw	r8,12(r6)
    5b40:	dfc00217 	ldw	ra,8(sp)
    5b44:	dc400117 	ldw	r17,4(sp)
    5b48:	dc000017 	ldw	r16,0(sp)
    5b4c:	dec00304 	addi	sp,sp,12
    5b50:	000b49c1 	jmpi	b49c <__malloc_unlock>
    5b54:	2880004c 	andi	r2,r5,1
    5b58:	3a4d883a 	add	r6,r7,r9
    5b5c:	1000071e 	bne	r2,zero,5b7c <_free_r+0x218>
    5b60:	80bffe17 	ldw	r2,-8(r16)
    5b64:	4091c83a 	sub	r8,r8,r2
    5b68:	41000317 	ldw	r4,12(r8)
    5b6c:	40c00217 	ldw	r3,8(r8)
    5b70:	308d883a 	add	r6,r6,r2
    5b74:	20c00215 	stw	r3,8(r4)
    5b78:	19000315 	stw	r4,12(r3)
    5b7c:	00800074 	movhi	r2,1
    5b80:	10bd3e04 	addi	r2,r2,-2824
    5b84:	11000017 	ldw	r4,0(r2)
    5b88:	30c00054 	ori	r3,r6,1
    5b8c:	52000215 	stw	r8,8(r10)
    5b90:	40c00115 	stw	r3,4(r8)
    5b94:	313fa036 	bltu	r6,r4,5a18 <_free_r+0xb4>
    5b98:	00800074 	movhi	r2,1
    5b9c:	1083e804 	addi	r2,r2,4000
    5ba0:	11400017 	ldw	r5,0(r2)
    5ba4:	8809883a 	mov	r4,r17
    5ba8:	00058380 	call	5838 <_malloc_trim_r>
    5bac:	003f9a06 	br	5a18 <_free_r+0xb4>
    5bb0:	00800104 	movi	r2,4
    5bb4:	10c0072e 	bgeu	r2,r3,5bd4 <_free_r+0x270>
    5bb8:	00800504 	movi	r2,20
    5bbc:	10c01936 	bltu	r2,r3,5c24 <_free_r+0x2c0>
    5bc0:	188016c4 	addi	r2,r3,91
    5bc4:	100690fa 	slli	r3,r2,3
    5bc8:	003fb306 	br	5a98 <_free_r+0x134>
    5bcc:	01400044 	movi	r5,1
    5bd0:	003f7e06 	br	59cc <_free_r+0x68>
    5bd4:	3804d1ba 	srli	r2,r7,6
    5bd8:	10800e04 	addi	r2,r2,56
    5bdc:	100690fa 	slli	r3,r2,3
    5be0:	003fad06 	br	5a98 <_free_r+0x134>
    5be4:	22000315 	stw	r8,12(r4)
    5be8:	22000215 	stw	r8,8(r4)
    5bec:	3a05883a 	add	r2,r7,r8
    5bf0:	38c00054 	ori	r3,r7,1
    5bf4:	11c00015 	stw	r7,0(r2)
    5bf8:	41000215 	stw	r4,8(r8)
    5bfc:	40c00115 	stw	r3,4(r8)
    5c00:	41000315 	stw	r4,12(r8)
    5c04:	003f8406 	br	5a18 <_free_r+0xb4>
    5c08:	1005d0ba 	srai	r2,r2,2
    5c0c:	00c00044 	movi	r3,1
    5c10:	51000117 	ldw	r4,4(r10)
    5c14:	1886983a 	sll	r3,r3,r2
    5c18:	20c8b03a 	or	r4,r4,r3
    5c1c:	51000115 	stw	r4,4(r10)
    5c20:	003fa706 	br	5ac0 <_free_r+0x15c>
    5c24:	00801504 	movi	r2,84
    5c28:	10c00436 	bltu	r2,r3,5c3c <_free_r+0x2d8>
    5c2c:	3804d33a 	srli	r2,r7,12
    5c30:	10801b84 	addi	r2,r2,110
    5c34:	100690fa 	slli	r3,r2,3
    5c38:	003f9706 	br	5a98 <_free_r+0x134>
    5c3c:	00805504 	movi	r2,340
    5c40:	10c00436 	bltu	r2,r3,5c54 <_free_r+0x2f0>
    5c44:	3804d3fa 	srli	r2,r7,15
    5c48:	10801dc4 	addi	r2,r2,119
    5c4c:	100690fa 	slli	r3,r2,3
    5c50:	003f9106 	br	5a98 <_free_r+0x134>
    5c54:	00815504 	movi	r2,1364
    5c58:	10c0032e 	bgeu	r2,r3,5c68 <_free_r+0x304>
    5c5c:	00801f84 	movi	r2,126
    5c60:	00c0fc04 	movi	r3,1008
    5c64:	003f8c06 	br	5a98 <_free_r+0x134>
    5c68:	3804d4ba 	srli	r2,r7,18
    5c6c:	10801f04 	addi	r2,r2,124
    5c70:	100690fa 	slli	r3,r2,3
    5c74:	003f8806 	br	5a98 <_free_r+0x134>

00005c78 <__sfvwrite_r>:
    5c78:	30800217 	ldw	r2,8(r6)
    5c7c:	defff504 	addi	sp,sp,-44
    5c80:	df000915 	stw	fp,36(sp)
    5c84:	dd800715 	stw	r22,28(sp)
    5c88:	dc800315 	stw	r18,12(sp)
    5c8c:	dfc00a15 	stw	ra,40(sp)
    5c90:	ddc00815 	stw	r23,32(sp)
    5c94:	dd400615 	stw	r21,24(sp)
    5c98:	dd000515 	stw	r20,20(sp)
    5c9c:	dcc00415 	stw	r19,16(sp)
    5ca0:	dc400215 	stw	r17,8(sp)
    5ca4:	dc000115 	stw	r16,4(sp)
    5ca8:	302d883a 	mov	r22,r6
    5cac:	2039883a 	mov	fp,r4
    5cb0:	2825883a 	mov	r18,r5
    5cb4:	10001c26 	beq	r2,zero,5d28 <__sfvwrite_r+0xb0>
    5cb8:	29c0030b 	ldhu	r7,12(r5)
    5cbc:	3880020c 	andi	r2,r7,8
    5cc0:	10002726 	beq	r2,zero,5d60 <__sfvwrite_r+0xe8>
    5cc4:	28800417 	ldw	r2,16(r5)
    5cc8:	10002526 	beq	r2,zero,5d60 <__sfvwrite_r+0xe8>
    5ccc:	3880008c 	andi	r2,r7,2
    5cd0:	b5400017 	ldw	r21,0(r22)
    5cd4:	10002826 	beq	r2,zero,5d78 <__sfvwrite_r+0x100>
    5cd8:	0021883a 	mov	r16,zero
    5cdc:	0023883a 	mov	r17,zero
    5ce0:	880d883a 	mov	r6,r17
    5ce4:	e009883a 	mov	r4,fp
    5ce8:	00810004 	movi	r2,1024
    5cec:	80006e26 	beq	r16,zero,5ea8 <__sfvwrite_r+0x230>
    5cf0:	800f883a 	mov	r7,r16
    5cf4:	91400717 	ldw	r5,28(r18)
    5cf8:	1400012e 	bgeu	r2,r16,5d00 <__sfvwrite_r+0x88>
    5cfc:	100f883a 	mov	r7,r2
    5d00:	90c00917 	ldw	r3,36(r18)
    5d04:	183ee83a 	callr	r3
    5d08:	1007883a 	mov	r3,r2
    5d0c:	80a1c83a 	sub	r16,r16,r2
    5d10:	88a3883a 	add	r17,r17,r2
    5d14:	00806d0e 	bge	zero,r2,5ecc <__sfvwrite_r+0x254>
    5d18:	b0800217 	ldw	r2,8(r22)
    5d1c:	10c5c83a 	sub	r2,r2,r3
    5d20:	b0800215 	stw	r2,8(r22)
    5d24:	103fee1e 	bne	r2,zero,5ce0 <__sfvwrite_r+0x68>
    5d28:	0009883a 	mov	r4,zero
    5d2c:	2005883a 	mov	r2,r4
    5d30:	dfc00a17 	ldw	ra,40(sp)
    5d34:	df000917 	ldw	fp,36(sp)
    5d38:	ddc00817 	ldw	r23,32(sp)
    5d3c:	dd800717 	ldw	r22,28(sp)
    5d40:	dd400617 	ldw	r21,24(sp)
    5d44:	dd000517 	ldw	r20,20(sp)
    5d48:	dcc00417 	ldw	r19,16(sp)
    5d4c:	dc800317 	ldw	r18,12(sp)
    5d50:	dc400217 	ldw	r17,8(sp)
    5d54:	dc000117 	ldw	r16,4(sp)
    5d58:	dec00b04 	addi	sp,sp,44
    5d5c:	f800283a 	ret
    5d60:	000388c0 	call	388c <__swsetup_r>
    5d64:	1000e41e 	bne	r2,zero,60f8 <__sfvwrite_r+0x480>
    5d68:	91c0030b 	ldhu	r7,12(r18)
    5d6c:	b5400017 	ldw	r21,0(r22)
    5d70:	3880008c 	andi	r2,r7,2
    5d74:	103fd81e 	bne	r2,zero,5cd8 <__sfvwrite_r+0x60>
    5d78:	3880004c 	andi	r2,r7,1
    5d7c:	1005003a 	cmpeq	r2,r2,zero
    5d80:	10005726 	beq	r2,zero,5ee0 <__sfvwrite_r+0x268>
    5d84:	0029883a 	mov	r20,zero
    5d88:	002f883a 	mov	r23,zero
    5d8c:	a0004226 	beq	r20,zero,5e98 <__sfvwrite_r+0x220>
    5d90:	3880800c 	andi	r2,r7,512
    5d94:	94000217 	ldw	r16,8(r18)
    5d98:	10008b26 	beq	r2,zero,5fc8 <__sfvwrite_r+0x350>
    5d9c:	800d883a 	mov	r6,r16
    5da0:	a400a536 	bltu	r20,r16,6038 <__sfvwrite_r+0x3c0>
    5da4:	3881200c 	andi	r2,r7,1152
    5da8:	10002726 	beq	r2,zero,5e48 <__sfvwrite_r+0x1d0>
    5dac:	90800517 	ldw	r2,20(r18)
    5db0:	92000417 	ldw	r8,16(r18)
    5db4:	91400017 	ldw	r5,0(r18)
    5db8:	1087883a 	add	r3,r2,r2
    5dbc:	1887883a 	add	r3,r3,r2
    5dc0:	1808d7fa 	srli	r4,r3,31
    5dc4:	2a21c83a 	sub	r16,r5,r8
    5dc8:	80800044 	addi	r2,r16,1
    5dcc:	20c9883a 	add	r4,r4,r3
    5dd0:	2027d07a 	srai	r19,r4,1
    5dd4:	a085883a 	add	r2,r20,r2
    5dd8:	980d883a 	mov	r6,r19
    5ddc:	9880022e 	bgeu	r19,r2,5de8 <__sfvwrite_r+0x170>
    5de0:	1027883a 	mov	r19,r2
    5de4:	100d883a 	mov	r6,r2
    5de8:	3881000c 	andi	r2,r7,1024
    5dec:	1000b826 	beq	r2,zero,60d0 <__sfvwrite_r+0x458>
    5df0:	300b883a 	mov	r5,r6
    5df4:	e009883a 	mov	r4,fp
    5df8:	0000ff00 	call	ff0 <_malloc_r>
    5dfc:	10003126 	beq	r2,zero,5ec4 <__sfvwrite_r+0x24c>
    5e00:	91400417 	ldw	r5,16(r18)
    5e04:	1009883a 	mov	r4,r2
    5e08:	800d883a 	mov	r6,r16
    5e0c:	1023883a 	mov	r17,r2
    5e10:	00065d00 	call	65d0 <memcpy>
    5e14:	90c0030b 	ldhu	r3,12(r18)
    5e18:	00beffc4 	movi	r2,-1025
    5e1c:	1886703a 	and	r3,r3,r2
    5e20:	18c02014 	ori	r3,r3,128
    5e24:	90c0030d 	sth	r3,12(r18)
    5e28:	9c07c83a 	sub	r3,r19,r16
    5e2c:	8c05883a 	add	r2,r17,r16
    5e30:	a00d883a 	mov	r6,r20
    5e34:	a021883a 	mov	r16,r20
    5e38:	90800015 	stw	r2,0(r18)
    5e3c:	90c00215 	stw	r3,8(r18)
    5e40:	94400415 	stw	r17,16(r18)
    5e44:	94c00515 	stw	r19,20(r18)
    5e48:	91000017 	ldw	r4,0(r18)
    5e4c:	b80b883a 	mov	r5,r23
    5e50:	a023883a 	mov	r17,r20
    5e54:	00066700 	call	6670 <memmove>
    5e58:	90c00217 	ldw	r3,8(r18)
    5e5c:	90800017 	ldw	r2,0(r18)
    5e60:	a027883a 	mov	r19,r20
    5e64:	1c07c83a 	sub	r3,r3,r16
    5e68:	1405883a 	add	r2,r2,r16
    5e6c:	90c00215 	stw	r3,8(r18)
    5e70:	a021883a 	mov	r16,r20
    5e74:	90800015 	stw	r2,0(r18)
    5e78:	b0800217 	ldw	r2,8(r22)
    5e7c:	1405c83a 	sub	r2,r2,r16
    5e80:	b0800215 	stw	r2,8(r22)
    5e84:	103fa826 	beq	r2,zero,5d28 <__sfvwrite_r+0xb0>
    5e88:	a469c83a 	sub	r20,r20,r17
    5e8c:	91c0030b 	ldhu	r7,12(r18)
    5e90:	bcef883a 	add	r23,r23,r19
    5e94:	a03fbe1e 	bne	r20,zero,5d90 <__sfvwrite_r+0x118>
    5e98:	adc00017 	ldw	r23,0(r21)
    5e9c:	ad000117 	ldw	r20,4(r21)
    5ea0:	ad400204 	addi	r21,r21,8
    5ea4:	003fb906 	br	5d8c <__sfvwrite_r+0x114>
    5ea8:	ac400017 	ldw	r17,0(r21)
    5eac:	ac000117 	ldw	r16,4(r21)
    5eb0:	ad400204 	addi	r21,r21,8
    5eb4:	003f8a06 	br	5ce0 <__sfvwrite_r+0x68>
    5eb8:	91400417 	ldw	r5,16(r18)
    5ebc:	e009883a 	mov	r4,fp
    5ec0:	00059640 	call	5964 <_free_r>
    5ec4:	00800304 	movi	r2,12
    5ec8:	e0800015 	stw	r2,0(fp)
    5ecc:	9080030b 	ldhu	r2,12(r18)
    5ed0:	013fffc4 	movi	r4,-1
    5ed4:	10801014 	ori	r2,r2,64
    5ed8:	9080030d 	sth	r2,12(r18)
    5edc:	003f9306 	br	5d2c <__sfvwrite_r+0xb4>
    5ee0:	0027883a 	mov	r19,zero
    5ee4:	002f883a 	mov	r23,zero
    5ee8:	d8000015 	stw	zero,0(sp)
    5eec:	0029883a 	mov	r20,zero
    5ef0:	98001e26 	beq	r19,zero,5f6c <__sfvwrite_r+0x2f4>
    5ef4:	d8c00017 	ldw	r3,0(sp)
    5ef8:	1804c03a 	cmpne	r2,r3,zero
    5efc:	10005e26 	beq	r2,zero,6078 <__sfvwrite_r+0x400>
    5f00:	9821883a 	mov	r16,r19
    5f04:	a4c0012e 	bgeu	r20,r19,5f0c <__sfvwrite_r+0x294>
    5f08:	a021883a 	mov	r16,r20
    5f0c:	91000017 	ldw	r4,0(r18)
    5f10:	90800417 	ldw	r2,16(r18)
    5f14:	91800217 	ldw	r6,8(r18)
    5f18:	91c00517 	ldw	r7,20(r18)
    5f1c:	1100022e 	bgeu	r2,r4,5f28 <__sfvwrite_r+0x2b0>
    5f20:	31e3883a 	add	r17,r6,r7
    5f24:	8c001616 	blt	r17,r16,5f80 <__sfvwrite_r+0x308>
    5f28:	81c03816 	blt	r16,r7,600c <__sfvwrite_r+0x394>
    5f2c:	90c00917 	ldw	r3,36(r18)
    5f30:	91400717 	ldw	r5,28(r18)
    5f34:	e009883a 	mov	r4,fp
    5f38:	b80d883a 	mov	r6,r23
    5f3c:	183ee83a 	callr	r3
    5f40:	1023883a 	mov	r17,r2
    5f44:	00bfe10e 	bge	zero,r2,5ecc <__sfvwrite_r+0x254>
    5f48:	a469c83a 	sub	r20,r20,r17
    5f4c:	a0001826 	beq	r20,zero,5fb0 <__sfvwrite_r+0x338>
    5f50:	b0800217 	ldw	r2,8(r22)
    5f54:	1445c83a 	sub	r2,r2,r17
    5f58:	b0800215 	stw	r2,8(r22)
    5f5c:	103f7226 	beq	r2,zero,5d28 <__sfvwrite_r+0xb0>
    5f60:	9c67c83a 	sub	r19,r19,r17
    5f64:	bc6f883a 	add	r23,r23,r17
    5f68:	983fe21e 	bne	r19,zero,5ef4 <__sfvwrite_r+0x27c>
    5f6c:	adc00017 	ldw	r23,0(r21)
    5f70:	acc00117 	ldw	r19,4(r21)
    5f74:	ad400204 	addi	r21,r21,8
    5f78:	d8000015 	stw	zero,0(sp)
    5f7c:	003fdc06 	br	5ef0 <__sfvwrite_r+0x278>
    5f80:	b80b883a 	mov	r5,r23
    5f84:	880d883a 	mov	r6,r17
    5f88:	00066700 	call	6670 <memmove>
    5f8c:	90c00017 	ldw	r3,0(r18)
    5f90:	e009883a 	mov	r4,fp
    5f94:	900b883a 	mov	r5,r18
    5f98:	1c47883a 	add	r3,r3,r17
    5f9c:	90c00015 	stw	r3,0(r18)
    5fa0:	00053480 	call	5348 <_fflush_r>
    5fa4:	103fc91e 	bne	r2,zero,5ecc <__sfvwrite_r+0x254>
    5fa8:	a469c83a 	sub	r20,r20,r17
    5fac:	a03fe81e 	bne	r20,zero,5f50 <__sfvwrite_r+0x2d8>
    5fb0:	e009883a 	mov	r4,fp
    5fb4:	900b883a 	mov	r5,r18
    5fb8:	00053480 	call	5348 <_fflush_r>
    5fbc:	103fc31e 	bne	r2,zero,5ecc <__sfvwrite_r+0x254>
    5fc0:	d8000015 	stw	zero,0(sp)
    5fc4:	003fe206 	br	5f50 <__sfvwrite_r+0x2d8>
    5fc8:	91000017 	ldw	r4,0(r18)
    5fcc:	90800417 	ldw	r2,16(r18)
    5fd0:	1100022e 	bgeu	r2,r4,5fdc <__sfvwrite_r+0x364>
    5fd4:	8023883a 	mov	r17,r16
    5fd8:	85003136 	bltu	r16,r20,60a0 <__sfvwrite_r+0x428>
    5fdc:	91c00517 	ldw	r7,20(r18)
    5fe0:	a1c01836 	bltu	r20,r7,6044 <__sfvwrite_r+0x3cc>
    5fe4:	90c00917 	ldw	r3,36(r18)
    5fe8:	91400717 	ldw	r5,28(r18)
    5fec:	e009883a 	mov	r4,fp
    5ff0:	b80d883a 	mov	r6,r23
    5ff4:	183ee83a 	callr	r3
    5ff8:	1021883a 	mov	r16,r2
    5ffc:	00bfb30e 	bge	zero,r2,5ecc <__sfvwrite_r+0x254>
    6000:	1023883a 	mov	r17,r2
    6004:	1027883a 	mov	r19,r2
    6008:	003f9b06 	br	5e78 <__sfvwrite_r+0x200>
    600c:	b80b883a 	mov	r5,r23
    6010:	800d883a 	mov	r6,r16
    6014:	00066700 	call	6670 <memmove>
    6018:	90c00217 	ldw	r3,8(r18)
    601c:	90800017 	ldw	r2,0(r18)
    6020:	8023883a 	mov	r17,r16
    6024:	1c07c83a 	sub	r3,r3,r16
    6028:	1405883a 	add	r2,r2,r16
    602c:	90c00215 	stw	r3,8(r18)
    6030:	90800015 	stw	r2,0(r18)
    6034:	003fc406 	br	5f48 <__sfvwrite_r+0x2d0>
    6038:	a00d883a 	mov	r6,r20
    603c:	a021883a 	mov	r16,r20
    6040:	003f8106 	br	5e48 <__sfvwrite_r+0x1d0>
    6044:	b80b883a 	mov	r5,r23
    6048:	a00d883a 	mov	r6,r20
    604c:	00066700 	call	6670 <memmove>
    6050:	90c00217 	ldw	r3,8(r18)
    6054:	90800017 	ldw	r2,0(r18)
    6058:	a021883a 	mov	r16,r20
    605c:	1d07c83a 	sub	r3,r3,r20
    6060:	1505883a 	add	r2,r2,r20
    6064:	a023883a 	mov	r17,r20
    6068:	a027883a 	mov	r19,r20
    606c:	90c00215 	stw	r3,8(r18)
    6070:	90800015 	stw	r2,0(r18)
    6074:	003f8006 	br	5e78 <__sfvwrite_r+0x200>
    6078:	b809883a 	mov	r4,r23
    607c:	01400284 	movi	r5,10
    6080:	980d883a 	mov	r6,r19
    6084:	00064ec0 	call	64ec <memchr>
    6088:	10001726 	beq	r2,zero,60e8 <__sfvwrite_r+0x470>
    608c:	15c5c83a 	sub	r2,r2,r23
    6090:	15000044 	addi	r20,r2,1
    6094:	00800044 	movi	r2,1
    6098:	d8800015 	stw	r2,0(sp)
    609c:	003f9806 	br	5f00 <__sfvwrite_r+0x288>
    60a0:	b80b883a 	mov	r5,r23
    60a4:	800d883a 	mov	r6,r16
    60a8:	00066700 	call	6670 <memmove>
    60ac:	90c00017 	ldw	r3,0(r18)
    60b0:	e009883a 	mov	r4,fp
    60b4:	900b883a 	mov	r5,r18
    60b8:	1c07883a 	add	r3,r3,r16
    60bc:	90c00015 	stw	r3,0(r18)
    60c0:	8027883a 	mov	r19,r16
    60c4:	00053480 	call	5348 <_fflush_r>
    60c8:	103f6b26 	beq	r2,zero,5e78 <__sfvwrite_r+0x200>
    60cc:	003f7f06 	br	5ecc <__sfvwrite_r+0x254>
    60d0:	400b883a 	mov	r5,r8
    60d4:	e009883a 	mov	r4,fp
    60d8:	00079c80 	call	79c8 <_realloc_r>
    60dc:	103f7626 	beq	r2,zero,5eb8 <__sfvwrite_r+0x240>
    60e0:	1023883a 	mov	r17,r2
    60e4:	003f5006 	br	5e28 <__sfvwrite_r+0x1b0>
    60e8:	00c00044 	movi	r3,1
    60ec:	9d000044 	addi	r20,r19,1
    60f0:	d8c00015 	stw	r3,0(sp)
    60f4:	003f8206 	br	5f00 <__sfvwrite_r+0x288>
    60f8:	9080030b 	ldhu	r2,12(r18)
    60fc:	00c00244 	movi	r3,9
    6100:	013fffc4 	movi	r4,-1
    6104:	10801014 	ori	r2,r2,64
    6108:	9080030d 	sth	r2,12(r18)
    610c:	e0c00015 	stw	r3,0(fp)
    6110:	003f0606 	br	5d2c <__sfvwrite_r+0xb4>

00006114 <_fwalk_reent>:
    6114:	defff704 	addi	sp,sp,-36
    6118:	dcc00315 	stw	r19,12(sp)
    611c:	24c0b804 	addi	r19,r4,736
    6120:	dd800615 	stw	r22,24(sp)
    6124:	dd400515 	stw	r21,20(sp)
    6128:	dfc00815 	stw	ra,32(sp)
    612c:	ddc00715 	stw	r23,28(sp)
    6130:	dd000415 	stw	r20,16(sp)
    6134:	dc800215 	stw	r18,8(sp)
    6138:	dc400115 	stw	r17,4(sp)
    613c:	dc000015 	stw	r16,0(sp)
    6140:	202b883a 	mov	r21,r4
    6144:	282d883a 	mov	r22,r5
    6148:	00055d00 	call	55d0 <__sfp_lock_acquire>
    614c:	98002126 	beq	r19,zero,61d4 <_fwalk_reent+0xc0>
    6150:	002f883a 	mov	r23,zero
    6154:	9c800117 	ldw	r18,4(r19)
    6158:	9c000217 	ldw	r16,8(r19)
    615c:	90bfffc4 	addi	r2,r18,-1
    6160:	10000d16 	blt	r2,zero,6198 <_fwalk_reent+0x84>
    6164:	0023883a 	mov	r17,zero
    6168:	053fffc4 	movi	r20,-1
    616c:	8080030f 	ldh	r2,12(r16)
    6170:	8c400044 	addi	r17,r17,1
    6174:	10000626 	beq	r2,zero,6190 <_fwalk_reent+0x7c>
    6178:	8080038f 	ldh	r2,14(r16)
    617c:	800b883a 	mov	r5,r16
    6180:	a809883a 	mov	r4,r21
    6184:	15000226 	beq	r2,r20,6190 <_fwalk_reent+0x7c>
    6188:	b03ee83a 	callr	r22
    618c:	b8aeb03a 	or	r23,r23,r2
    6190:	84001704 	addi	r16,r16,92
    6194:	947ff51e 	bne	r18,r17,616c <_fwalk_reent+0x58>
    6198:	9cc00017 	ldw	r19,0(r19)
    619c:	983fed1e 	bne	r19,zero,6154 <_fwalk_reent+0x40>
    61a0:	00055d40 	call	55d4 <__sfp_lock_release>
    61a4:	b805883a 	mov	r2,r23
    61a8:	dfc00817 	ldw	ra,32(sp)
    61ac:	ddc00717 	ldw	r23,28(sp)
    61b0:	dd800617 	ldw	r22,24(sp)
    61b4:	dd400517 	ldw	r21,20(sp)
    61b8:	dd000417 	ldw	r20,16(sp)
    61bc:	dcc00317 	ldw	r19,12(sp)
    61c0:	dc800217 	ldw	r18,8(sp)
    61c4:	dc400117 	ldw	r17,4(sp)
    61c8:	dc000017 	ldw	r16,0(sp)
    61cc:	dec00904 	addi	sp,sp,36
    61d0:	f800283a 	ret
    61d4:	002f883a 	mov	r23,zero
    61d8:	003ff106 	br	61a0 <_fwalk_reent+0x8c>

000061dc <_fwalk>:
    61dc:	defff804 	addi	sp,sp,-32
    61e0:	dcc00315 	stw	r19,12(sp)
    61e4:	24c0b804 	addi	r19,r4,736
    61e8:	dd400515 	stw	r21,20(sp)
    61ec:	dfc00715 	stw	ra,28(sp)
    61f0:	dd800615 	stw	r22,24(sp)
    61f4:	dd000415 	stw	r20,16(sp)
    61f8:	dc800215 	stw	r18,8(sp)
    61fc:	dc400115 	stw	r17,4(sp)
    6200:	dc000015 	stw	r16,0(sp)
    6204:	282b883a 	mov	r21,r5
    6208:	00055d00 	call	55d0 <__sfp_lock_acquire>
    620c:	98001f26 	beq	r19,zero,628c <_fwalk+0xb0>
    6210:	002d883a 	mov	r22,zero
    6214:	9c800117 	ldw	r18,4(r19)
    6218:	9c000217 	ldw	r16,8(r19)
    621c:	90bfffc4 	addi	r2,r18,-1
    6220:	10000c16 	blt	r2,zero,6254 <_fwalk+0x78>
    6224:	0023883a 	mov	r17,zero
    6228:	053fffc4 	movi	r20,-1
    622c:	8080030f 	ldh	r2,12(r16)
    6230:	8c400044 	addi	r17,r17,1
    6234:	10000526 	beq	r2,zero,624c <_fwalk+0x70>
    6238:	8080038f 	ldh	r2,14(r16)
    623c:	8009883a 	mov	r4,r16
    6240:	15000226 	beq	r2,r20,624c <_fwalk+0x70>
    6244:	a83ee83a 	callr	r21
    6248:	b0acb03a 	or	r22,r22,r2
    624c:	84001704 	addi	r16,r16,92
    6250:	947ff61e 	bne	r18,r17,622c <_fwalk+0x50>
    6254:	9cc00017 	ldw	r19,0(r19)
    6258:	983fee1e 	bne	r19,zero,6214 <_fwalk+0x38>
    625c:	00055d40 	call	55d4 <__sfp_lock_release>
    6260:	b005883a 	mov	r2,r22
    6264:	dfc00717 	ldw	ra,28(sp)
    6268:	dd800617 	ldw	r22,24(sp)
    626c:	dd400517 	ldw	r21,20(sp)
    6270:	dd000417 	ldw	r20,16(sp)
    6274:	dcc00317 	ldw	r19,12(sp)
    6278:	dc800217 	ldw	r18,8(sp)
    627c:	dc400117 	ldw	r17,4(sp)
    6280:	dc000017 	ldw	r16,0(sp)
    6284:	dec00804 	addi	sp,sp,32
    6288:	f800283a 	ret
    628c:	002d883a 	mov	r22,zero
    6290:	003ff206 	br	625c <_fwalk+0x80>

00006294 <__locale_charset>:
    6294:	d0a00517 	ldw	r2,-32748(gp)
    6298:	f800283a 	ret

0000629c <_localeconv_r>:
    629c:	00800074 	movhi	r2,1
    62a0:	10b61004 	addi	r2,r2,-10176
    62a4:	f800283a 	ret

000062a8 <localeconv>:
    62a8:	00800074 	movhi	r2,1
    62ac:	10bd3c04 	addi	r2,r2,-2832
    62b0:	11000017 	ldw	r4,0(r2)
    62b4:	000629c1 	jmpi	629c <_localeconv_r>

000062b8 <_setlocale_r>:
    62b8:	defffc04 	addi	sp,sp,-16
    62bc:	00c00074 	movhi	r3,1
    62c0:	18f5e604 	addi	r3,r3,-10344
    62c4:	dc800215 	stw	r18,8(sp)
    62c8:	dc400115 	stw	r17,4(sp)
    62cc:	dc000015 	stw	r16,0(sp)
    62d0:	2023883a 	mov	r17,r4
    62d4:	2825883a 	mov	r18,r5
    62d8:	dfc00315 	stw	ra,12(sp)
    62dc:	3021883a 	mov	r16,r6
    62e0:	3009883a 	mov	r4,r6
    62e4:	180b883a 	mov	r5,r3
    62e8:	30000926 	beq	r6,zero,6310 <_setlocale_r+0x58>
    62ec:	00081780 	call	8178 <strcmp>
    62f0:	8009883a 	mov	r4,r16
    62f4:	01400074 	movhi	r5,1
    62f8:	2975f704 	addi	r5,r5,-10276
    62fc:	10000b1e 	bne	r2,zero,632c <_setlocale_r+0x74>
    6300:	8c000d15 	stw	r16,52(r17)
    6304:	8c800c15 	stw	r18,48(r17)
    6308:	00c00074 	movhi	r3,1
    630c:	18f5e604 	addi	r3,r3,-10344
    6310:	1805883a 	mov	r2,r3
    6314:	dfc00317 	ldw	ra,12(sp)
    6318:	dc800217 	ldw	r18,8(sp)
    631c:	dc400117 	ldw	r17,4(sp)
    6320:	dc000017 	ldw	r16,0(sp)
    6324:	dec00404 	addi	sp,sp,16
    6328:	f800283a 	ret
    632c:	00081780 	call	8178 <strcmp>
    6330:	0007883a 	mov	r3,zero
    6334:	103ff226 	beq	r2,zero,6300 <_setlocale_r+0x48>
    6338:	003ff506 	br	6310 <_setlocale_r+0x58>

0000633c <setlocale>:
    633c:	01800074 	movhi	r6,1
    6340:	31bd3c04 	addi	r6,r6,-2832
    6344:	2007883a 	mov	r3,r4
    6348:	31000017 	ldw	r4,0(r6)
    634c:	280d883a 	mov	r6,r5
    6350:	180b883a 	mov	r5,r3
    6354:	00062b81 	jmpi	62b8 <_setlocale_r>

00006358 <__smakebuf_r>:
    6358:	2880030b 	ldhu	r2,12(r5)
    635c:	deffed04 	addi	sp,sp,-76
    6360:	dc401015 	stw	r17,64(sp)
    6364:	1080008c 	andi	r2,r2,2
    6368:	dc000f15 	stw	r16,60(sp)
    636c:	dfc01215 	stw	ra,72(sp)
    6370:	dc801115 	stw	r18,68(sp)
    6374:	2821883a 	mov	r16,r5
    6378:	2023883a 	mov	r17,r4
    637c:	10000b26 	beq	r2,zero,63ac <__smakebuf_r+0x54>
    6380:	28c010c4 	addi	r3,r5,67
    6384:	00800044 	movi	r2,1
    6388:	28800515 	stw	r2,20(r5)
    638c:	28c00415 	stw	r3,16(r5)
    6390:	28c00015 	stw	r3,0(r5)
    6394:	dfc01217 	ldw	ra,72(sp)
    6398:	dc801117 	ldw	r18,68(sp)
    639c:	dc401017 	ldw	r17,64(sp)
    63a0:	dc000f17 	ldw	r16,60(sp)
    63a4:	dec01304 	addi	sp,sp,76
    63a8:	f800283a 	ret
    63ac:	2940038f 	ldh	r5,14(r5)
    63b0:	28002116 	blt	r5,zero,6438 <__smakebuf_r+0xe0>
    63b4:	d80d883a 	mov	r6,sp
    63b8:	00086400 	call	8640 <_fstat_r>
    63bc:	10001e16 	blt	r2,zero,6438 <__smakebuf_r+0xe0>
    63c0:	d8800117 	ldw	r2,4(sp)
    63c4:	00e00014 	movui	r3,32768
    63c8:	113c000c 	andi	r4,r2,61440
    63cc:	20c03126 	beq	r4,r3,6494 <__smakebuf_r+0x13c>
    63d0:	8080030b 	ldhu	r2,12(r16)
    63d4:	00c80004 	movi	r3,8192
    63d8:	10820014 	ori	r2,r2,2048
    63dc:	8080030d 	sth	r2,12(r16)
    63e0:	20c01e26 	beq	r4,r3,645c <__smakebuf_r+0x104>
    63e4:	04810004 	movi	r18,1024
    63e8:	8809883a 	mov	r4,r17
    63ec:	900b883a 	mov	r5,r18
    63f0:	0000ff00 	call	ff0 <_malloc_r>
    63f4:	1009883a 	mov	r4,r2
    63f8:	10003126 	beq	r2,zero,64c0 <__smakebuf_r+0x168>
    63fc:	80c0030b 	ldhu	r3,12(r16)
    6400:	00800034 	movhi	r2,0
    6404:	1095b104 	addi	r2,r2,22212
    6408:	88800f15 	stw	r2,60(r17)
    640c:	18c02014 	ori	r3,r3,128
    6410:	84800515 	stw	r18,20(r16)
    6414:	80c0030d 	sth	r3,12(r16)
    6418:	81000415 	stw	r4,16(r16)
    641c:	81000015 	stw	r4,0(r16)
    6420:	dfc01217 	ldw	ra,72(sp)
    6424:	dc801117 	ldw	r18,68(sp)
    6428:	dc401017 	ldw	r17,64(sp)
    642c:	dc000f17 	ldw	r16,60(sp)
    6430:	dec01304 	addi	sp,sp,76
    6434:	f800283a 	ret
    6438:	80c0030b 	ldhu	r3,12(r16)
    643c:	1880200c 	andi	r2,r3,128
    6440:	10000426 	beq	r2,zero,6454 <__smakebuf_r+0xfc>
    6444:	04801004 	movi	r18,64
    6448:	18820014 	ori	r2,r3,2048
    644c:	8080030d 	sth	r2,12(r16)
    6450:	003fe506 	br	63e8 <__smakebuf_r+0x90>
    6454:	04810004 	movi	r18,1024
    6458:	003ffb06 	br	6448 <__smakebuf_r+0xf0>
    645c:	8140038f 	ldh	r5,14(r16)
    6460:	8809883a 	mov	r4,r17
    6464:	00086b40 	call	86b4 <_isatty_r>
    6468:	103fde26 	beq	r2,zero,63e4 <__smakebuf_r+0x8c>
    646c:	8080030b 	ldhu	r2,12(r16)
    6470:	80c010c4 	addi	r3,r16,67
    6474:	04810004 	movi	r18,1024
    6478:	10800054 	ori	r2,r2,1
    647c:	8080030d 	sth	r2,12(r16)
    6480:	00800044 	movi	r2,1
    6484:	80c00415 	stw	r3,16(r16)
    6488:	80800515 	stw	r2,20(r16)
    648c:	80c00015 	stw	r3,0(r16)
    6490:	003fd506 	br	63e8 <__smakebuf_r+0x90>
    6494:	80c00a17 	ldw	r3,40(r16)
    6498:	00800074 	movhi	r2,1
    649c:	10a00d04 	addi	r2,r2,-32716
    64a0:	18bfcb1e 	bne	r3,r2,63d0 <__smakebuf_r+0x78>
    64a4:	8080030b 	ldhu	r2,12(r16)
    64a8:	00c10004 	movi	r3,1024
    64ac:	1825883a 	mov	r18,r3
    64b0:	10c4b03a 	or	r2,r2,r3
    64b4:	8080030d 	sth	r2,12(r16)
    64b8:	80c01315 	stw	r3,76(r16)
    64bc:	003fca06 	br	63e8 <__smakebuf_r+0x90>
    64c0:	8100030b 	ldhu	r4,12(r16)
    64c4:	2080800c 	andi	r2,r4,512
    64c8:	103fb21e 	bne	r2,zero,6394 <__smakebuf_r+0x3c>
    64cc:	80c010c4 	addi	r3,r16,67
    64d0:	21000094 	ori	r4,r4,2
    64d4:	00800044 	movi	r2,1
    64d8:	80800515 	stw	r2,20(r16)
    64dc:	8100030d 	sth	r4,12(r16)
    64e0:	80c00415 	stw	r3,16(r16)
    64e4:	80c00015 	stw	r3,0(r16)
    64e8:	003faa06 	br	6394 <__smakebuf_r+0x3c>

000064ec <memchr>:
    64ec:	008000c4 	movi	r2,3
    64f0:	29403fcc 	andi	r5,r5,255
    64f4:	2007883a 	mov	r3,r4
    64f8:	1180022e 	bgeu	r2,r6,6504 <memchr+0x18>
    64fc:	2084703a 	and	r2,r4,r2
    6500:	10000b26 	beq	r2,zero,6530 <memchr+0x44>
    6504:	313fffc4 	addi	r4,r6,-1
    6508:	3000051e 	bne	r6,zero,6520 <memchr+0x34>
    650c:	00002c06 	br	65c0 <memchr+0xd4>
    6510:	213fffc4 	addi	r4,r4,-1
    6514:	00bfffc4 	movi	r2,-1
    6518:	18c00044 	addi	r3,r3,1
    651c:	20802826 	beq	r4,r2,65c0 <memchr+0xd4>
    6520:	18800003 	ldbu	r2,0(r3)
    6524:	28bffa1e 	bne	r5,r2,6510 <memchr+0x24>
    6528:	1805883a 	mov	r2,r3
    652c:	f800283a 	ret
    6530:	0011883a 	mov	r8,zero
    6534:	0007883a 	mov	r3,zero
    6538:	01c00104 	movi	r7,4
    653c:	4004923a 	slli	r2,r8,8
    6540:	18c00044 	addi	r3,r3,1
    6544:	1151883a 	add	r8,r2,r5
    6548:	19fffc1e 	bne	r3,r7,653c <memchr+0x50>
    654c:	02bfbff4 	movhi	r10,65279
    6550:	52bfbfc4 	addi	r10,r10,-257
    6554:	02602074 	movhi	r9,32897
    6558:	4a602004 	addi	r9,r9,-32640
    655c:	02c000c4 	movi	r11,3
    6560:	20800017 	ldw	r2,0(r4)
    6564:	31bfff04 	addi	r6,r6,-4
    6568:	200f883a 	mov	r7,r4
    656c:	1204f03a 	xor	r2,r2,r8
    6570:	1287883a 	add	r3,r2,r10
    6574:	1a46703a 	and	r3,r3,r9
    6578:	0084303a 	nor	r2,zero,r2
    657c:	10c4703a 	and	r2,r2,r3
    6580:	10000b26 	beq	r2,zero,65b0 <memchr+0xc4>
    6584:	20800003 	ldbu	r2,0(r4)
    6588:	28800f26 	beq	r5,r2,65c8 <memchr+0xdc>
    658c:	20800043 	ldbu	r2,1(r4)
    6590:	21c00044 	addi	r7,r4,1
    6594:	28800c26 	beq	r5,r2,65c8 <memchr+0xdc>
    6598:	20800083 	ldbu	r2,2(r4)
    659c:	21c00084 	addi	r7,r4,2
    65a0:	28800926 	beq	r5,r2,65c8 <memchr+0xdc>
    65a4:	208000c3 	ldbu	r2,3(r4)
    65a8:	21c000c4 	addi	r7,r4,3
    65ac:	28800626 	beq	r5,r2,65c8 <memchr+0xdc>
    65b0:	21000104 	addi	r4,r4,4
    65b4:	59bfea36 	bltu	r11,r6,6560 <memchr+0x74>
    65b8:	2007883a 	mov	r3,r4
    65bc:	003fd106 	br	6504 <memchr+0x18>
    65c0:	0005883a 	mov	r2,zero
    65c4:	f800283a 	ret
    65c8:	3805883a 	mov	r2,r7
    65cc:	f800283a 	ret

000065d0 <memcpy>:
    65d0:	01c003c4 	movi	r7,15
    65d4:	2007883a 	mov	r3,r4
    65d8:	3980032e 	bgeu	r7,r6,65e8 <memcpy+0x18>
    65dc:	2904b03a 	or	r2,r5,r4
    65e0:	108000cc 	andi	r2,r2,3
    65e4:	10000926 	beq	r2,zero,660c <memcpy+0x3c>
    65e8:	30000626 	beq	r6,zero,6604 <memcpy+0x34>
    65ec:	30cd883a 	add	r6,r6,r3
    65f0:	28800003 	ldbu	r2,0(r5)
    65f4:	29400044 	addi	r5,r5,1
    65f8:	18800005 	stb	r2,0(r3)
    65fc:	18c00044 	addi	r3,r3,1
    6600:	30fffb1e 	bne	r6,r3,65f0 <memcpy+0x20>
    6604:	2005883a 	mov	r2,r4
    6608:	f800283a 	ret
    660c:	3811883a 	mov	r8,r7
    6610:	200f883a 	mov	r7,r4
    6614:	28c00017 	ldw	r3,0(r5)
    6618:	31bffc04 	addi	r6,r6,-16
    661c:	38c00015 	stw	r3,0(r7)
    6620:	28800117 	ldw	r2,4(r5)
    6624:	38800115 	stw	r2,4(r7)
    6628:	28c00217 	ldw	r3,8(r5)
    662c:	38c00215 	stw	r3,8(r7)
    6630:	28800317 	ldw	r2,12(r5)
    6634:	29400404 	addi	r5,r5,16
    6638:	38800315 	stw	r2,12(r7)
    663c:	39c00404 	addi	r7,r7,16
    6640:	41bff436 	bltu	r8,r6,6614 <memcpy+0x44>
    6644:	008000c4 	movi	r2,3
    6648:	1180072e 	bgeu	r2,r6,6668 <memcpy+0x98>
    664c:	1007883a 	mov	r3,r2
    6650:	28800017 	ldw	r2,0(r5)
    6654:	31bfff04 	addi	r6,r6,-4
    6658:	29400104 	addi	r5,r5,4
    665c:	38800015 	stw	r2,0(r7)
    6660:	39c00104 	addi	r7,r7,4
    6664:	19bffa36 	bltu	r3,r6,6650 <memcpy+0x80>
    6668:	3807883a 	mov	r3,r7
    666c:	003fde06 	br	65e8 <memcpy+0x18>

00006670 <memmove>:
    6670:	2807883a 	mov	r3,r5
    6674:	2011883a 	mov	r8,r4
    6678:	29000c2e 	bgeu	r5,r4,66ac <memmove+0x3c>
    667c:	298f883a 	add	r7,r5,r6
    6680:	21c00a2e 	bgeu	r4,r7,66ac <memmove+0x3c>
    6684:	30000726 	beq	r6,zero,66a4 <memmove+0x34>
    6688:	2187883a 	add	r3,r4,r6
    668c:	198dc83a 	sub	r6,r3,r6
    6690:	39ffffc4 	addi	r7,r7,-1
    6694:	38800003 	ldbu	r2,0(r7)
    6698:	18ffffc4 	addi	r3,r3,-1
    669c:	18800005 	stb	r2,0(r3)
    66a0:	19bffb1e 	bne	r3,r6,6690 <memmove+0x20>
    66a4:	2005883a 	mov	r2,r4
    66a8:	f800283a 	ret
    66ac:	01c003c4 	movi	r7,15
    66b0:	39800a36 	bltu	r7,r6,66dc <memmove+0x6c>
    66b4:	303ffb26 	beq	r6,zero,66a4 <memmove+0x34>
    66b8:	400f883a 	mov	r7,r8
    66bc:	320d883a 	add	r6,r6,r8
    66c0:	28800003 	ldbu	r2,0(r5)
    66c4:	29400044 	addi	r5,r5,1
    66c8:	38800005 	stb	r2,0(r7)
    66cc:	39c00044 	addi	r7,r7,1
    66d0:	39bffb1e 	bne	r7,r6,66c0 <memmove+0x50>
    66d4:	2005883a 	mov	r2,r4
    66d8:	f800283a 	ret
    66dc:	1904b03a 	or	r2,r3,r4
    66e0:	108000cc 	andi	r2,r2,3
    66e4:	103ff31e 	bne	r2,zero,66b4 <memmove+0x44>
    66e8:	3811883a 	mov	r8,r7
    66ec:	180b883a 	mov	r5,r3
    66f0:	200f883a 	mov	r7,r4
    66f4:	28c00017 	ldw	r3,0(r5)
    66f8:	31bffc04 	addi	r6,r6,-16
    66fc:	38c00015 	stw	r3,0(r7)
    6700:	28800117 	ldw	r2,4(r5)
    6704:	38800115 	stw	r2,4(r7)
    6708:	28c00217 	ldw	r3,8(r5)
    670c:	38c00215 	stw	r3,8(r7)
    6710:	28800317 	ldw	r2,12(r5)
    6714:	29400404 	addi	r5,r5,16
    6718:	38800315 	stw	r2,12(r7)
    671c:	39c00404 	addi	r7,r7,16
    6720:	41bff436 	bltu	r8,r6,66f4 <memmove+0x84>
    6724:	008000c4 	movi	r2,3
    6728:	1180072e 	bgeu	r2,r6,6748 <memmove+0xd8>
    672c:	1007883a 	mov	r3,r2
    6730:	28800017 	ldw	r2,0(r5)
    6734:	31bfff04 	addi	r6,r6,-4
    6738:	29400104 	addi	r5,r5,4
    673c:	38800015 	stw	r2,0(r7)
    6740:	39c00104 	addi	r7,r7,4
    6744:	19bffa36 	bltu	r3,r6,6730 <memmove+0xc0>
    6748:	3811883a 	mov	r8,r7
    674c:	003fd906 	br	66b4 <memmove+0x44>

00006750 <memset>:
    6750:	008000c4 	movi	r2,3
    6754:	29403fcc 	andi	r5,r5,255
    6758:	2007883a 	mov	r3,r4
    675c:	1180022e 	bgeu	r2,r6,6768 <memset+0x18>
    6760:	2084703a 	and	r2,r4,r2
    6764:	10000826 	beq	r2,zero,6788 <memset+0x38>
    6768:	30000526 	beq	r6,zero,6780 <memset+0x30>
    676c:	2805883a 	mov	r2,r5
    6770:	30cd883a 	add	r6,r6,r3
    6774:	18800005 	stb	r2,0(r3)
    6778:	18c00044 	addi	r3,r3,1
    677c:	19bffd1e 	bne	r3,r6,6774 <memset+0x24>
    6780:	2005883a 	mov	r2,r4
    6784:	f800283a 	ret
    6788:	2804923a 	slli	r2,r5,8
    678c:	020003c4 	movi	r8,15
    6790:	200f883a 	mov	r7,r4
    6794:	2884b03a 	or	r2,r5,r2
    6798:	1006943a 	slli	r3,r2,16
    679c:	10c6b03a 	or	r3,r2,r3
    67a0:	41800a2e 	bgeu	r8,r6,67cc <memset+0x7c>
    67a4:	4005883a 	mov	r2,r8
    67a8:	31bffc04 	addi	r6,r6,-16
    67ac:	38c00015 	stw	r3,0(r7)
    67b0:	38c00115 	stw	r3,4(r7)
    67b4:	38c00215 	stw	r3,8(r7)
    67b8:	38c00315 	stw	r3,12(r7)
    67bc:	39c00404 	addi	r7,r7,16
    67c0:	11bff936 	bltu	r2,r6,67a8 <memset+0x58>
    67c4:	008000c4 	movi	r2,3
    67c8:	1180052e 	bgeu	r2,r6,67e0 <memset+0x90>
    67cc:	31bfff04 	addi	r6,r6,-4
    67d0:	008000c4 	movi	r2,3
    67d4:	38c00015 	stw	r3,0(r7)
    67d8:	39c00104 	addi	r7,r7,4
    67dc:	11bffb36 	bltu	r2,r6,67cc <memset+0x7c>
    67e0:	3807883a 	mov	r3,r7
    67e4:	003fe006 	br	6768 <memset+0x18>

000067e8 <_Bfree>:
    67e8:	28000826 	beq	r5,zero,680c <_Bfree+0x24>
    67ec:	28800117 	ldw	r2,4(r5)
    67f0:	21001317 	ldw	r4,76(r4)
    67f4:	1085883a 	add	r2,r2,r2
    67f8:	1085883a 	add	r2,r2,r2
    67fc:	1105883a 	add	r2,r2,r4
    6800:	10c00017 	ldw	r3,0(r2)
    6804:	28c00015 	stw	r3,0(r5)
    6808:	11400015 	stw	r5,0(r2)
    680c:	f800283a 	ret

00006810 <__hi0bits>:
    6810:	20bfffec 	andhi	r2,r4,65535
    6814:	10001426 	beq	r2,zero,6868 <__hi0bits+0x58>
    6818:	0007883a 	mov	r3,zero
    681c:	20bfc02c 	andhi	r2,r4,65280
    6820:	1000021e 	bne	r2,zero,682c <__hi0bits+0x1c>
    6824:	2008923a 	slli	r4,r4,8
    6828:	18c00204 	addi	r3,r3,8
    682c:	20bc002c 	andhi	r2,r4,61440
    6830:	1000021e 	bne	r2,zero,683c <__hi0bits+0x2c>
    6834:	2008913a 	slli	r4,r4,4
    6838:	18c00104 	addi	r3,r3,4
    683c:	20b0002c 	andhi	r2,r4,49152
    6840:	1000031e 	bne	r2,zero,6850 <__hi0bits+0x40>
    6844:	2105883a 	add	r2,r4,r4
    6848:	18c00084 	addi	r3,r3,2
    684c:	1089883a 	add	r4,r2,r2
    6850:	20000316 	blt	r4,zero,6860 <__hi0bits+0x50>
    6854:	2090002c 	andhi	r2,r4,16384
    6858:	10000626 	beq	r2,zero,6874 <__hi0bits+0x64>
    685c:	18c00044 	addi	r3,r3,1
    6860:	1805883a 	mov	r2,r3
    6864:	f800283a 	ret
    6868:	2008943a 	slli	r4,r4,16
    686c:	00c00404 	movi	r3,16
    6870:	003fea06 	br	681c <__hi0bits+0xc>
    6874:	00c00804 	movi	r3,32
    6878:	1805883a 	mov	r2,r3
    687c:	f800283a 	ret

00006880 <__lo0bits>:
    6880:	20c00017 	ldw	r3,0(r4)
    6884:	188001cc 	andi	r2,r3,7
    6888:	10000a26 	beq	r2,zero,68b4 <__lo0bits+0x34>
    688c:	1880004c 	andi	r2,r3,1
    6890:	1005003a 	cmpeq	r2,r2,zero
    6894:	10002126 	beq	r2,zero,691c <__lo0bits+0x9c>
    6898:	1880008c 	andi	r2,r3,2
    689c:	1000251e 	bne	r2,zero,6934 <__lo0bits+0xb4>
    68a0:	1804d0ba 	srli	r2,r3,2
    68a4:	01400084 	movi	r5,2
    68a8:	20800015 	stw	r2,0(r4)
    68ac:	2805883a 	mov	r2,r5
    68b0:	f800283a 	ret
    68b4:	18bfffcc 	andi	r2,r3,65535
    68b8:	10001526 	beq	r2,zero,6910 <__lo0bits+0x90>
    68bc:	000b883a 	mov	r5,zero
    68c0:	18803fcc 	andi	r2,r3,255
    68c4:	1000021e 	bne	r2,zero,68d0 <__lo0bits+0x50>
    68c8:	1806d23a 	srli	r3,r3,8
    68cc:	29400204 	addi	r5,r5,8
    68d0:	188003cc 	andi	r2,r3,15
    68d4:	1000021e 	bne	r2,zero,68e0 <__lo0bits+0x60>
    68d8:	1806d13a 	srli	r3,r3,4
    68dc:	29400104 	addi	r5,r5,4
    68e0:	188000cc 	andi	r2,r3,3
    68e4:	1000021e 	bne	r2,zero,68f0 <__lo0bits+0x70>
    68e8:	1806d0ba 	srli	r3,r3,2
    68ec:	29400084 	addi	r5,r5,2
    68f0:	1880004c 	andi	r2,r3,1
    68f4:	1000031e 	bne	r2,zero,6904 <__lo0bits+0x84>
    68f8:	1806d07a 	srli	r3,r3,1
    68fc:	18000a26 	beq	r3,zero,6928 <__lo0bits+0xa8>
    6900:	29400044 	addi	r5,r5,1
    6904:	2805883a 	mov	r2,r5
    6908:	20c00015 	stw	r3,0(r4)
    690c:	f800283a 	ret
    6910:	1806d43a 	srli	r3,r3,16
    6914:	01400404 	movi	r5,16
    6918:	003fe906 	br	68c0 <__lo0bits+0x40>
    691c:	000b883a 	mov	r5,zero
    6920:	2805883a 	mov	r2,r5
    6924:	f800283a 	ret
    6928:	01400804 	movi	r5,32
    692c:	2805883a 	mov	r2,r5
    6930:	f800283a 	ret
    6934:	1804d07a 	srli	r2,r3,1
    6938:	01400044 	movi	r5,1
    693c:	20800015 	stw	r2,0(r4)
    6940:	003fda06 	br	68ac <__lo0bits+0x2c>

00006944 <__mcmp>:
    6944:	20800417 	ldw	r2,16(r4)
    6948:	28c00417 	ldw	r3,16(r5)
    694c:	10cfc83a 	sub	r7,r2,r3
    6950:	38000c1e 	bne	r7,zero,6984 <__mcmp+0x40>
    6954:	18c5883a 	add	r2,r3,r3
    6958:	1085883a 	add	r2,r2,r2
    695c:	10c00504 	addi	r3,r2,20
    6960:	21000504 	addi	r4,r4,20
    6964:	28cb883a 	add	r5,r5,r3
    6968:	2085883a 	add	r2,r4,r2
    696c:	10bfff04 	addi	r2,r2,-4
    6970:	297fff04 	addi	r5,r5,-4
    6974:	11800017 	ldw	r6,0(r2)
    6978:	28c00017 	ldw	r3,0(r5)
    697c:	30c0031e 	bne	r6,r3,698c <__mcmp+0x48>
    6980:	20bffa36 	bltu	r4,r2,696c <__mcmp+0x28>
    6984:	3805883a 	mov	r2,r7
    6988:	f800283a 	ret
    698c:	30c00336 	bltu	r6,r3,699c <__mcmp+0x58>
    6990:	01c00044 	movi	r7,1
    6994:	3805883a 	mov	r2,r7
    6998:	f800283a 	ret
    699c:	01ffffc4 	movi	r7,-1
    69a0:	003ff806 	br	6984 <__mcmp+0x40>

000069a4 <__ulp>:
    69a4:	295ffc2c 	andhi	r5,r5,32752
    69a8:	013f3034 	movhi	r4,64704
    69ac:	290b883a 	add	r5,r5,r4
    69b0:	0145c83a 	sub	r2,zero,r5
    69b4:	1007d53a 	srai	r3,r2,20
    69b8:	000d883a 	mov	r6,zero
    69bc:	0140040e 	bge	zero,r5,69d0 <__ulp+0x2c>
    69c0:	280f883a 	mov	r7,r5
    69c4:	3807883a 	mov	r3,r7
    69c8:	3005883a 	mov	r2,r6
    69cc:	f800283a 	ret
    69d0:	008004c4 	movi	r2,19
    69d4:	193ffb04 	addi	r4,r3,-20
    69d8:	10c00c0e 	bge	r2,r3,6a0c <__ulp+0x68>
    69dc:	008007c4 	movi	r2,31
    69e0:	1107c83a 	sub	r3,r2,r4
    69e4:	00800784 	movi	r2,30
    69e8:	01400044 	movi	r5,1
    69ec:	11000216 	blt	r2,r4,69f8 <__ulp+0x54>
    69f0:	00800044 	movi	r2,1
    69f4:	10ca983a 	sll	r5,r2,r3
    69f8:	000f883a 	mov	r7,zero
    69fc:	280d883a 	mov	r6,r5
    6a00:	3807883a 	mov	r3,r7
    6a04:	3005883a 	mov	r2,r6
    6a08:	f800283a 	ret
    6a0c:	00800234 	movhi	r2,8
    6a10:	10cfd83a 	sra	r7,r2,r3
    6a14:	000d883a 	mov	r6,zero
    6a18:	3005883a 	mov	r2,r6
    6a1c:	3807883a 	mov	r3,r7
    6a20:	f800283a 	ret

00006a24 <__b2d>:
    6a24:	20800417 	ldw	r2,16(r4)
    6a28:	defff904 	addi	sp,sp,-28
    6a2c:	dd000415 	stw	r20,16(sp)
    6a30:	1085883a 	add	r2,r2,r2
    6a34:	25000504 	addi	r20,r4,20
    6a38:	1085883a 	add	r2,r2,r2
    6a3c:	dc000015 	stw	r16,0(sp)
    6a40:	a0a1883a 	add	r16,r20,r2
    6a44:	dd400515 	stw	r21,20(sp)
    6a48:	857fff17 	ldw	r21,-4(r16)
    6a4c:	dc400115 	stw	r17,4(sp)
    6a50:	dfc00615 	stw	ra,24(sp)
    6a54:	a809883a 	mov	r4,r21
    6a58:	2823883a 	mov	r17,r5
    6a5c:	dcc00315 	stw	r19,12(sp)
    6a60:	dc800215 	stw	r18,8(sp)
    6a64:	00068100 	call	6810 <__hi0bits>
    6a68:	100b883a 	mov	r5,r2
    6a6c:	00800804 	movi	r2,32
    6a70:	1145c83a 	sub	r2,r2,r5
    6a74:	88800015 	stw	r2,0(r17)
    6a78:	00800284 	movi	r2,10
    6a7c:	80ffff04 	addi	r3,r16,-4
    6a80:	11401416 	blt	r2,r5,6ad4 <__b2d+0xb0>
    6a84:	008002c4 	movi	r2,11
    6a88:	1149c83a 	sub	r4,r2,r5
    6a8c:	a0c02736 	bltu	r20,r3,6b2c <__b2d+0x108>
    6a90:	000d883a 	mov	r6,zero
    6a94:	28800544 	addi	r2,r5,21
    6a98:	a906d83a 	srl	r3,r21,r4
    6a9c:	a884983a 	sll	r2,r21,r2
    6aa0:	1ccffc34 	orhi	r19,r3,16368
    6aa4:	11a4b03a 	or	r18,r2,r6
    6aa8:	9005883a 	mov	r2,r18
    6aac:	9807883a 	mov	r3,r19
    6ab0:	dfc00617 	ldw	ra,24(sp)
    6ab4:	dd400517 	ldw	r21,20(sp)
    6ab8:	dd000417 	ldw	r20,16(sp)
    6abc:	dcc00317 	ldw	r19,12(sp)
    6ac0:	dc800217 	ldw	r18,8(sp)
    6ac4:	dc400117 	ldw	r17,4(sp)
    6ac8:	dc000017 	ldw	r16,0(sp)
    6acc:	dec00704 	addi	sp,sp,28
    6ad0:	f800283a 	ret
    6ad4:	a0c00e36 	bltu	r20,r3,6b10 <__b2d+0xec>
    6ad8:	293ffd44 	addi	r4,r5,-11
    6adc:	000d883a 	mov	r6,zero
    6ae0:	20000f26 	beq	r4,zero,6b20 <__b2d+0xfc>
    6ae4:	00800804 	movi	r2,32
    6ae8:	110bc83a 	sub	r5,r2,r4
    6aec:	a0c01236 	bltu	r20,r3,6b38 <__b2d+0x114>
    6af0:	000f883a 	mov	r7,zero
    6af4:	a904983a 	sll	r2,r21,r4
    6af8:	3146d83a 	srl	r3,r6,r5
    6afc:	3108983a 	sll	r4,r6,r4
    6b00:	108ffc34 	orhi	r2,r2,16368
    6b04:	18a6b03a 	or	r19,r3,r2
    6b08:	3924b03a 	or	r18,r7,r4
    6b0c:	003fe606 	br	6aa8 <__b2d+0x84>
    6b10:	293ffd44 	addi	r4,r5,-11
    6b14:	81bffe17 	ldw	r6,-8(r16)
    6b18:	80fffe04 	addi	r3,r16,-8
    6b1c:	203ff11e 	bne	r4,zero,6ae4 <__b2d+0xc0>
    6b20:	accffc34 	orhi	r19,r21,16368
    6b24:	3025883a 	mov	r18,r6
    6b28:	003fdf06 	br	6aa8 <__b2d+0x84>
    6b2c:	18bfff17 	ldw	r2,-4(r3)
    6b30:	110cd83a 	srl	r6,r2,r4
    6b34:	003fd706 	br	6a94 <__b2d+0x70>
    6b38:	18bfff17 	ldw	r2,-4(r3)
    6b3c:	114ed83a 	srl	r7,r2,r5
    6b40:	003fec06 	br	6af4 <__b2d+0xd0>

00006b44 <__ratio>:
    6b44:	defff904 	addi	sp,sp,-28
    6b48:	dc400215 	stw	r17,8(sp)
    6b4c:	2823883a 	mov	r17,r5
    6b50:	d80b883a 	mov	r5,sp
    6b54:	dfc00615 	stw	ra,24(sp)
    6b58:	dd000515 	stw	r20,20(sp)
    6b5c:	dcc00415 	stw	r19,16(sp)
    6b60:	dc800315 	stw	r18,12(sp)
    6b64:	2025883a 	mov	r18,r4
    6b68:	0006a240 	call	6a24 <__b2d>
    6b6c:	8809883a 	mov	r4,r17
    6b70:	d9400104 	addi	r5,sp,4
    6b74:	1027883a 	mov	r19,r2
    6b78:	1829883a 	mov	r20,r3
    6b7c:	0006a240 	call	6a24 <__b2d>
    6b80:	89000417 	ldw	r4,16(r17)
    6b84:	91c00417 	ldw	r7,16(r18)
    6b88:	d9800117 	ldw	r6,4(sp)
    6b8c:	180b883a 	mov	r5,r3
    6b90:	390fc83a 	sub	r7,r7,r4
    6b94:	1009883a 	mov	r4,r2
    6b98:	d8800017 	ldw	r2,0(sp)
    6b9c:	380e917a 	slli	r7,r7,5
    6ba0:	2011883a 	mov	r8,r4
    6ba4:	1185c83a 	sub	r2,r2,r6
    6ba8:	11c5883a 	add	r2,r2,r7
    6bac:	1006953a 	slli	r3,r2,20
    6bb0:	2813883a 	mov	r9,r5
    6bb4:	00800d0e 	bge	zero,r2,6bec <__ratio+0xa8>
    6bb8:	1d29883a 	add	r20,r3,r20
    6bbc:	a00b883a 	mov	r5,r20
    6bc0:	480f883a 	mov	r7,r9
    6bc4:	9809883a 	mov	r4,r19
    6bc8:	400d883a 	mov	r6,r8
    6bcc:	0009c680 	call	9c68 <__divdf3>
    6bd0:	dfc00617 	ldw	ra,24(sp)
    6bd4:	dd000517 	ldw	r20,20(sp)
    6bd8:	dcc00417 	ldw	r19,16(sp)
    6bdc:	dc800317 	ldw	r18,12(sp)
    6be0:	dc400217 	ldw	r17,8(sp)
    6be4:	dec00704 	addi	sp,sp,28
    6be8:	f800283a 	ret
    6bec:	28d3c83a 	sub	r9,r5,r3
    6bf0:	003ff206 	br	6bbc <__ratio+0x78>

00006bf4 <_mprec_log10>:
    6bf4:	defffe04 	addi	sp,sp,-8
    6bf8:	008005c4 	movi	r2,23
    6bfc:	dc000015 	stw	r16,0(sp)
    6c00:	dfc00115 	stw	ra,4(sp)
    6c04:	2021883a 	mov	r16,r4
    6c08:	11000c16 	blt	r2,r4,6c3c <_mprec_log10+0x48>
    6c0c:	200490fa 	slli	r2,r4,3
    6c10:	00c00074 	movhi	r3,1
    6c14:	18f61c04 	addi	r3,r3,-10128
    6c18:	10c5883a 	add	r2,r2,r3
    6c1c:	12400117 	ldw	r9,4(r2)
    6c20:	12000017 	ldw	r8,0(r2)
    6c24:	4807883a 	mov	r3,r9
    6c28:	4005883a 	mov	r2,r8
    6c2c:	dfc00117 	ldw	ra,4(sp)
    6c30:	dc000017 	ldw	r16,0(sp)
    6c34:	dec00204 	addi	sp,sp,8
    6c38:	f800283a 	ret
    6c3c:	0011883a 	mov	r8,zero
    6c40:	024ffc34 	movhi	r9,16368
    6c44:	0005883a 	mov	r2,zero
    6c48:	00d00934 	movhi	r3,16420
    6c4c:	480b883a 	mov	r5,r9
    6c50:	4009883a 	mov	r4,r8
    6c54:	180f883a 	mov	r7,r3
    6c58:	100d883a 	mov	r6,r2
    6c5c:	00098a40 	call	98a4 <__muldf3>
    6c60:	843fffc4 	addi	r16,r16,-1
    6c64:	1011883a 	mov	r8,r2
    6c68:	1813883a 	mov	r9,r3
    6c6c:	803ff51e 	bne	r16,zero,6c44 <_mprec_log10+0x50>
    6c70:	4005883a 	mov	r2,r8
    6c74:	4807883a 	mov	r3,r9
    6c78:	dfc00117 	ldw	ra,4(sp)
    6c7c:	dc000017 	ldw	r16,0(sp)
    6c80:	dec00204 	addi	sp,sp,8
    6c84:	f800283a 	ret

00006c88 <__copybits>:
    6c88:	297fffc4 	addi	r5,r5,-1
    6c8c:	30800417 	ldw	r2,16(r6)
    6c90:	280bd17a 	srai	r5,r5,5
    6c94:	31800504 	addi	r6,r6,20
    6c98:	1085883a 	add	r2,r2,r2
    6c9c:	294b883a 	add	r5,r5,r5
    6ca0:	294b883a 	add	r5,r5,r5
    6ca4:	1085883a 	add	r2,r2,r2
    6ca8:	290b883a 	add	r5,r5,r4
    6cac:	3087883a 	add	r3,r6,r2
    6cb0:	29400104 	addi	r5,r5,4
    6cb4:	30c0052e 	bgeu	r6,r3,6ccc <__copybits+0x44>
    6cb8:	30800017 	ldw	r2,0(r6)
    6cbc:	31800104 	addi	r6,r6,4
    6cc0:	20800015 	stw	r2,0(r4)
    6cc4:	21000104 	addi	r4,r4,4
    6cc8:	30fffb36 	bltu	r6,r3,6cb8 <__copybits+0x30>
    6ccc:	2140032e 	bgeu	r4,r5,6cdc <__copybits+0x54>
    6cd0:	20000015 	stw	zero,0(r4)
    6cd4:	21000104 	addi	r4,r4,4
    6cd8:	217ffd36 	bltu	r4,r5,6cd0 <__copybits+0x48>
    6cdc:	f800283a 	ret

00006ce0 <__any_on>:
    6ce0:	20800417 	ldw	r2,16(r4)
    6ce4:	2807d17a 	srai	r3,r5,5
    6ce8:	21000504 	addi	r4,r4,20
    6cec:	10c00d0e 	bge	r2,r3,6d24 <__any_on+0x44>
    6cf0:	1085883a 	add	r2,r2,r2
    6cf4:	1085883a 	add	r2,r2,r2
    6cf8:	208d883a 	add	r6,r4,r2
    6cfc:	2180182e 	bgeu	r4,r6,6d60 <__any_on+0x80>
    6d00:	30bfff17 	ldw	r2,-4(r6)
    6d04:	30ffff04 	addi	r3,r6,-4
    6d08:	1000041e 	bne	r2,zero,6d1c <__any_on+0x3c>
    6d0c:	20c0142e 	bgeu	r4,r3,6d60 <__any_on+0x80>
    6d10:	18ffff04 	addi	r3,r3,-4
    6d14:	18800017 	ldw	r2,0(r3)
    6d18:	103ffc26 	beq	r2,zero,6d0c <__any_on+0x2c>
    6d1c:	00800044 	movi	r2,1
    6d20:	f800283a 	ret
    6d24:	18800a0e 	bge	r3,r2,6d50 <__any_on+0x70>
    6d28:	294007cc 	andi	r5,r5,31
    6d2c:	28000826 	beq	r5,zero,6d50 <__any_on+0x70>
    6d30:	18c5883a 	add	r2,r3,r3
    6d34:	1085883a 	add	r2,r2,r2
    6d38:	208d883a 	add	r6,r4,r2
    6d3c:	30c00017 	ldw	r3,0(r6)
    6d40:	1944d83a 	srl	r2,r3,r5
    6d44:	1144983a 	sll	r2,r2,r5
    6d48:	18bff41e 	bne	r3,r2,6d1c <__any_on+0x3c>
    6d4c:	003feb06 	br	6cfc <__any_on+0x1c>
    6d50:	18c5883a 	add	r2,r3,r3
    6d54:	1085883a 	add	r2,r2,r2
    6d58:	208d883a 	add	r6,r4,r2
    6d5c:	003fe706 	br	6cfc <__any_on+0x1c>
    6d60:	0005883a 	mov	r2,zero
    6d64:	f800283a 	ret

00006d68 <_Balloc>:
    6d68:	20c01317 	ldw	r3,76(r4)
    6d6c:	defffb04 	addi	sp,sp,-20
    6d70:	dcc00315 	stw	r19,12(sp)
    6d74:	dc800215 	stw	r18,8(sp)
    6d78:	dfc00415 	stw	ra,16(sp)
    6d7c:	2825883a 	mov	r18,r5
    6d80:	dc400115 	stw	r17,4(sp)
    6d84:	dc000015 	stw	r16,0(sp)
    6d88:	2027883a 	mov	r19,r4
    6d8c:	01800404 	movi	r6,16
    6d90:	01400104 	movi	r5,4
    6d94:	18001726 	beq	r3,zero,6df4 <_Balloc+0x8c>
    6d98:	01400044 	movi	r5,1
    6d9c:	9485883a 	add	r2,r18,r18
    6da0:	2ca2983a 	sll	r17,r5,r18
    6da4:	1085883a 	add	r2,r2,r2
    6da8:	10c7883a 	add	r3,r2,r3
    6dac:	1c000017 	ldw	r16,0(r3)
    6db0:	8c4d883a 	add	r6,r17,r17
    6db4:	318d883a 	add	r6,r6,r6
    6db8:	9809883a 	mov	r4,r19
    6dbc:	31800504 	addi	r6,r6,20
    6dc0:	80001226 	beq	r16,zero,6e0c <_Balloc+0xa4>
    6dc4:	80800017 	ldw	r2,0(r16)
    6dc8:	18800015 	stw	r2,0(r3)
    6dcc:	80000415 	stw	zero,16(r16)
    6dd0:	80000315 	stw	zero,12(r16)
    6dd4:	8005883a 	mov	r2,r16
    6dd8:	dfc00417 	ldw	ra,16(sp)
    6ddc:	dcc00317 	ldw	r19,12(sp)
    6de0:	dc800217 	ldw	r18,8(sp)
    6de4:	dc400117 	ldw	r17,4(sp)
    6de8:	dc000017 	ldw	r16,0(sp)
    6dec:	dec00504 	addi	sp,sp,20
    6df0:	f800283a 	ret
    6df4:	00083f80 	call	83f8 <_calloc_r>
    6df8:	1007883a 	mov	r3,r2
    6dfc:	0021883a 	mov	r16,zero
    6e00:	98801315 	stw	r2,76(r19)
    6e04:	103fe41e 	bne	r2,zero,6d98 <_Balloc+0x30>
    6e08:	003ff206 	br	6dd4 <_Balloc+0x6c>
    6e0c:	00083f80 	call	83f8 <_calloc_r>
    6e10:	103ff026 	beq	r2,zero,6dd4 <_Balloc+0x6c>
    6e14:	1021883a 	mov	r16,r2
    6e18:	14800115 	stw	r18,4(r2)
    6e1c:	14400215 	stw	r17,8(r2)
    6e20:	003fea06 	br	6dcc <_Balloc+0x64>

00006e24 <__d2b>:
    6e24:	defff504 	addi	sp,sp,-44
    6e28:	dcc00515 	stw	r19,20(sp)
    6e2c:	04c00044 	movi	r19,1
    6e30:	dc000215 	stw	r16,8(sp)
    6e34:	2821883a 	mov	r16,r5
    6e38:	980b883a 	mov	r5,r19
    6e3c:	ddc00915 	stw	r23,36(sp)
    6e40:	dd800815 	stw	r22,32(sp)
    6e44:	dd400715 	stw	r21,28(sp)
    6e48:	dd000615 	stw	r20,24(sp)
    6e4c:	dc800415 	stw	r18,16(sp)
    6e50:	dc400315 	stw	r17,12(sp)
    6e54:	dfc00a15 	stw	ra,40(sp)
    6e58:	3023883a 	mov	r17,r6
    6e5c:	382d883a 	mov	r22,r7
    6e60:	ddc00b17 	ldw	r23,44(sp)
    6e64:	0006d680 	call	6d68 <_Balloc>
    6e68:	1025883a 	mov	r18,r2
    6e6c:	00a00034 	movhi	r2,32768
    6e70:	10bfffc4 	addi	r2,r2,-1
    6e74:	8888703a 	and	r4,r17,r2
    6e78:	202ad53a 	srli	r21,r4,20
    6e7c:	00800434 	movhi	r2,16
    6e80:	10bfffc4 	addi	r2,r2,-1
    6e84:	8886703a 	and	r3,r17,r2
    6e88:	a829003a 	cmpeq	r20,r21,zero
    6e8c:	800b883a 	mov	r5,r16
    6e90:	d8c00115 	stw	r3,4(sp)
    6e94:	94000504 	addi	r16,r18,20
    6e98:	a000021e 	bne	r20,zero,6ea4 <__d2b+0x80>
    6e9c:	18c00434 	orhi	r3,r3,16
    6ea0:	d8c00115 	stw	r3,4(sp)
    6ea4:	28002726 	beq	r5,zero,6f44 <__d2b+0x120>
    6ea8:	d809883a 	mov	r4,sp
    6eac:	d9400015 	stw	r5,0(sp)
    6eb0:	00068800 	call	6880 <__lo0bits>
    6eb4:	100d883a 	mov	r6,r2
    6eb8:	10003526 	beq	r2,zero,6f90 <__d2b+0x16c>
    6ebc:	d8c00117 	ldw	r3,4(sp)
    6ec0:	00800804 	movi	r2,32
    6ec4:	1185c83a 	sub	r2,r2,r6
    6ec8:	d9000017 	ldw	r4,0(sp)
    6ecc:	1886983a 	sll	r3,r3,r2
    6ed0:	1906b03a 	or	r3,r3,r4
    6ed4:	90c00515 	stw	r3,20(r18)
    6ed8:	d8c00117 	ldw	r3,4(sp)
    6edc:	1986d83a 	srl	r3,r3,r6
    6ee0:	d8c00115 	stw	r3,4(sp)
    6ee4:	180b003a 	cmpeq	r5,r3,zero
    6ee8:	00800084 	movi	r2,2
    6eec:	114bc83a 	sub	r5,r2,r5
    6ef0:	80c00115 	stw	r3,4(r16)
    6ef4:	91400415 	stw	r5,16(r18)
    6ef8:	a0001a1e 	bne	r20,zero,6f64 <__d2b+0x140>
    6efc:	3545883a 	add	r2,r6,r21
    6f00:	10bef344 	addi	r2,r2,-1075
    6f04:	00c00d44 	movi	r3,53
    6f08:	b0800015 	stw	r2,0(r22)
    6f0c:	1987c83a 	sub	r3,r3,r6
    6f10:	b8c00015 	stw	r3,0(r23)
    6f14:	9005883a 	mov	r2,r18
    6f18:	dfc00a17 	ldw	ra,40(sp)
    6f1c:	ddc00917 	ldw	r23,36(sp)
    6f20:	dd800817 	ldw	r22,32(sp)
    6f24:	dd400717 	ldw	r21,28(sp)
    6f28:	dd000617 	ldw	r20,24(sp)
    6f2c:	dcc00517 	ldw	r19,20(sp)
    6f30:	dc800417 	ldw	r18,16(sp)
    6f34:	dc400317 	ldw	r17,12(sp)
    6f38:	dc000217 	ldw	r16,8(sp)
    6f3c:	dec00b04 	addi	sp,sp,44
    6f40:	f800283a 	ret
    6f44:	d9000104 	addi	r4,sp,4
    6f48:	00068800 	call	6880 <__lo0bits>
    6f4c:	11800804 	addi	r6,r2,32
    6f50:	d8800117 	ldw	r2,4(sp)
    6f54:	94c00415 	stw	r19,16(r18)
    6f58:	980b883a 	mov	r5,r19
    6f5c:	90800515 	stw	r2,20(r18)
    6f60:	a03fe626 	beq	r20,zero,6efc <__d2b+0xd8>
    6f64:	2945883a 	add	r2,r5,r5
    6f68:	1085883a 	add	r2,r2,r2
    6f6c:	1405883a 	add	r2,r2,r16
    6f70:	113fff17 	ldw	r4,-4(r2)
    6f74:	30fef384 	addi	r3,r6,-1074
    6f78:	2820917a 	slli	r16,r5,5
    6f7c:	b0c00015 	stw	r3,0(r22)
    6f80:	00068100 	call	6810 <__hi0bits>
    6f84:	80a1c83a 	sub	r16,r16,r2
    6f88:	bc000015 	stw	r16,0(r23)
    6f8c:	003fe106 	br	6f14 <__d2b+0xf0>
    6f90:	d8800017 	ldw	r2,0(sp)
    6f94:	90800515 	stw	r2,20(r18)
    6f98:	d8c00117 	ldw	r3,4(sp)
    6f9c:	003fd106 	br	6ee4 <__d2b+0xc0>

00006fa0 <__mdiff>:
    6fa0:	defffb04 	addi	sp,sp,-20
    6fa4:	dc000015 	stw	r16,0(sp)
    6fa8:	2821883a 	mov	r16,r5
    6fac:	dc800215 	stw	r18,8(sp)
    6fb0:	300b883a 	mov	r5,r6
    6fb4:	2025883a 	mov	r18,r4
    6fb8:	8009883a 	mov	r4,r16
    6fbc:	dc400115 	stw	r17,4(sp)
    6fc0:	dfc00415 	stw	ra,16(sp)
    6fc4:	dcc00315 	stw	r19,12(sp)
    6fc8:	3023883a 	mov	r17,r6
    6fcc:	00069440 	call	6944 <__mcmp>
    6fd0:	10004226 	beq	r2,zero,70dc <__mdiff+0x13c>
    6fd4:	10005016 	blt	r2,zero,7118 <__mdiff+0x178>
    6fd8:	0027883a 	mov	r19,zero
    6fdc:	81400117 	ldw	r5,4(r16)
    6fe0:	9009883a 	mov	r4,r18
    6fe4:	0006d680 	call	6d68 <_Balloc>
    6fe8:	1019883a 	mov	r12,r2
    6fec:	82800417 	ldw	r10,16(r16)
    6ff0:	88800417 	ldw	r2,16(r17)
    6ff4:	81800504 	addi	r6,r16,20
    6ff8:	5287883a 	add	r3,r10,r10
    6ffc:	1085883a 	add	r2,r2,r2
    7000:	18c7883a 	add	r3,r3,r3
    7004:	1085883a 	add	r2,r2,r2
    7008:	8a000504 	addi	r8,r17,20
    700c:	64c00315 	stw	r19,12(r12)
    7010:	30db883a 	add	r13,r6,r3
    7014:	4097883a 	add	r11,r8,r2
    7018:	61c00504 	addi	r7,r12,20
    701c:	0013883a 	mov	r9,zero
    7020:	31000017 	ldw	r4,0(r6)
    7024:	41400017 	ldw	r5,0(r8)
    7028:	42000104 	addi	r8,r8,4
    702c:	20bfffcc 	andi	r2,r4,65535
    7030:	28ffffcc 	andi	r3,r5,65535
    7034:	10c5c83a 	sub	r2,r2,r3
    7038:	1245883a 	add	r2,r2,r9
    703c:	2008d43a 	srli	r4,r4,16
    7040:	280ad43a 	srli	r5,r5,16
    7044:	1007d43a 	srai	r3,r2,16
    7048:	3880000d 	sth	r2,0(r7)
    704c:	2149c83a 	sub	r4,r4,r5
    7050:	20c9883a 	add	r4,r4,r3
    7054:	3900008d 	sth	r4,2(r7)
    7058:	31800104 	addi	r6,r6,4
    705c:	39c00104 	addi	r7,r7,4
    7060:	2013d43a 	srai	r9,r4,16
    7064:	42ffee36 	bltu	r8,r11,7020 <__mdiff+0x80>
    7068:	33400c2e 	bgeu	r6,r13,709c <__mdiff+0xfc>
    706c:	30800017 	ldw	r2,0(r6)
    7070:	31800104 	addi	r6,r6,4
    7074:	10ffffcc 	andi	r3,r2,65535
    7078:	1a47883a 	add	r3,r3,r9
    707c:	1004d43a 	srli	r2,r2,16
    7080:	1809d43a 	srai	r4,r3,16
    7084:	38c0000d 	sth	r3,0(r7)
    7088:	1105883a 	add	r2,r2,r4
    708c:	3880008d 	sth	r2,2(r7)
    7090:	1013d43a 	srai	r9,r2,16
    7094:	39c00104 	addi	r7,r7,4
    7098:	337ff436 	bltu	r6,r13,706c <__mdiff+0xcc>
    709c:	38bfff17 	ldw	r2,-4(r7)
    70a0:	38ffff04 	addi	r3,r7,-4
    70a4:	1000041e 	bne	r2,zero,70b8 <__mdiff+0x118>
    70a8:	18ffff04 	addi	r3,r3,-4
    70ac:	18800017 	ldw	r2,0(r3)
    70b0:	52bfffc4 	addi	r10,r10,-1
    70b4:	103ffc26 	beq	r2,zero,70a8 <__mdiff+0x108>
    70b8:	6005883a 	mov	r2,r12
    70bc:	62800415 	stw	r10,16(r12)
    70c0:	dfc00417 	ldw	ra,16(sp)
    70c4:	dcc00317 	ldw	r19,12(sp)
    70c8:	dc800217 	ldw	r18,8(sp)
    70cc:	dc400117 	ldw	r17,4(sp)
    70d0:	dc000017 	ldw	r16,0(sp)
    70d4:	dec00504 	addi	sp,sp,20
    70d8:	f800283a 	ret
    70dc:	9009883a 	mov	r4,r18
    70e0:	000b883a 	mov	r5,zero
    70e4:	0006d680 	call	6d68 <_Balloc>
    70e8:	1019883a 	mov	r12,r2
    70ec:	00800044 	movi	r2,1
    70f0:	60800415 	stw	r2,16(r12)
    70f4:	6005883a 	mov	r2,r12
    70f8:	60000515 	stw	zero,20(r12)
    70fc:	dfc00417 	ldw	ra,16(sp)
    7100:	dcc00317 	ldw	r19,12(sp)
    7104:	dc800217 	ldw	r18,8(sp)
    7108:	dc400117 	ldw	r17,4(sp)
    710c:	dc000017 	ldw	r16,0(sp)
    7110:	dec00504 	addi	sp,sp,20
    7114:	f800283a 	ret
    7118:	880d883a 	mov	r6,r17
    711c:	04c00044 	movi	r19,1
    7120:	8023883a 	mov	r17,r16
    7124:	3021883a 	mov	r16,r6
    7128:	003fac06 	br	6fdc <__mdiff+0x3c>

0000712c <__lshift>:
    712c:	defff904 	addi	sp,sp,-28
    7130:	28800417 	ldw	r2,16(r5)
    7134:	dc000015 	stw	r16,0(sp)
    7138:	3021d17a 	srai	r16,r6,5
    713c:	28c00217 	ldw	r3,8(r5)
    7140:	10800044 	addi	r2,r2,1
    7144:	dc400115 	stw	r17,4(sp)
    7148:	80a3883a 	add	r17,r16,r2
    714c:	dd400515 	stw	r21,20(sp)
    7150:	dd000415 	stw	r20,16(sp)
    7154:	dc800215 	stw	r18,8(sp)
    7158:	dfc00615 	stw	ra,24(sp)
    715c:	2825883a 	mov	r18,r5
    7160:	dcc00315 	stw	r19,12(sp)
    7164:	3029883a 	mov	r20,r6
    7168:	202b883a 	mov	r21,r4
    716c:	29400117 	ldw	r5,4(r5)
    7170:	1c40030e 	bge	r3,r17,7180 <__lshift+0x54>
    7174:	18c7883a 	add	r3,r3,r3
    7178:	29400044 	addi	r5,r5,1
    717c:	1c7ffd16 	blt	r3,r17,7174 <__lshift+0x48>
    7180:	a809883a 	mov	r4,r21
    7184:	0006d680 	call	6d68 <_Balloc>
    7188:	1027883a 	mov	r19,r2
    718c:	11400504 	addi	r5,r2,20
    7190:	0400090e 	bge	zero,r16,71b8 <__lshift+0x8c>
    7194:	2805883a 	mov	r2,r5
    7198:	0007883a 	mov	r3,zero
    719c:	18c00044 	addi	r3,r3,1
    71a0:	10000015 	stw	zero,0(r2)
    71a4:	10800104 	addi	r2,r2,4
    71a8:	80fffc1e 	bne	r16,r3,719c <__lshift+0x70>
    71ac:	8405883a 	add	r2,r16,r16
    71b0:	1085883a 	add	r2,r2,r2
    71b4:	288b883a 	add	r5,r5,r2
    71b8:	90800417 	ldw	r2,16(r18)
    71bc:	91000504 	addi	r4,r18,20
    71c0:	a18007cc 	andi	r6,r20,31
    71c4:	1085883a 	add	r2,r2,r2
    71c8:	1085883a 	add	r2,r2,r2
    71cc:	208f883a 	add	r7,r4,r2
    71d0:	30001e26 	beq	r6,zero,724c <__lshift+0x120>
    71d4:	00800804 	movi	r2,32
    71d8:	1191c83a 	sub	r8,r2,r6
    71dc:	0007883a 	mov	r3,zero
    71e0:	20800017 	ldw	r2,0(r4)
    71e4:	1184983a 	sll	r2,r2,r6
    71e8:	1884b03a 	or	r2,r3,r2
    71ec:	28800015 	stw	r2,0(r5)
    71f0:	20c00017 	ldw	r3,0(r4)
    71f4:	21000104 	addi	r4,r4,4
    71f8:	29400104 	addi	r5,r5,4
    71fc:	1a06d83a 	srl	r3,r3,r8
    7200:	21fff736 	bltu	r4,r7,71e0 <__lshift+0xb4>
    7204:	28c00015 	stw	r3,0(r5)
    7208:	18000126 	beq	r3,zero,7210 <__lshift+0xe4>
    720c:	8c400044 	addi	r17,r17,1
    7210:	88bfffc4 	addi	r2,r17,-1
    7214:	98800415 	stw	r2,16(r19)
    7218:	a809883a 	mov	r4,r21
    721c:	900b883a 	mov	r5,r18
    7220:	00067e80 	call	67e8 <_Bfree>
    7224:	9805883a 	mov	r2,r19
    7228:	dfc00617 	ldw	ra,24(sp)
    722c:	dd400517 	ldw	r21,20(sp)
    7230:	dd000417 	ldw	r20,16(sp)
    7234:	dcc00317 	ldw	r19,12(sp)
    7238:	dc800217 	ldw	r18,8(sp)
    723c:	dc400117 	ldw	r17,4(sp)
    7240:	dc000017 	ldw	r16,0(sp)
    7244:	dec00704 	addi	sp,sp,28
    7248:	f800283a 	ret
    724c:	20800017 	ldw	r2,0(r4)
    7250:	21000104 	addi	r4,r4,4
    7254:	28800015 	stw	r2,0(r5)
    7258:	29400104 	addi	r5,r5,4
    725c:	21ffec2e 	bgeu	r4,r7,7210 <__lshift+0xe4>
    7260:	20800017 	ldw	r2,0(r4)
    7264:	21000104 	addi	r4,r4,4
    7268:	28800015 	stw	r2,0(r5)
    726c:	29400104 	addi	r5,r5,4
    7270:	21fff636 	bltu	r4,r7,724c <__lshift+0x120>
    7274:	003fe606 	br	7210 <__lshift+0xe4>

00007278 <__multiply>:
    7278:	defff904 	addi	sp,sp,-28
    727c:	dcc00315 	stw	r19,12(sp)
    7280:	dc800215 	stw	r18,8(sp)
    7284:	2cc00417 	ldw	r19,16(r5)
    7288:	34800417 	ldw	r18,16(r6)
    728c:	dd000415 	stw	r20,16(sp)
    7290:	dc400115 	stw	r17,4(sp)
    7294:	dfc00615 	stw	ra,24(sp)
    7298:	dd400515 	stw	r21,20(sp)
    729c:	dc000015 	stw	r16,0(sp)
    72a0:	2823883a 	mov	r17,r5
    72a4:	3029883a 	mov	r20,r6
    72a8:	9c80040e 	bge	r19,r18,72bc <__multiply+0x44>
    72ac:	9027883a 	mov	r19,r18
    72b0:	2c800417 	ldw	r18,16(r5)
    72b4:	2829883a 	mov	r20,r5
    72b8:	3023883a 	mov	r17,r6
    72bc:	88800217 	ldw	r2,8(r17)
    72c0:	9ca1883a 	add	r16,r19,r18
    72c4:	89400117 	ldw	r5,4(r17)
    72c8:	1400010e 	bge	r2,r16,72d0 <__multiply+0x58>
    72cc:	29400044 	addi	r5,r5,1
    72d0:	0006d680 	call	6d68 <_Balloc>
    72d4:	102b883a 	mov	r21,r2
    72d8:	8405883a 	add	r2,r16,r16
    72dc:	1085883a 	add	r2,r2,r2
    72e0:	a9000504 	addi	r4,r21,20
    72e4:	209d883a 	add	r14,r4,r2
    72e8:	2380042e 	bgeu	r4,r14,72fc <__multiply+0x84>
    72ec:	2005883a 	mov	r2,r4
    72f0:	10000015 	stw	zero,0(r2)
    72f4:	10800104 	addi	r2,r2,4
    72f8:	13bffd36 	bltu	r2,r14,72f0 <__multiply+0x78>
    72fc:	9485883a 	add	r2,r18,r18
    7300:	9cc7883a 	add	r3,r19,r19
    7304:	a1800504 	addi	r6,r20,20
    7308:	1085883a 	add	r2,r2,r2
    730c:	8b400504 	addi	r13,r17,20
    7310:	18c7883a 	add	r3,r3,r3
    7314:	309f883a 	add	r15,r6,r2
    7318:	68d7883a 	add	r11,r13,r3
    731c:	33c03b2e 	bgeu	r6,r15,740c <__multiply+0x194>
    7320:	2019883a 	mov	r12,r4
    7324:	30800017 	ldw	r2,0(r6)
    7328:	127fffcc 	andi	r9,r2,65535
    732c:	48001826 	beq	r9,zero,7390 <__multiply+0x118>
    7330:	6811883a 	mov	r8,r13
    7334:	600f883a 	mov	r7,r12
    7338:	0015883a 	mov	r10,zero
    733c:	40c00017 	ldw	r3,0(r8)
    7340:	39400017 	ldw	r5,0(r7)
    7344:	42000104 	addi	r8,r8,4
    7348:	193fffcc 	andi	r4,r3,65535
    734c:	4909383a 	mul	r4,r9,r4
    7350:	1806d43a 	srli	r3,r3,16
    7354:	28bfffcc 	andi	r2,r5,65535
    7358:	5085883a 	add	r2,r10,r2
    735c:	2089883a 	add	r4,r4,r2
    7360:	48c7383a 	mul	r3,r9,r3
    7364:	280ad43a 	srli	r5,r5,16
    7368:	2004d43a 	srli	r2,r4,16
    736c:	3900000d 	sth	r4,0(r7)
    7370:	1947883a 	add	r3,r3,r5
    7374:	10c5883a 	add	r2,r2,r3
    7378:	3880008d 	sth	r2,2(r7)
    737c:	1014d43a 	srli	r10,r2,16
    7380:	39c00104 	addi	r7,r7,4
    7384:	42ffed36 	bltu	r8,r11,733c <__multiply+0xc4>
    7388:	3a800015 	stw	r10,0(r7)
    738c:	30800017 	ldw	r2,0(r6)
    7390:	1012d43a 	srli	r9,r2,16
    7394:	48001926 	beq	r9,zero,73fc <__multiply+0x184>
    7398:	60800017 	ldw	r2,0(r12)
    739c:	6811883a 	mov	r8,r13
    73a0:	600f883a 	mov	r7,r12
    73a4:	0015883a 	mov	r10,zero
    73a8:	100b883a 	mov	r5,r2
    73ac:	41000017 	ldw	r4,0(r8)
    73b0:	2806d43a 	srli	r3,r5,16
    73b4:	3880000d 	sth	r2,0(r7)
    73b8:	20bfffcc 	andi	r2,r4,65535
    73bc:	4885383a 	mul	r2,r9,r2
    73c0:	50c7883a 	add	r3,r10,r3
    73c4:	2008d43a 	srli	r4,r4,16
    73c8:	10c5883a 	add	r2,r2,r3
    73cc:	3880008d 	sth	r2,2(r7)
    73d0:	39c00104 	addi	r7,r7,4
    73d4:	39400017 	ldw	r5,0(r7)
    73d8:	4909383a 	mul	r4,r9,r4
    73dc:	1004d43a 	srli	r2,r2,16
    73e0:	28ffffcc 	andi	r3,r5,65535
    73e4:	20c9883a 	add	r4,r4,r3
    73e8:	1105883a 	add	r2,r2,r4
    73ec:	42000104 	addi	r8,r8,4
    73f0:	1014d43a 	srli	r10,r2,16
    73f4:	42ffed36 	bltu	r8,r11,73ac <__multiply+0x134>
    73f8:	38800015 	stw	r2,0(r7)
    73fc:	31800104 	addi	r6,r6,4
    7400:	33c0022e 	bgeu	r6,r15,740c <__multiply+0x194>
    7404:	63000104 	addi	r12,r12,4
    7408:	003fc606 	br	7324 <__multiply+0xac>
    740c:	0400090e 	bge	zero,r16,7434 <__multiply+0x1bc>
    7410:	70bfff17 	ldw	r2,-4(r14)
    7414:	70ffff04 	addi	r3,r14,-4
    7418:	10000326 	beq	r2,zero,7428 <__multiply+0x1b0>
    741c:	00000506 	br	7434 <__multiply+0x1bc>
    7420:	18800017 	ldw	r2,0(r3)
    7424:	1000031e 	bne	r2,zero,7434 <__multiply+0x1bc>
    7428:	843fffc4 	addi	r16,r16,-1
    742c:	18ffff04 	addi	r3,r3,-4
    7430:	803ffb1e 	bne	r16,zero,7420 <__multiply+0x1a8>
    7434:	a805883a 	mov	r2,r21
    7438:	ac000415 	stw	r16,16(r21)
    743c:	dfc00617 	ldw	ra,24(sp)
    7440:	dd400517 	ldw	r21,20(sp)
    7444:	dd000417 	ldw	r20,16(sp)
    7448:	dcc00317 	ldw	r19,12(sp)
    744c:	dc800217 	ldw	r18,8(sp)
    7450:	dc400117 	ldw	r17,4(sp)
    7454:	dc000017 	ldw	r16,0(sp)
    7458:	dec00704 	addi	sp,sp,28
    745c:	f800283a 	ret

00007460 <__i2b>:
    7460:	defffd04 	addi	sp,sp,-12
    7464:	dc000015 	stw	r16,0(sp)
    7468:	04000044 	movi	r16,1
    746c:	dc800115 	stw	r18,4(sp)
    7470:	2825883a 	mov	r18,r5
    7474:	800b883a 	mov	r5,r16
    7478:	dfc00215 	stw	ra,8(sp)
    747c:	0006d680 	call	6d68 <_Balloc>
    7480:	14000415 	stw	r16,16(r2)
    7484:	14800515 	stw	r18,20(r2)
    7488:	dfc00217 	ldw	ra,8(sp)
    748c:	dc800117 	ldw	r18,4(sp)
    7490:	dc000017 	ldw	r16,0(sp)
    7494:	dec00304 	addi	sp,sp,12
    7498:	f800283a 	ret

0000749c <__multadd>:
    749c:	defffa04 	addi	sp,sp,-24
    74a0:	dc800215 	stw	r18,8(sp)
    74a4:	2c800417 	ldw	r18,16(r5)
    74a8:	dd000415 	stw	r20,16(sp)
    74ac:	dcc00315 	stw	r19,12(sp)
    74b0:	dc000015 	stw	r16,0(sp)
    74b4:	dfc00515 	stw	ra,20(sp)
    74b8:	3821883a 	mov	r16,r7
    74bc:	dc400115 	stw	r17,4(sp)
    74c0:	2827883a 	mov	r19,r5
    74c4:	2029883a 	mov	r20,r4
    74c8:	2a000504 	addi	r8,r5,20
    74cc:	000f883a 	mov	r7,zero
    74d0:	40800017 	ldw	r2,0(r8)
    74d4:	39c00044 	addi	r7,r7,1
    74d8:	10ffffcc 	andi	r3,r2,65535
    74dc:	1987383a 	mul	r3,r3,r6
    74e0:	1004d43a 	srli	r2,r2,16
    74e4:	1c07883a 	add	r3,r3,r16
    74e8:	180ad43a 	srli	r5,r3,16
    74ec:	1185383a 	mul	r2,r2,r6
    74f0:	18ffffcc 	andi	r3,r3,65535
    74f4:	1145883a 	add	r2,r2,r5
    74f8:	1008943a 	slli	r4,r2,16
    74fc:	1020d43a 	srli	r16,r2,16
    7500:	20c9883a 	add	r4,r4,r3
    7504:	41000015 	stw	r4,0(r8)
    7508:	42000104 	addi	r8,r8,4
    750c:	3cbff016 	blt	r7,r18,74d0 <__multadd+0x34>
    7510:	80000826 	beq	r16,zero,7534 <__multadd+0x98>
    7514:	98800217 	ldw	r2,8(r19)
    7518:	90800f0e 	bge	r18,r2,7558 <__multadd+0xbc>
    751c:	9485883a 	add	r2,r18,r18
    7520:	1085883a 	add	r2,r2,r2
    7524:	14c5883a 	add	r2,r2,r19
    7528:	90c00044 	addi	r3,r18,1
    752c:	14000515 	stw	r16,20(r2)
    7530:	98c00415 	stw	r3,16(r19)
    7534:	9805883a 	mov	r2,r19
    7538:	dfc00517 	ldw	ra,20(sp)
    753c:	dd000417 	ldw	r20,16(sp)
    7540:	dcc00317 	ldw	r19,12(sp)
    7544:	dc800217 	ldw	r18,8(sp)
    7548:	dc400117 	ldw	r17,4(sp)
    754c:	dc000017 	ldw	r16,0(sp)
    7550:	dec00604 	addi	sp,sp,24
    7554:	f800283a 	ret
    7558:	99400117 	ldw	r5,4(r19)
    755c:	a009883a 	mov	r4,r20
    7560:	29400044 	addi	r5,r5,1
    7564:	0006d680 	call	6d68 <_Balloc>
    7568:	99800417 	ldw	r6,16(r19)
    756c:	99400304 	addi	r5,r19,12
    7570:	11000304 	addi	r4,r2,12
    7574:	318d883a 	add	r6,r6,r6
    7578:	318d883a 	add	r6,r6,r6
    757c:	31800204 	addi	r6,r6,8
    7580:	1023883a 	mov	r17,r2
    7584:	00065d00 	call	65d0 <memcpy>
    7588:	980b883a 	mov	r5,r19
    758c:	a009883a 	mov	r4,r20
    7590:	00067e80 	call	67e8 <_Bfree>
    7594:	8827883a 	mov	r19,r17
    7598:	003fe006 	br	751c <__multadd+0x80>

0000759c <__pow5mult>:
    759c:	defffa04 	addi	sp,sp,-24
    75a0:	308000cc 	andi	r2,r6,3
    75a4:	dd000415 	stw	r20,16(sp)
    75a8:	dcc00315 	stw	r19,12(sp)
    75ac:	dc000015 	stw	r16,0(sp)
    75b0:	dfc00515 	stw	ra,20(sp)
    75b4:	dc800215 	stw	r18,8(sp)
    75b8:	dc400115 	stw	r17,4(sp)
    75bc:	3021883a 	mov	r16,r6
    75c0:	2027883a 	mov	r19,r4
    75c4:	2829883a 	mov	r20,r5
    75c8:	10002b1e 	bne	r2,zero,7678 <__pow5mult+0xdc>
    75cc:	8025d0ba 	srai	r18,r16,2
    75d0:	90001b26 	beq	r18,zero,7640 <__pow5mult+0xa4>
    75d4:	9c001217 	ldw	r16,72(r19)
    75d8:	8000081e 	bne	r16,zero,75fc <__pow5mult+0x60>
    75dc:	00003006 	br	76a0 <__pow5mult+0x104>
    75e0:	800b883a 	mov	r5,r16
    75e4:	800d883a 	mov	r6,r16
    75e8:	9809883a 	mov	r4,r19
    75ec:	90001426 	beq	r18,zero,7640 <__pow5mult+0xa4>
    75f0:	80800017 	ldw	r2,0(r16)
    75f4:	10001b26 	beq	r2,zero,7664 <__pow5mult+0xc8>
    75f8:	1021883a 	mov	r16,r2
    75fc:	9080004c 	andi	r2,r18,1
    7600:	1005003a 	cmpeq	r2,r2,zero
    7604:	9025d07a 	srai	r18,r18,1
    7608:	800d883a 	mov	r6,r16
    760c:	9809883a 	mov	r4,r19
    7610:	a00b883a 	mov	r5,r20
    7614:	103ff21e 	bne	r2,zero,75e0 <__pow5mult+0x44>
    7618:	00072780 	call	7278 <__multiply>
    761c:	a00b883a 	mov	r5,r20
    7620:	9809883a 	mov	r4,r19
    7624:	1023883a 	mov	r17,r2
    7628:	00067e80 	call	67e8 <_Bfree>
    762c:	8829883a 	mov	r20,r17
    7630:	800b883a 	mov	r5,r16
    7634:	800d883a 	mov	r6,r16
    7638:	9809883a 	mov	r4,r19
    763c:	903fec1e 	bne	r18,zero,75f0 <__pow5mult+0x54>
    7640:	a005883a 	mov	r2,r20
    7644:	dfc00517 	ldw	ra,20(sp)
    7648:	dd000417 	ldw	r20,16(sp)
    764c:	dcc00317 	ldw	r19,12(sp)
    7650:	dc800217 	ldw	r18,8(sp)
    7654:	dc400117 	ldw	r17,4(sp)
    7658:	dc000017 	ldw	r16,0(sp)
    765c:	dec00604 	addi	sp,sp,24
    7660:	f800283a 	ret
    7664:	00072780 	call	7278 <__multiply>
    7668:	80800015 	stw	r2,0(r16)
    766c:	1021883a 	mov	r16,r2
    7670:	10000015 	stw	zero,0(r2)
    7674:	003fe106 	br	75fc <__pow5mult+0x60>
    7678:	1085883a 	add	r2,r2,r2
    767c:	00c00074 	movhi	r3,1
    7680:	18f66204 	addi	r3,r3,-9848
    7684:	1085883a 	add	r2,r2,r2
    7688:	10c5883a 	add	r2,r2,r3
    768c:	11bfff17 	ldw	r6,-4(r2)
    7690:	000f883a 	mov	r7,zero
    7694:	000749c0 	call	749c <__multadd>
    7698:	1029883a 	mov	r20,r2
    769c:	003fcb06 	br	75cc <__pow5mult+0x30>
    76a0:	9809883a 	mov	r4,r19
    76a4:	01409c44 	movi	r5,625
    76a8:	00074600 	call	7460 <__i2b>
    76ac:	98801215 	stw	r2,72(r19)
    76b0:	1021883a 	mov	r16,r2
    76b4:	10000015 	stw	zero,0(r2)
    76b8:	003fd006 	br	75fc <__pow5mult+0x60>

000076bc <__s2b>:
    76bc:	defff904 	addi	sp,sp,-28
    76c0:	dcc00315 	stw	r19,12(sp)
    76c4:	dc800215 	stw	r18,8(sp)
    76c8:	2827883a 	mov	r19,r5
    76cc:	2025883a 	mov	r18,r4
    76d0:	01400244 	movi	r5,9
    76d4:	39000204 	addi	r4,r7,8
    76d8:	dd000415 	stw	r20,16(sp)
    76dc:	dc400115 	stw	r17,4(sp)
    76e0:	dfc00615 	stw	ra,24(sp)
    76e4:	dd400515 	stw	r21,20(sp)
    76e8:	dc000015 	stw	r16,0(sp)
    76ec:	3829883a 	mov	r20,r7
    76f0:	3023883a 	mov	r17,r6
    76f4:	000a5480 	call	a548 <__divsi3>
    76f8:	00c00044 	movi	r3,1
    76fc:	1880350e 	bge	r3,r2,77d4 <__s2b+0x118>
    7700:	000b883a 	mov	r5,zero
    7704:	18c7883a 	add	r3,r3,r3
    7708:	29400044 	addi	r5,r5,1
    770c:	18bffd16 	blt	r3,r2,7704 <__s2b+0x48>
    7710:	9009883a 	mov	r4,r18
    7714:	0006d680 	call	6d68 <_Balloc>
    7718:	1011883a 	mov	r8,r2
    771c:	d8800717 	ldw	r2,28(sp)
    7720:	00c00044 	movi	r3,1
    7724:	01800244 	movi	r6,9
    7728:	40800515 	stw	r2,20(r8)
    772c:	40c00415 	stw	r3,16(r8)
    7730:	3440260e 	bge	r6,r17,77cc <__s2b+0x110>
    7734:	3021883a 	mov	r16,r6
    7738:	99ab883a 	add	r21,r19,r6
    773c:	9c05883a 	add	r2,r19,r16
    7740:	11c00007 	ldb	r7,0(r2)
    7744:	400b883a 	mov	r5,r8
    7748:	9009883a 	mov	r4,r18
    774c:	39fff404 	addi	r7,r7,-48
    7750:	01800284 	movi	r6,10
    7754:	000749c0 	call	749c <__multadd>
    7758:	84000044 	addi	r16,r16,1
    775c:	1011883a 	mov	r8,r2
    7760:	8c3ff61e 	bne	r17,r16,773c <__s2b+0x80>
    7764:	ac45883a 	add	r2,r21,r17
    7768:	117ffe04 	addi	r5,r2,-8
    776c:	880d883a 	mov	r6,r17
    7770:	35000c0e 	bge	r6,r20,77a4 <__s2b+0xe8>
    7774:	a185c83a 	sub	r2,r20,r6
    7778:	2821883a 	mov	r16,r5
    777c:	28a3883a 	add	r17,r5,r2
    7780:	81c00007 	ldb	r7,0(r16)
    7784:	400b883a 	mov	r5,r8
    7788:	9009883a 	mov	r4,r18
    778c:	39fff404 	addi	r7,r7,-48
    7790:	01800284 	movi	r6,10
    7794:	000749c0 	call	749c <__multadd>
    7798:	84000044 	addi	r16,r16,1
    779c:	1011883a 	mov	r8,r2
    77a0:	847ff71e 	bne	r16,r17,7780 <__s2b+0xc4>
    77a4:	4005883a 	mov	r2,r8
    77a8:	dfc00617 	ldw	ra,24(sp)
    77ac:	dd400517 	ldw	r21,20(sp)
    77b0:	dd000417 	ldw	r20,16(sp)
    77b4:	dcc00317 	ldw	r19,12(sp)
    77b8:	dc800217 	ldw	r18,8(sp)
    77bc:	dc400117 	ldw	r17,4(sp)
    77c0:	dc000017 	ldw	r16,0(sp)
    77c4:	dec00704 	addi	sp,sp,28
    77c8:	f800283a 	ret
    77cc:	99400284 	addi	r5,r19,10
    77d0:	003fe706 	br	7770 <__s2b+0xb4>
    77d4:	000b883a 	mov	r5,zero
    77d8:	003fcd06 	br	7710 <__s2b+0x54>

000077dc <putc>:
    77dc:	defffc04 	addi	sp,sp,-16
    77e0:	dc800215 	stw	r18,8(sp)
    77e4:	04800074 	movhi	r18,1
    77e8:	94bd3c04 	addi	r18,r18,-2832
    77ec:	90c00017 	ldw	r3,0(r18)
    77f0:	dc400115 	stw	r17,4(sp)
    77f4:	dc000015 	stw	r16,0(sp)
    77f8:	dfc00315 	stw	ra,12(sp)
    77fc:	2023883a 	mov	r17,r4
    7800:	2821883a 	mov	r16,r5
    7804:	18000226 	beq	r3,zero,7810 <putc+0x34>
    7808:	18800e17 	ldw	r2,56(r3)
    780c:	10001126 	beq	r2,zero,7854 <putc+0x78>
    7810:	80800217 	ldw	r2,8(r16)
    7814:	10ffffc4 	addi	r3,r2,-1
    7818:	80c00215 	stw	r3,8(r16)
    781c:	18001316 	blt	r3,zero,786c <putc+0x90>
    7820:	80800017 	ldw	r2,0(r16)
    7824:	14400005 	stb	r17,0(r2)
    7828:	80c00017 	ldw	r3,0(r16)
    782c:	18800044 	addi	r2,r3,1
    7830:	18c00003 	ldbu	r3,0(r3)
    7834:	80800015 	stw	r2,0(r16)
    7838:	1805883a 	mov	r2,r3
    783c:	dfc00317 	ldw	ra,12(sp)
    7840:	dc800217 	ldw	r18,8(sp)
    7844:	dc400117 	ldw	r17,4(sp)
    7848:	dc000017 	ldw	r16,0(sp)
    784c:	dec00404 	addi	sp,sp,16
    7850:	f800283a 	ret
    7854:	1809883a 	mov	r4,r3
    7858:	00055e00 	call	55e0 <__sinit>
    785c:	80800217 	ldw	r2,8(r16)
    7860:	10ffffc4 	addi	r3,r2,-1
    7864:	80c00215 	stw	r3,8(r16)
    7868:	183fed0e 	bge	r3,zero,7820 <putc+0x44>
    786c:	80800617 	ldw	r2,24(r16)
    7870:	18800f16 	blt	r3,r2,78b0 <putc+0xd4>
    7874:	80800017 	ldw	r2,0(r16)
    7878:	14400005 	stb	r17,0(r2)
    787c:	81000017 	ldw	r4,0(r16)
    7880:	00800284 	movi	r2,10
    7884:	20c00003 	ldbu	r3,0(r4)
    7888:	18801226 	beq	r3,r2,78d4 <putc+0xf8>
    788c:	20800044 	addi	r2,r4,1
    7890:	80800015 	stw	r2,0(r16)
    7894:	1805883a 	mov	r2,r3
    7898:	dfc00317 	ldw	ra,12(sp)
    789c:	dc800217 	ldw	r18,8(sp)
    78a0:	dc400117 	ldw	r17,4(sp)
    78a4:	dc000017 	ldw	r16,0(sp)
    78a8:	dec00404 	addi	sp,sp,16
    78ac:	f800283a 	ret
    78b0:	91000017 	ldw	r4,0(r18)
    78b4:	880b883a 	mov	r5,r17
    78b8:	800d883a 	mov	r6,r16
    78bc:	dfc00317 	ldw	ra,12(sp)
    78c0:	dc800217 	ldw	r18,8(sp)
    78c4:	dc400117 	ldw	r17,4(sp)
    78c8:	dc000017 	ldw	r16,0(sp)
    78cc:	dec00404 	addi	sp,sp,16
    78d0:	00082341 	jmpi	8234 <__swbuf_r>
    78d4:	91000017 	ldw	r4,0(r18)
    78d8:	180b883a 	mov	r5,r3
    78dc:	003ff606 	br	78b8 <putc+0xdc>

000078e0 <_putc_r>:
    78e0:	defffc04 	addi	sp,sp,-16
    78e4:	dc400215 	stw	r17,8(sp)
    78e8:	dc000115 	stw	r16,4(sp)
    78ec:	dfc00315 	stw	ra,12(sp)
    78f0:	2021883a 	mov	r16,r4
    78f4:	2823883a 	mov	r17,r5
    78f8:	20000226 	beq	r4,zero,7904 <_putc_r+0x24>
    78fc:	20800e17 	ldw	r2,56(r4)
    7900:	10001026 	beq	r2,zero,7944 <_putc_r+0x64>
    7904:	30800217 	ldw	r2,8(r6)
    7908:	10ffffc4 	addi	r3,r2,-1
    790c:	30c00215 	stw	r3,8(r6)
    7910:	18001316 	blt	r3,zero,7960 <_putc_r+0x80>
    7914:	30800017 	ldw	r2,0(r6)
    7918:	14400005 	stb	r17,0(r2)
    791c:	30c00017 	ldw	r3,0(r6)
    7920:	18800044 	addi	r2,r3,1
    7924:	18c00003 	ldbu	r3,0(r3)
    7928:	30800015 	stw	r2,0(r6)
    792c:	1805883a 	mov	r2,r3
    7930:	dfc00317 	ldw	ra,12(sp)
    7934:	dc400217 	ldw	r17,8(sp)
    7938:	dc000117 	ldw	r16,4(sp)
    793c:	dec00404 	addi	sp,sp,16
    7940:	f800283a 	ret
    7944:	d9800015 	stw	r6,0(sp)
    7948:	00055e00 	call	55e0 <__sinit>
    794c:	d9800017 	ldw	r6,0(sp)
    7950:	30800217 	ldw	r2,8(r6)
    7954:	10ffffc4 	addi	r3,r2,-1
    7958:	30c00215 	stw	r3,8(r6)
    795c:	183fed0e 	bge	r3,zero,7914 <_putc_r+0x34>
    7960:	30800617 	ldw	r2,24(r6)
    7964:	18800e16 	blt	r3,r2,79a0 <_putc_r+0xc0>
    7968:	30800017 	ldw	r2,0(r6)
    796c:	14400005 	stb	r17,0(r2)
    7970:	31000017 	ldw	r4,0(r6)
    7974:	00800284 	movi	r2,10
    7978:	20c00003 	ldbu	r3,0(r4)
    797c:	18800f26 	beq	r3,r2,79bc <_putc_r+0xdc>
    7980:	20800044 	addi	r2,r4,1
    7984:	30800015 	stw	r2,0(r6)
    7988:	1805883a 	mov	r2,r3
    798c:	dfc00317 	ldw	ra,12(sp)
    7990:	dc400217 	ldw	r17,8(sp)
    7994:	dc000117 	ldw	r16,4(sp)
    7998:	dec00404 	addi	sp,sp,16
    799c:	f800283a 	ret
    79a0:	8009883a 	mov	r4,r16
    79a4:	880b883a 	mov	r5,r17
    79a8:	dfc00317 	ldw	ra,12(sp)
    79ac:	dc400217 	ldw	r17,8(sp)
    79b0:	dc000117 	ldw	r16,4(sp)
    79b4:	dec00404 	addi	sp,sp,16
    79b8:	00082341 	jmpi	8234 <__swbuf_r>
    79bc:	8009883a 	mov	r4,r16
    79c0:	180b883a 	mov	r5,r3
    79c4:	003ff806 	br	79a8 <_putc_r+0xc8>

000079c8 <_realloc_r>:
    79c8:	defff404 	addi	sp,sp,-48
    79cc:	dd800815 	stw	r22,32(sp)
    79d0:	dc800415 	stw	r18,16(sp)
    79d4:	dc400315 	stw	r17,12(sp)
    79d8:	dfc00b15 	stw	ra,44(sp)
    79dc:	df000a15 	stw	fp,40(sp)
    79e0:	ddc00915 	stw	r23,36(sp)
    79e4:	dd400715 	stw	r21,28(sp)
    79e8:	dd000615 	stw	r20,24(sp)
    79ec:	dcc00515 	stw	r19,20(sp)
    79f0:	dc000215 	stw	r16,8(sp)
    79f4:	2825883a 	mov	r18,r5
    79f8:	3023883a 	mov	r17,r6
    79fc:	202d883a 	mov	r22,r4
    7a00:	2800c926 	beq	r5,zero,7d28 <_realloc_r+0x360>
    7a04:	000b47c0 	call	b47c <__malloc_lock>
    7a08:	943ffe04 	addi	r16,r18,-8
    7a0c:	88c002c4 	addi	r3,r17,11
    7a10:	00800584 	movi	r2,22
    7a14:	82000117 	ldw	r8,4(r16)
    7a18:	10c01b2e 	bgeu	r2,r3,7a88 <_realloc_r+0xc0>
    7a1c:	00bffe04 	movi	r2,-8
    7a20:	188e703a 	and	r7,r3,r2
    7a24:	3839883a 	mov	fp,r7
    7a28:	38001a16 	blt	r7,zero,7a94 <_realloc_r+0xcc>
    7a2c:	e4401936 	bltu	fp,r17,7a94 <_realloc_r+0xcc>
    7a30:	013fff04 	movi	r4,-4
    7a34:	4126703a 	and	r19,r8,r4
    7a38:	99c02616 	blt	r19,r7,7ad4 <_realloc_r+0x10c>
    7a3c:	802b883a 	mov	r21,r16
    7a40:	9829883a 	mov	r20,r19
    7a44:	84000204 	addi	r16,r16,8
    7a48:	a80f883a 	mov	r7,r21
    7a4c:	a70dc83a 	sub	r6,r20,fp
    7a50:	008003c4 	movi	r2,15
    7a54:	1180c136 	bltu	r2,r6,7d5c <_realloc_r+0x394>
    7a58:	38800117 	ldw	r2,4(r7)
    7a5c:	a549883a 	add	r4,r20,r21
    7a60:	1080004c 	andi	r2,r2,1
    7a64:	a084b03a 	or	r2,r20,r2
    7a68:	38800115 	stw	r2,4(r7)
    7a6c:	20c00117 	ldw	r3,4(r4)
    7a70:	18c00054 	ori	r3,r3,1
    7a74:	20c00115 	stw	r3,4(r4)
    7a78:	b009883a 	mov	r4,r22
    7a7c:	000b49c0 	call	b49c <__malloc_unlock>
    7a80:	8023883a 	mov	r17,r16
    7a84:	00000606 	br	7aa0 <_realloc_r+0xd8>
    7a88:	01c00404 	movi	r7,16
    7a8c:	3839883a 	mov	fp,r7
    7a90:	e47fe72e 	bgeu	fp,r17,7a30 <_realloc_r+0x68>
    7a94:	00800304 	movi	r2,12
    7a98:	0023883a 	mov	r17,zero
    7a9c:	b0800015 	stw	r2,0(r22)
    7aa0:	8805883a 	mov	r2,r17
    7aa4:	dfc00b17 	ldw	ra,44(sp)
    7aa8:	df000a17 	ldw	fp,40(sp)
    7aac:	ddc00917 	ldw	r23,36(sp)
    7ab0:	dd800817 	ldw	r22,32(sp)
    7ab4:	dd400717 	ldw	r21,28(sp)
    7ab8:	dd000617 	ldw	r20,24(sp)
    7abc:	dcc00517 	ldw	r19,20(sp)
    7ac0:	dc800417 	ldw	r18,16(sp)
    7ac4:	dc400317 	ldw	r17,12(sp)
    7ac8:	dc000217 	ldw	r16,8(sp)
    7acc:	dec00c04 	addi	sp,sp,48
    7ad0:	f800283a 	ret
    7ad4:	00800074 	movhi	r2,1
    7ad8:	10b7b504 	addi	r2,r2,-8492
    7adc:	12400217 	ldw	r9,8(r2)
    7ae0:	84cd883a 	add	r6,r16,r19
    7ae4:	802b883a 	mov	r21,r16
    7ae8:	3240b926 	beq	r6,r9,7dd0 <_realloc_r+0x408>
    7aec:	31400117 	ldw	r5,4(r6)
    7af0:	00bfff84 	movi	r2,-2
    7af4:	2884703a 	and	r2,r5,r2
    7af8:	1185883a 	add	r2,r2,r6
    7afc:	10c00117 	ldw	r3,4(r2)
    7b00:	18c0004c 	andi	r3,r3,1
    7b04:	1807003a 	cmpeq	r3,r3,zero
    7b08:	1800a326 	beq	r3,zero,7d98 <_realloc_r+0x3d0>
    7b0c:	2908703a 	and	r4,r5,r4
    7b10:	9929883a 	add	r20,r19,r4
    7b14:	a1c0a30e 	bge	r20,r7,7da4 <_realloc_r+0x3dc>
    7b18:	4080004c 	andi	r2,r8,1
    7b1c:	1000551e 	bne	r2,zero,7c74 <_realloc_r+0x2ac>
    7b20:	80800017 	ldw	r2,0(r16)
    7b24:	80afc83a 	sub	r23,r16,r2
    7b28:	b8c00117 	ldw	r3,4(r23)
    7b2c:	00bfff04 	movi	r2,-4
    7b30:	1884703a 	and	r2,r3,r2
    7b34:	30002e26 	beq	r6,zero,7bf0 <_realloc_r+0x228>
    7b38:	3240b926 	beq	r6,r9,7e20 <_realloc_r+0x458>
    7b3c:	98a9883a 	add	r20,r19,r2
    7b40:	2509883a 	add	r4,r4,r20
    7b44:	d9000015 	stw	r4,0(sp)
    7b48:	21c02a16 	blt	r4,r7,7bf4 <_realloc_r+0x22c>
    7b4c:	30800317 	ldw	r2,12(r6)
    7b50:	30c00217 	ldw	r3,8(r6)
    7b54:	01400904 	movi	r5,36
    7b58:	99bfff04 	addi	r6,r19,-4
    7b5c:	18800315 	stw	r2,12(r3)
    7b60:	10c00215 	stw	r3,8(r2)
    7b64:	b9000317 	ldw	r4,12(r23)
    7b68:	b8800217 	ldw	r2,8(r23)
    7b6c:	b82b883a 	mov	r21,r23
    7b70:	bc000204 	addi	r16,r23,8
    7b74:	20800215 	stw	r2,8(r4)
    7b78:	11000315 	stw	r4,12(r2)
    7b7c:	2980e436 	bltu	r5,r6,7f10 <_realloc_r+0x548>
    7b80:	008004c4 	movi	r2,19
    7b84:	9009883a 	mov	r4,r18
    7b88:	8011883a 	mov	r8,r16
    7b8c:	11800f2e 	bgeu	r2,r6,7bcc <_realloc_r+0x204>
    7b90:	90800017 	ldw	r2,0(r18)
    7b94:	ba000404 	addi	r8,r23,16
    7b98:	91000204 	addi	r4,r18,8
    7b9c:	b8800215 	stw	r2,8(r23)
    7ba0:	90c00117 	ldw	r3,4(r18)
    7ba4:	008006c4 	movi	r2,27
    7ba8:	b8c00315 	stw	r3,12(r23)
    7bac:	1180072e 	bgeu	r2,r6,7bcc <_realloc_r+0x204>
    7bb0:	90c00217 	ldw	r3,8(r18)
    7bb4:	ba000604 	addi	r8,r23,24
    7bb8:	91000404 	addi	r4,r18,16
    7bbc:	b8c00415 	stw	r3,16(r23)
    7bc0:	90800317 	ldw	r2,12(r18)
    7bc4:	b8800515 	stw	r2,20(r23)
    7bc8:	3140e726 	beq	r6,r5,7f68 <_realloc_r+0x5a0>
    7bcc:	20800017 	ldw	r2,0(r4)
    7bd0:	dd000017 	ldw	r20,0(sp)
    7bd4:	b80f883a 	mov	r7,r23
    7bd8:	40800015 	stw	r2,0(r8)
    7bdc:	20c00117 	ldw	r3,4(r4)
    7be0:	40c00115 	stw	r3,4(r8)
    7be4:	20800217 	ldw	r2,8(r4)
    7be8:	40800215 	stw	r2,8(r8)
    7bec:	003f9706 	br	7a4c <_realloc_r+0x84>
    7bf0:	98a9883a 	add	r20,r19,r2
    7bf4:	a1c01f16 	blt	r20,r7,7c74 <_realloc_r+0x2ac>
    7bf8:	b8c00317 	ldw	r3,12(r23)
    7bfc:	b8800217 	ldw	r2,8(r23)
    7c00:	99bfff04 	addi	r6,r19,-4
    7c04:	01400904 	movi	r5,36
    7c08:	b82b883a 	mov	r21,r23
    7c0c:	18800215 	stw	r2,8(r3)
    7c10:	10c00315 	stw	r3,12(r2)
    7c14:	bc000204 	addi	r16,r23,8
    7c18:	2980c336 	bltu	r5,r6,7f28 <_realloc_r+0x560>
    7c1c:	008004c4 	movi	r2,19
    7c20:	9009883a 	mov	r4,r18
    7c24:	8011883a 	mov	r8,r16
    7c28:	11800f2e 	bgeu	r2,r6,7c68 <_realloc_r+0x2a0>
    7c2c:	90800017 	ldw	r2,0(r18)
    7c30:	ba000404 	addi	r8,r23,16
    7c34:	91000204 	addi	r4,r18,8
    7c38:	b8800215 	stw	r2,8(r23)
    7c3c:	90c00117 	ldw	r3,4(r18)
    7c40:	008006c4 	movi	r2,27
    7c44:	b8c00315 	stw	r3,12(r23)
    7c48:	1180072e 	bgeu	r2,r6,7c68 <_realloc_r+0x2a0>
    7c4c:	90c00217 	ldw	r3,8(r18)
    7c50:	ba000604 	addi	r8,r23,24
    7c54:	91000404 	addi	r4,r18,16
    7c58:	b8c00415 	stw	r3,16(r23)
    7c5c:	90800317 	ldw	r2,12(r18)
    7c60:	b8800515 	stw	r2,20(r23)
    7c64:	3140c726 	beq	r6,r5,7f84 <_realloc_r+0x5bc>
    7c68:	20800017 	ldw	r2,0(r4)
    7c6c:	b80f883a 	mov	r7,r23
    7c70:	003fd906 	br	7bd8 <_realloc_r+0x210>
    7c74:	880b883a 	mov	r5,r17
    7c78:	b009883a 	mov	r4,r22
    7c7c:	0000ff00 	call	ff0 <_malloc_r>
    7c80:	1023883a 	mov	r17,r2
    7c84:	10002526 	beq	r2,zero,7d1c <_realloc_r+0x354>
    7c88:	80800117 	ldw	r2,4(r16)
    7c8c:	00ffff84 	movi	r3,-2
    7c90:	893ffe04 	addi	r4,r17,-8
    7c94:	10c4703a 	and	r2,r2,r3
    7c98:	8085883a 	add	r2,r16,r2
    7c9c:	20809526 	beq	r4,r2,7ef4 <_realloc_r+0x52c>
    7ca0:	99bfff04 	addi	r6,r19,-4
    7ca4:	01c00904 	movi	r7,36
    7ca8:	39804536 	bltu	r7,r6,7dc0 <_realloc_r+0x3f8>
    7cac:	008004c4 	movi	r2,19
    7cb0:	9009883a 	mov	r4,r18
    7cb4:	880b883a 	mov	r5,r17
    7cb8:	11800f2e 	bgeu	r2,r6,7cf8 <_realloc_r+0x330>
    7cbc:	90800017 	ldw	r2,0(r18)
    7cc0:	89400204 	addi	r5,r17,8
    7cc4:	91000204 	addi	r4,r18,8
    7cc8:	88800015 	stw	r2,0(r17)
    7ccc:	90c00117 	ldw	r3,4(r18)
    7cd0:	008006c4 	movi	r2,27
    7cd4:	88c00115 	stw	r3,4(r17)
    7cd8:	1180072e 	bgeu	r2,r6,7cf8 <_realloc_r+0x330>
    7cdc:	90c00217 	ldw	r3,8(r18)
    7ce0:	89400404 	addi	r5,r17,16
    7ce4:	91000404 	addi	r4,r18,16
    7ce8:	88c00215 	stw	r3,8(r17)
    7cec:	90800317 	ldw	r2,12(r18)
    7cf0:	88800315 	stw	r2,12(r17)
    7cf4:	31c09126 	beq	r6,r7,7f3c <_realloc_r+0x574>
    7cf8:	20800017 	ldw	r2,0(r4)
    7cfc:	28800015 	stw	r2,0(r5)
    7d00:	20c00117 	ldw	r3,4(r4)
    7d04:	28c00115 	stw	r3,4(r5)
    7d08:	20800217 	ldw	r2,8(r4)
    7d0c:	28800215 	stw	r2,8(r5)
    7d10:	900b883a 	mov	r5,r18
    7d14:	b009883a 	mov	r4,r22
    7d18:	00059640 	call	5964 <_free_r>
    7d1c:	b009883a 	mov	r4,r22
    7d20:	000b49c0 	call	b49c <__malloc_unlock>
    7d24:	003f5e06 	br	7aa0 <_realloc_r+0xd8>
    7d28:	300b883a 	mov	r5,r6
    7d2c:	dfc00b17 	ldw	ra,44(sp)
    7d30:	df000a17 	ldw	fp,40(sp)
    7d34:	ddc00917 	ldw	r23,36(sp)
    7d38:	dd800817 	ldw	r22,32(sp)
    7d3c:	dd400717 	ldw	r21,28(sp)
    7d40:	dd000617 	ldw	r20,24(sp)
    7d44:	dcc00517 	ldw	r19,20(sp)
    7d48:	dc800417 	ldw	r18,16(sp)
    7d4c:	dc400317 	ldw	r17,12(sp)
    7d50:	dc000217 	ldw	r16,8(sp)
    7d54:	dec00c04 	addi	sp,sp,48
    7d58:	0000ff01 	jmpi	ff0 <_malloc_r>
    7d5c:	38800117 	ldw	r2,4(r7)
    7d60:	e54b883a 	add	r5,fp,r21
    7d64:	31000054 	ori	r4,r6,1
    7d68:	1080004c 	andi	r2,r2,1
    7d6c:	1704b03a 	or	r2,r2,fp
    7d70:	38800115 	stw	r2,4(r7)
    7d74:	29000115 	stw	r4,4(r5)
    7d78:	2987883a 	add	r3,r5,r6
    7d7c:	18800117 	ldw	r2,4(r3)
    7d80:	29400204 	addi	r5,r5,8
    7d84:	b009883a 	mov	r4,r22
    7d88:	10800054 	ori	r2,r2,1
    7d8c:	18800115 	stw	r2,4(r3)
    7d90:	00059640 	call	5964 <_free_r>
    7d94:	003f3806 	br	7a78 <_realloc_r+0xb0>
    7d98:	000d883a 	mov	r6,zero
    7d9c:	0009883a 	mov	r4,zero
    7da0:	003f5d06 	br	7b18 <_realloc_r+0x150>
    7da4:	30c00217 	ldw	r3,8(r6)
    7da8:	30800317 	ldw	r2,12(r6)
    7dac:	800f883a 	mov	r7,r16
    7db0:	84000204 	addi	r16,r16,8
    7db4:	10c00215 	stw	r3,8(r2)
    7db8:	18800315 	stw	r2,12(r3)
    7dbc:	003f2306 	br	7a4c <_realloc_r+0x84>
    7dc0:	8809883a 	mov	r4,r17
    7dc4:	900b883a 	mov	r5,r18
    7dc8:	00066700 	call	6670 <memmove>
    7dcc:	003fd006 	br	7d10 <_realloc_r+0x348>
    7dd0:	30800117 	ldw	r2,4(r6)
    7dd4:	e0c00404 	addi	r3,fp,16
    7dd8:	1108703a 	and	r4,r2,r4
    7ddc:	9905883a 	add	r2,r19,r4
    7de0:	10ff4d16 	blt	r2,r3,7b18 <_realloc_r+0x150>
    7de4:	1705c83a 	sub	r2,r2,fp
    7de8:	870b883a 	add	r5,r16,fp
    7dec:	10800054 	ori	r2,r2,1
    7df0:	28800115 	stw	r2,4(r5)
    7df4:	80c00117 	ldw	r3,4(r16)
    7df8:	00800074 	movhi	r2,1
    7dfc:	10b7b504 	addi	r2,r2,-8492
    7e00:	b009883a 	mov	r4,r22
    7e04:	18c0004c 	andi	r3,r3,1
    7e08:	e0c6b03a 	or	r3,fp,r3
    7e0c:	11400215 	stw	r5,8(r2)
    7e10:	80c00115 	stw	r3,4(r16)
    7e14:	000b49c0 	call	b49c <__malloc_unlock>
    7e18:	84400204 	addi	r17,r16,8
    7e1c:	003f2006 	br	7aa0 <_realloc_r+0xd8>
    7e20:	98a9883a 	add	r20,r19,r2
    7e24:	2509883a 	add	r4,r4,r20
    7e28:	e0800404 	addi	r2,fp,16
    7e2c:	d9000115 	stw	r4,4(sp)
    7e30:	20bf7016 	blt	r4,r2,7bf4 <_realloc_r+0x22c>
    7e34:	b8c00317 	ldw	r3,12(r23)
    7e38:	b8800217 	ldw	r2,8(r23)
    7e3c:	99bfff04 	addi	r6,r19,-4
    7e40:	01400904 	movi	r5,36
    7e44:	18800215 	stw	r2,8(r3)
    7e48:	10c00315 	stw	r3,12(r2)
    7e4c:	bc400204 	addi	r17,r23,8
    7e50:	29804136 	bltu	r5,r6,7f58 <_realloc_r+0x590>
    7e54:	008004c4 	movi	r2,19
    7e58:	9009883a 	mov	r4,r18
    7e5c:	880f883a 	mov	r7,r17
    7e60:	11800f2e 	bgeu	r2,r6,7ea0 <_realloc_r+0x4d8>
    7e64:	90800017 	ldw	r2,0(r18)
    7e68:	b9c00404 	addi	r7,r23,16
    7e6c:	91000204 	addi	r4,r18,8
    7e70:	b8800215 	stw	r2,8(r23)
    7e74:	90c00117 	ldw	r3,4(r18)
    7e78:	008006c4 	movi	r2,27
    7e7c:	b8c00315 	stw	r3,12(r23)
    7e80:	1180072e 	bgeu	r2,r6,7ea0 <_realloc_r+0x4d8>
    7e84:	90c00217 	ldw	r3,8(r18)
    7e88:	b9c00604 	addi	r7,r23,24
    7e8c:	91000404 	addi	r4,r18,16
    7e90:	b8c00415 	stw	r3,16(r23)
    7e94:	90800317 	ldw	r2,12(r18)
    7e98:	b8800515 	stw	r2,20(r23)
    7e9c:	31404026 	beq	r6,r5,7fa0 <_realloc_r+0x5d8>
    7ea0:	20800017 	ldw	r2,0(r4)
    7ea4:	38800015 	stw	r2,0(r7)
    7ea8:	20c00117 	ldw	r3,4(r4)
    7eac:	38c00115 	stw	r3,4(r7)
    7eb0:	20800217 	ldw	r2,8(r4)
    7eb4:	38800215 	stw	r2,8(r7)
    7eb8:	d8c00117 	ldw	r3,4(sp)
    7ebc:	bf0b883a 	add	r5,r23,fp
    7ec0:	b009883a 	mov	r4,r22
    7ec4:	1f05c83a 	sub	r2,r3,fp
    7ec8:	10800054 	ori	r2,r2,1
    7ecc:	28800115 	stw	r2,4(r5)
    7ed0:	b8c00117 	ldw	r3,4(r23)
    7ed4:	00800074 	movhi	r2,1
    7ed8:	10b7b504 	addi	r2,r2,-8492
    7edc:	11400215 	stw	r5,8(r2)
    7ee0:	18c0004c 	andi	r3,r3,1
    7ee4:	e0c6b03a 	or	r3,fp,r3
    7ee8:	b8c00115 	stw	r3,4(r23)
    7eec:	000b49c0 	call	b49c <__malloc_unlock>
    7ef0:	003eeb06 	br	7aa0 <_realloc_r+0xd8>
    7ef4:	20800117 	ldw	r2,4(r4)
    7ef8:	00ffff04 	movi	r3,-4
    7efc:	800f883a 	mov	r7,r16
    7f00:	10c4703a 	and	r2,r2,r3
    7f04:	98a9883a 	add	r20,r19,r2
    7f08:	84000204 	addi	r16,r16,8
    7f0c:	003ecf06 	br	7a4c <_realloc_r+0x84>
    7f10:	900b883a 	mov	r5,r18
    7f14:	8009883a 	mov	r4,r16
    7f18:	00066700 	call	6670 <memmove>
    7f1c:	dd000017 	ldw	r20,0(sp)
    7f20:	b80f883a 	mov	r7,r23
    7f24:	003ec906 	br	7a4c <_realloc_r+0x84>
    7f28:	900b883a 	mov	r5,r18
    7f2c:	8009883a 	mov	r4,r16
    7f30:	00066700 	call	6670 <memmove>
    7f34:	b80f883a 	mov	r7,r23
    7f38:	003ec406 	br	7a4c <_realloc_r+0x84>
    7f3c:	90c00417 	ldw	r3,16(r18)
    7f40:	89400604 	addi	r5,r17,24
    7f44:	91000604 	addi	r4,r18,24
    7f48:	88c00415 	stw	r3,16(r17)
    7f4c:	90800517 	ldw	r2,20(r18)
    7f50:	88800515 	stw	r2,20(r17)
    7f54:	003f6806 	br	7cf8 <_realloc_r+0x330>
    7f58:	900b883a 	mov	r5,r18
    7f5c:	8809883a 	mov	r4,r17
    7f60:	00066700 	call	6670 <memmove>
    7f64:	003fd406 	br	7eb8 <_realloc_r+0x4f0>
    7f68:	90c00417 	ldw	r3,16(r18)
    7f6c:	91000604 	addi	r4,r18,24
    7f70:	ba000804 	addi	r8,r23,32
    7f74:	b8c00615 	stw	r3,24(r23)
    7f78:	90800517 	ldw	r2,20(r18)
    7f7c:	b8800715 	stw	r2,28(r23)
    7f80:	003f1206 	br	7bcc <_realloc_r+0x204>
    7f84:	90c00417 	ldw	r3,16(r18)
    7f88:	91000604 	addi	r4,r18,24
    7f8c:	ba000804 	addi	r8,r23,32
    7f90:	b8c00615 	stw	r3,24(r23)
    7f94:	90800517 	ldw	r2,20(r18)
    7f98:	b8800715 	stw	r2,28(r23)
    7f9c:	003f3206 	br	7c68 <_realloc_r+0x2a0>
    7fa0:	90c00417 	ldw	r3,16(r18)
    7fa4:	91000604 	addi	r4,r18,24
    7fa8:	b9c00804 	addi	r7,r23,32
    7fac:	b8c00615 	stw	r3,24(r23)
    7fb0:	90800517 	ldw	r2,20(r18)
    7fb4:	b8800715 	stw	r2,28(r23)
    7fb8:	003fb906 	br	7ea0 <_realloc_r+0x4d8>

00007fbc <__isinfd>:
    7fbc:	200d883a 	mov	r6,r4
    7fc0:	0109c83a 	sub	r4,zero,r4
    7fc4:	2188b03a 	or	r4,r4,r6
    7fc8:	2008d7fa 	srli	r4,r4,31
    7fcc:	00a00034 	movhi	r2,32768
    7fd0:	10bfffc4 	addi	r2,r2,-1
    7fd4:	1144703a 	and	r2,r2,r5
    7fd8:	2088b03a 	or	r4,r4,r2
    7fdc:	009ffc34 	movhi	r2,32752
    7fe0:	1105c83a 	sub	r2,r2,r4
    7fe4:	0087c83a 	sub	r3,zero,r2
    7fe8:	10c4b03a 	or	r2,r2,r3
    7fec:	1004d7fa 	srli	r2,r2,31
    7ff0:	00c00044 	movi	r3,1
    7ff4:	1885c83a 	sub	r2,r3,r2
    7ff8:	f800283a 	ret

00007ffc <__isnand>:
    7ffc:	200d883a 	mov	r6,r4
    8000:	0109c83a 	sub	r4,zero,r4
    8004:	2188b03a 	or	r4,r4,r6
    8008:	2008d7fa 	srli	r4,r4,31
    800c:	00a00034 	movhi	r2,32768
    8010:	10bfffc4 	addi	r2,r2,-1
    8014:	1144703a 	and	r2,r2,r5
    8018:	2088b03a 	or	r4,r4,r2
    801c:	009ffc34 	movhi	r2,32752
    8020:	1105c83a 	sub	r2,r2,r4
    8024:	1004d7fa 	srli	r2,r2,31
    8028:	f800283a 	ret

0000802c <__sclose>:
    802c:	2940038f 	ldh	r5,14(r5)
    8030:	00084ac1 	jmpi	84ac <_close_r>

00008034 <__sseek>:
    8034:	defffe04 	addi	sp,sp,-8
    8038:	dc000015 	stw	r16,0(sp)
    803c:	2821883a 	mov	r16,r5
    8040:	2940038f 	ldh	r5,14(r5)
    8044:	dfc00115 	stw	ra,4(sp)
    8048:	00087240 	call	8724 <_lseek_r>
    804c:	1007883a 	mov	r3,r2
    8050:	00bfffc4 	movi	r2,-1
    8054:	18800926 	beq	r3,r2,807c <__sseek+0x48>
    8058:	8080030b 	ldhu	r2,12(r16)
    805c:	80c01415 	stw	r3,80(r16)
    8060:	10840014 	ori	r2,r2,4096
    8064:	8080030d 	sth	r2,12(r16)
    8068:	1805883a 	mov	r2,r3
    806c:	dfc00117 	ldw	ra,4(sp)
    8070:	dc000017 	ldw	r16,0(sp)
    8074:	dec00204 	addi	sp,sp,8
    8078:	f800283a 	ret
    807c:	8080030b 	ldhu	r2,12(r16)
    8080:	10bbffcc 	andi	r2,r2,61439
    8084:	8080030d 	sth	r2,12(r16)
    8088:	1805883a 	mov	r2,r3
    808c:	dfc00117 	ldw	ra,4(sp)
    8090:	dc000017 	ldw	r16,0(sp)
    8094:	dec00204 	addi	sp,sp,8
    8098:	f800283a 	ret

0000809c <__swrite>:
    809c:	2880030b 	ldhu	r2,12(r5)
    80a0:	defffb04 	addi	sp,sp,-20
    80a4:	dcc00315 	stw	r19,12(sp)
    80a8:	1080400c 	andi	r2,r2,256
    80ac:	dc800215 	stw	r18,8(sp)
    80b0:	dc400115 	stw	r17,4(sp)
    80b4:	dc000015 	stw	r16,0(sp)
    80b8:	3027883a 	mov	r19,r6
    80bc:	3825883a 	mov	r18,r7
    80c0:	dfc00415 	stw	ra,16(sp)
    80c4:	2821883a 	mov	r16,r5
    80c8:	000d883a 	mov	r6,zero
    80cc:	01c00084 	movi	r7,2
    80d0:	2023883a 	mov	r17,r4
    80d4:	10000226 	beq	r2,zero,80e0 <__swrite+0x44>
    80d8:	2940038f 	ldh	r5,14(r5)
    80dc:	00087240 	call	8724 <_lseek_r>
    80e0:	8080030b 	ldhu	r2,12(r16)
    80e4:	8140038f 	ldh	r5,14(r16)
    80e8:	8809883a 	mov	r4,r17
    80ec:	10bbffcc 	andi	r2,r2,61439
    80f0:	980d883a 	mov	r6,r19
    80f4:	900f883a 	mov	r7,r18
    80f8:	8080030d 	sth	r2,12(r16)
    80fc:	dfc00417 	ldw	ra,16(sp)
    8100:	dcc00317 	ldw	r19,12(sp)
    8104:	dc800217 	ldw	r18,8(sp)
    8108:	dc400117 	ldw	r17,4(sp)
    810c:	dc000017 	ldw	r16,0(sp)
    8110:	dec00504 	addi	sp,sp,20
    8114:	00083801 	jmpi	8380 <_write_r>

00008118 <__sread>:
    8118:	defffe04 	addi	sp,sp,-8
    811c:	dc000015 	stw	r16,0(sp)
    8120:	2821883a 	mov	r16,r5
    8124:	2940038f 	ldh	r5,14(r5)
    8128:	dfc00115 	stw	ra,4(sp)
    812c:	000879c0 	call	879c <_read_r>
    8130:	1007883a 	mov	r3,r2
    8134:	10000816 	blt	r2,zero,8158 <__sread+0x40>
    8138:	80801417 	ldw	r2,80(r16)
    813c:	10c5883a 	add	r2,r2,r3
    8140:	80801415 	stw	r2,80(r16)
    8144:	1805883a 	mov	r2,r3
    8148:	dfc00117 	ldw	ra,4(sp)
    814c:	dc000017 	ldw	r16,0(sp)
    8150:	dec00204 	addi	sp,sp,8
    8154:	f800283a 	ret
    8158:	8080030b 	ldhu	r2,12(r16)
    815c:	10bbffcc 	andi	r2,r2,61439
    8160:	8080030d 	sth	r2,12(r16)
    8164:	1805883a 	mov	r2,r3
    8168:	dfc00117 	ldw	ra,4(sp)
    816c:	dc000017 	ldw	r16,0(sp)
    8170:	dec00204 	addi	sp,sp,8
    8174:	f800283a 	ret

00008178 <strcmp>:
    8178:	2144b03a 	or	r2,r4,r5
    817c:	108000cc 	andi	r2,r2,3
    8180:	10001d1e 	bne	r2,zero,81f8 <strcmp+0x80>
    8184:	200f883a 	mov	r7,r4
    8188:	28800017 	ldw	r2,0(r5)
    818c:	21000017 	ldw	r4,0(r4)
    8190:	280d883a 	mov	r6,r5
    8194:	2080161e 	bne	r4,r2,81f0 <strcmp+0x78>
    8198:	023fbff4 	movhi	r8,65279
    819c:	423fbfc4 	addi	r8,r8,-257
    81a0:	2207883a 	add	r3,r4,r8
    81a4:	01602074 	movhi	r5,32897
    81a8:	29602004 	addi	r5,r5,-32640
    81ac:	1946703a 	and	r3,r3,r5
    81b0:	0104303a 	nor	r2,zero,r4
    81b4:	10c4703a 	and	r2,r2,r3
    81b8:	10001c1e 	bne	r2,zero,822c <strcmp+0xb4>
    81bc:	4013883a 	mov	r9,r8
    81c0:	2811883a 	mov	r8,r5
    81c4:	00000106 	br	81cc <strcmp+0x54>
    81c8:	1800181e 	bne	r3,zero,822c <strcmp+0xb4>
    81cc:	39c00104 	addi	r7,r7,4
    81d0:	39000017 	ldw	r4,0(r7)
    81d4:	31800104 	addi	r6,r6,4
    81d8:	31400017 	ldw	r5,0(r6)
    81dc:	2245883a 	add	r2,r4,r9
    81e0:	1204703a 	and	r2,r2,r8
    81e4:	0106303a 	nor	r3,zero,r4
    81e8:	1886703a 	and	r3,r3,r2
    81ec:	217ff626 	beq	r4,r5,81c8 <strcmp+0x50>
    81f0:	3809883a 	mov	r4,r7
    81f4:	300b883a 	mov	r5,r6
    81f8:	20c00007 	ldb	r3,0(r4)
    81fc:	1800051e 	bne	r3,zero,8214 <strcmp+0x9c>
    8200:	00000606 	br	821c <strcmp+0xa4>
    8204:	21000044 	addi	r4,r4,1
    8208:	20c00007 	ldb	r3,0(r4)
    820c:	29400044 	addi	r5,r5,1
    8210:	18000226 	beq	r3,zero,821c <strcmp+0xa4>
    8214:	28800007 	ldb	r2,0(r5)
    8218:	18bffa26 	beq	r3,r2,8204 <strcmp+0x8c>
    821c:	20c00003 	ldbu	r3,0(r4)
    8220:	28800003 	ldbu	r2,0(r5)
    8224:	1885c83a 	sub	r2,r3,r2
    8228:	f800283a 	ret
    822c:	0005883a 	mov	r2,zero
    8230:	f800283a 	ret

00008234 <__swbuf_r>:
    8234:	defffc04 	addi	sp,sp,-16
    8238:	dc400215 	stw	r17,8(sp)
    823c:	dc000115 	stw	r16,4(sp)
    8240:	dfc00315 	stw	ra,12(sp)
    8244:	2023883a 	mov	r17,r4
    8248:	2821883a 	mov	r16,r5
    824c:	20000226 	beq	r4,zero,8258 <__swbuf_r+0x24>
    8250:	20800e17 	ldw	r2,56(r4)
    8254:	10002f26 	beq	r2,zero,8314 <__swbuf_r+0xe0>
    8258:	3080030b 	ldhu	r2,12(r6)
    825c:	30c00617 	ldw	r3,24(r6)
    8260:	1080020c 	andi	r2,r2,8
    8264:	30c00215 	stw	r3,8(r6)
    8268:	10002226 	beq	r2,zero,82f4 <__swbuf_r+0xc0>
    826c:	30c00417 	ldw	r3,16(r6)
    8270:	18002026 	beq	r3,zero,82f4 <__swbuf_r+0xc0>
    8274:	31000017 	ldw	r4,0(r6)
    8278:	30800517 	ldw	r2,20(r6)
    827c:	20c7c83a 	sub	r3,r4,r3
    8280:	18802f0e 	bge	r3,r2,8340 <__swbuf_r+0x10c>
    8284:	19400044 	addi	r5,r3,1
    8288:	30800217 	ldw	r2,8(r6)
    828c:	84003fcc 	andi	r16,r16,255
    8290:	20c00044 	addi	r3,r4,1
    8294:	10bfffc4 	addi	r2,r2,-1
    8298:	30800215 	stw	r2,8(r6)
    829c:	24000005 	stb	r16,0(r4)
    82a0:	30800517 	ldw	r2,20(r6)
    82a4:	30c00015 	stw	r3,0(r6)
    82a8:	11400c26 	beq	r2,r5,82dc <__swbuf_r+0xa8>
    82ac:	3080030b 	ldhu	r2,12(r6)
    82b0:	1080004c 	andi	r2,r2,1
    82b4:	1005003a 	cmpeq	r2,r2,zero
    82b8:	10000626 	beq	r2,zero,82d4 <__swbuf_r+0xa0>
    82bc:	8005883a 	mov	r2,r16
    82c0:	dfc00317 	ldw	ra,12(sp)
    82c4:	dc400217 	ldw	r17,8(sp)
    82c8:	dc000117 	ldw	r16,4(sp)
    82cc:	dec00404 	addi	sp,sp,16
    82d0:	f800283a 	ret
    82d4:	00800284 	movi	r2,10
    82d8:	80bff81e 	bne	r16,r2,82bc <__swbuf_r+0x88>
    82dc:	8809883a 	mov	r4,r17
    82e0:	300b883a 	mov	r5,r6
    82e4:	00053480 	call	5348 <_fflush_r>
    82e8:	103ff426 	beq	r2,zero,82bc <__swbuf_r+0x88>
    82ec:	043fffc4 	movi	r16,-1
    82f0:	003ff206 	br	82bc <__swbuf_r+0x88>
    82f4:	300b883a 	mov	r5,r6
    82f8:	8809883a 	mov	r4,r17
    82fc:	d9800015 	stw	r6,0(sp)
    8300:	000388c0 	call	388c <__swsetup_r>
    8304:	d9800017 	ldw	r6,0(sp)
    8308:	1000061e 	bne	r2,zero,8324 <__swbuf_r+0xf0>
    830c:	30c00417 	ldw	r3,16(r6)
    8310:	003fd806 	br	8274 <__swbuf_r+0x40>
    8314:	d9800015 	stw	r6,0(sp)
    8318:	00055e00 	call	55e0 <__sinit>
    831c:	d9800017 	ldw	r6,0(sp)
    8320:	003fcd06 	br	8258 <__swbuf_r+0x24>
    8324:	3080030b 	ldhu	r2,12(r6)
    8328:	00c00244 	movi	r3,9
    832c:	043fffc4 	movi	r16,-1
    8330:	10801014 	ori	r2,r2,64
    8334:	3080030d 	sth	r2,12(r6)
    8338:	88c00015 	stw	r3,0(r17)
    833c:	003fdf06 	br	82bc <__swbuf_r+0x88>
    8340:	300b883a 	mov	r5,r6
    8344:	8809883a 	mov	r4,r17
    8348:	d9800015 	stw	r6,0(sp)
    834c:	00053480 	call	5348 <_fflush_r>
    8350:	d9800017 	ldw	r6,0(sp)
    8354:	103fe51e 	bne	r2,zero,82ec <__swbuf_r+0xb8>
    8358:	31000017 	ldw	r4,0(r6)
    835c:	01400044 	movi	r5,1
    8360:	003fc906 	br	8288 <__swbuf_r+0x54>

00008364 <__swbuf>:
    8364:	01800074 	movhi	r6,1
    8368:	31bd3c04 	addi	r6,r6,-2832
    836c:	2007883a 	mov	r3,r4
    8370:	31000017 	ldw	r4,0(r6)
    8374:	280d883a 	mov	r6,r5
    8378:	180b883a 	mov	r5,r3
    837c:	00082341 	jmpi	8234 <__swbuf_r>

00008380 <_write_r>:
    8380:	defffd04 	addi	sp,sp,-12
    8384:	dc000015 	stw	r16,0(sp)
    8388:	04000074 	movhi	r16,1
    838c:	8403eb04 	addi	r16,r16,4012
    8390:	dc400115 	stw	r17,4(sp)
    8394:	80000015 	stw	zero,0(r16)
    8398:	2023883a 	mov	r17,r4
    839c:	2809883a 	mov	r4,r5
    83a0:	300b883a 	mov	r5,r6
    83a4:	380d883a 	mov	r6,r7
    83a8:	dfc00215 	stw	ra,8(sp)
    83ac:	000b8fc0 	call	b8fc <write>
    83b0:	1007883a 	mov	r3,r2
    83b4:	00bfffc4 	movi	r2,-1
    83b8:	18800626 	beq	r3,r2,83d4 <_write_r+0x54>
    83bc:	1805883a 	mov	r2,r3
    83c0:	dfc00217 	ldw	ra,8(sp)
    83c4:	dc400117 	ldw	r17,4(sp)
    83c8:	dc000017 	ldw	r16,0(sp)
    83cc:	dec00304 	addi	sp,sp,12
    83d0:	f800283a 	ret
    83d4:	80800017 	ldw	r2,0(r16)
    83d8:	103ff826 	beq	r2,zero,83bc <_write_r+0x3c>
    83dc:	88800015 	stw	r2,0(r17)
    83e0:	1805883a 	mov	r2,r3
    83e4:	dfc00217 	ldw	ra,8(sp)
    83e8:	dc400117 	ldw	r17,4(sp)
    83ec:	dc000017 	ldw	r16,0(sp)
    83f0:	dec00304 	addi	sp,sp,12
    83f4:	f800283a 	ret

000083f8 <_calloc_r>:
    83f8:	298b383a 	mul	r5,r5,r6
    83fc:	defffe04 	addi	sp,sp,-8
    8400:	dc000015 	stw	r16,0(sp)
    8404:	dfc00115 	stw	ra,4(sp)
    8408:	0000ff00 	call	ff0 <_malloc_r>
    840c:	1021883a 	mov	r16,r2
    8410:	01c00904 	movi	r7,36
    8414:	10000d26 	beq	r2,zero,844c <_calloc_r+0x54>
    8418:	10ffff17 	ldw	r3,-4(r2)
    841c:	1009883a 	mov	r4,r2
    8420:	00bfff04 	movi	r2,-4
    8424:	1886703a 	and	r3,r3,r2
    8428:	1887883a 	add	r3,r3,r2
    842c:	180d883a 	mov	r6,r3
    8430:	000b883a 	mov	r5,zero
    8434:	38c01736 	bltu	r7,r3,8494 <_calloc_r+0x9c>
    8438:	008004c4 	movi	r2,19
    843c:	10c00836 	bltu	r2,r3,8460 <_calloc_r+0x68>
    8440:	20000215 	stw	zero,8(r4)
    8444:	20000015 	stw	zero,0(r4)
    8448:	20000115 	stw	zero,4(r4)
    844c:	8005883a 	mov	r2,r16
    8450:	dfc00117 	ldw	ra,4(sp)
    8454:	dc000017 	ldw	r16,0(sp)
    8458:	dec00204 	addi	sp,sp,8
    845c:	f800283a 	ret
    8460:	008006c4 	movi	r2,27
    8464:	80000015 	stw	zero,0(r16)
    8468:	80000115 	stw	zero,4(r16)
    846c:	81000204 	addi	r4,r16,8
    8470:	10fff32e 	bgeu	r2,r3,8440 <_calloc_r+0x48>
    8474:	80000215 	stw	zero,8(r16)
    8478:	80000315 	stw	zero,12(r16)
    847c:	81000404 	addi	r4,r16,16
    8480:	19ffef1e 	bne	r3,r7,8440 <_calloc_r+0x48>
    8484:	81000604 	addi	r4,r16,24
    8488:	80000415 	stw	zero,16(r16)
    848c:	80000515 	stw	zero,20(r16)
    8490:	003feb06 	br	8440 <_calloc_r+0x48>
    8494:	00067500 	call	6750 <memset>
    8498:	8005883a 	mov	r2,r16
    849c:	dfc00117 	ldw	ra,4(sp)
    84a0:	dc000017 	ldw	r16,0(sp)
    84a4:	dec00204 	addi	sp,sp,8
    84a8:	f800283a 	ret

000084ac <_close_r>:
    84ac:	defffd04 	addi	sp,sp,-12
    84b0:	dc000015 	stw	r16,0(sp)
    84b4:	04000074 	movhi	r16,1
    84b8:	8403eb04 	addi	r16,r16,4012
    84bc:	dc400115 	stw	r17,4(sp)
    84c0:	80000015 	stw	zero,0(r16)
    84c4:	2023883a 	mov	r17,r4
    84c8:	2809883a 	mov	r4,r5
    84cc:	dfc00215 	stw	ra,8(sp)
    84d0:	000ad980 	call	ad98 <close>
    84d4:	1007883a 	mov	r3,r2
    84d8:	00bfffc4 	movi	r2,-1
    84dc:	18800626 	beq	r3,r2,84f8 <_close_r+0x4c>
    84e0:	1805883a 	mov	r2,r3
    84e4:	dfc00217 	ldw	ra,8(sp)
    84e8:	dc400117 	ldw	r17,4(sp)
    84ec:	dc000017 	ldw	r16,0(sp)
    84f0:	dec00304 	addi	sp,sp,12
    84f4:	f800283a 	ret
    84f8:	80800017 	ldw	r2,0(r16)
    84fc:	103ff826 	beq	r2,zero,84e0 <_close_r+0x34>
    8500:	88800015 	stw	r2,0(r17)
    8504:	1805883a 	mov	r2,r3
    8508:	dfc00217 	ldw	ra,8(sp)
    850c:	dc400117 	ldw	r17,4(sp)
    8510:	dc000017 	ldw	r16,0(sp)
    8514:	dec00304 	addi	sp,sp,12
    8518:	f800283a 	ret

0000851c <_fclose_r>:
    851c:	defffc04 	addi	sp,sp,-16
    8520:	dc400115 	stw	r17,4(sp)
    8524:	dc000015 	stw	r16,0(sp)
    8528:	dfc00315 	stw	ra,12(sp)
    852c:	dc800215 	stw	r18,8(sp)
    8530:	2821883a 	mov	r16,r5
    8534:	2023883a 	mov	r17,r4
    8538:	28002926 	beq	r5,zero,85e0 <_fclose_r+0xc4>
    853c:	00055d00 	call	55d0 <__sfp_lock_acquire>
    8540:	88000226 	beq	r17,zero,854c <_fclose_r+0x30>
    8544:	88800e17 	ldw	r2,56(r17)
    8548:	10002d26 	beq	r2,zero,8600 <_fclose_r+0xe4>
    854c:	8080030f 	ldh	r2,12(r16)
    8550:	10002226 	beq	r2,zero,85dc <_fclose_r+0xc0>
    8554:	8809883a 	mov	r4,r17
    8558:	800b883a 	mov	r5,r16
    855c:	00053480 	call	5348 <_fflush_r>
    8560:	1025883a 	mov	r18,r2
    8564:	80800b17 	ldw	r2,44(r16)
    8568:	10000426 	beq	r2,zero,857c <_fclose_r+0x60>
    856c:	81400717 	ldw	r5,28(r16)
    8570:	8809883a 	mov	r4,r17
    8574:	103ee83a 	callr	r2
    8578:	10002a16 	blt	r2,zero,8624 <_fclose_r+0x108>
    857c:	8080030b 	ldhu	r2,12(r16)
    8580:	1080200c 	andi	r2,r2,128
    8584:	1000231e 	bne	r2,zero,8614 <_fclose_r+0xf8>
    8588:	81400c17 	ldw	r5,48(r16)
    858c:	28000526 	beq	r5,zero,85a4 <_fclose_r+0x88>
    8590:	80801004 	addi	r2,r16,64
    8594:	28800226 	beq	r5,r2,85a0 <_fclose_r+0x84>
    8598:	8809883a 	mov	r4,r17
    859c:	00059640 	call	5964 <_free_r>
    85a0:	80000c15 	stw	zero,48(r16)
    85a4:	81401117 	ldw	r5,68(r16)
    85a8:	28000326 	beq	r5,zero,85b8 <_fclose_r+0x9c>
    85ac:	8809883a 	mov	r4,r17
    85b0:	00059640 	call	5964 <_free_r>
    85b4:	80001115 	stw	zero,68(r16)
    85b8:	8000030d 	sth	zero,12(r16)
    85bc:	00055d40 	call	55d4 <__sfp_lock_release>
    85c0:	9005883a 	mov	r2,r18
    85c4:	dfc00317 	ldw	ra,12(sp)
    85c8:	dc800217 	ldw	r18,8(sp)
    85cc:	dc400117 	ldw	r17,4(sp)
    85d0:	dc000017 	ldw	r16,0(sp)
    85d4:	dec00404 	addi	sp,sp,16
    85d8:	f800283a 	ret
    85dc:	00055d40 	call	55d4 <__sfp_lock_release>
    85e0:	0025883a 	mov	r18,zero
    85e4:	9005883a 	mov	r2,r18
    85e8:	dfc00317 	ldw	ra,12(sp)
    85ec:	dc800217 	ldw	r18,8(sp)
    85f0:	dc400117 	ldw	r17,4(sp)
    85f4:	dc000017 	ldw	r16,0(sp)
    85f8:	dec00404 	addi	sp,sp,16
    85fc:	f800283a 	ret
    8600:	8809883a 	mov	r4,r17
    8604:	00055e00 	call	55e0 <__sinit>
    8608:	8080030f 	ldh	r2,12(r16)
    860c:	103fd11e 	bne	r2,zero,8554 <_fclose_r+0x38>
    8610:	003ff206 	br	85dc <_fclose_r+0xc0>
    8614:	81400417 	ldw	r5,16(r16)
    8618:	8809883a 	mov	r4,r17
    861c:	00059640 	call	5964 <_free_r>
    8620:	003fd906 	br	8588 <_fclose_r+0x6c>
    8624:	04bfffc4 	movi	r18,-1
    8628:	003fd406 	br	857c <_fclose_r+0x60>

0000862c <fclose>:
    862c:	00800074 	movhi	r2,1
    8630:	10bd3c04 	addi	r2,r2,-2832
    8634:	200b883a 	mov	r5,r4
    8638:	11000017 	ldw	r4,0(r2)
    863c:	000851c1 	jmpi	851c <_fclose_r>

00008640 <_fstat_r>:
    8640:	defffd04 	addi	sp,sp,-12
    8644:	dc000015 	stw	r16,0(sp)
    8648:	04000074 	movhi	r16,1
    864c:	8403eb04 	addi	r16,r16,4012
    8650:	dc400115 	stw	r17,4(sp)
    8654:	80000015 	stw	zero,0(r16)
    8658:	2023883a 	mov	r17,r4
    865c:	2809883a 	mov	r4,r5
    8660:	300b883a 	mov	r5,r6
    8664:	dfc00215 	stw	ra,8(sp)
    8668:	000af800 	call	af80 <fstat>
    866c:	1007883a 	mov	r3,r2
    8670:	00bfffc4 	movi	r2,-1
    8674:	18800626 	beq	r3,r2,8690 <_fstat_r+0x50>
    8678:	1805883a 	mov	r2,r3
    867c:	dfc00217 	ldw	ra,8(sp)
    8680:	dc400117 	ldw	r17,4(sp)
    8684:	dc000017 	ldw	r16,0(sp)
    8688:	dec00304 	addi	sp,sp,12
    868c:	f800283a 	ret
    8690:	80800017 	ldw	r2,0(r16)
    8694:	103ff826 	beq	r2,zero,8678 <_fstat_r+0x38>
    8698:	88800015 	stw	r2,0(r17)
    869c:	1805883a 	mov	r2,r3
    86a0:	dfc00217 	ldw	ra,8(sp)
    86a4:	dc400117 	ldw	r17,4(sp)
    86a8:	dc000017 	ldw	r16,0(sp)
    86ac:	dec00304 	addi	sp,sp,12
    86b0:	f800283a 	ret

000086b4 <_isatty_r>:
    86b4:	defffd04 	addi	sp,sp,-12
    86b8:	dc000015 	stw	r16,0(sp)
    86bc:	04000074 	movhi	r16,1
    86c0:	8403eb04 	addi	r16,r16,4012
    86c4:	dc400115 	stw	r17,4(sp)
    86c8:	80000015 	stw	zero,0(r16)
    86cc:	2023883a 	mov	r17,r4
    86d0:	2809883a 	mov	r4,r5
    86d4:	dfc00215 	stw	ra,8(sp)
    86d8:	000b0b40 	call	b0b4 <isatty>
    86dc:	1007883a 	mov	r3,r2
    86e0:	00bfffc4 	movi	r2,-1
    86e4:	18800626 	beq	r3,r2,8700 <_isatty_r+0x4c>
    86e8:	1805883a 	mov	r2,r3
    86ec:	dfc00217 	ldw	ra,8(sp)
    86f0:	dc400117 	ldw	r17,4(sp)
    86f4:	dc000017 	ldw	r16,0(sp)
    86f8:	dec00304 	addi	sp,sp,12
    86fc:	f800283a 	ret
    8700:	80800017 	ldw	r2,0(r16)
    8704:	103ff826 	beq	r2,zero,86e8 <_isatty_r+0x34>
    8708:	88800015 	stw	r2,0(r17)
    870c:	1805883a 	mov	r2,r3
    8710:	dfc00217 	ldw	ra,8(sp)
    8714:	dc400117 	ldw	r17,4(sp)
    8718:	dc000017 	ldw	r16,0(sp)
    871c:	dec00304 	addi	sp,sp,12
    8720:	f800283a 	ret

00008724 <_lseek_r>:
    8724:	defffd04 	addi	sp,sp,-12
    8728:	dc000015 	stw	r16,0(sp)
    872c:	04000074 	movhi	r16,1
    8730:	8403eb04 	addi	r16,r16,4012
    8734:	dc400115 	stw	r17,4(sp)
    8738:	80000015 	stw	zero,0(r16)
    873c:	2023883a 	mov	r17,r4
    8740:	2809883a 	mov	r4,r5
    8744:	300b883a 	mov	r5,r6
    8748:	380d883a 	mov	r6,r7
    874c:	dfc00215 	stw	ra,8(sp)
    8750:	000b2c00 	call	b2c0 <lseek>
    8754:	1007883a 	mov	r3,r2
    8758:	00bfffc4 	movi	r2,-1
    875c:	18800626 	beq	r3,r2,8778 <_lseek_r+0x54>
    8760:	1805883a 	mov	r2,r3
    8764:	dfc00217 	ldw	ra,8(sp)
    8768:	dc400117 	ldw	r17,4(sp)
    876c:	dc000017 	ldw	r16,0(sp)
    8770:	dec00304 	addi	sp,sp,12
    8774:	f800283a 	ret
    8778:	80800017 	ldw	r2,0(r16)
    877c:	103ff826 	beq	r2,zero,8760 <_lseek_r+0x3c>
    8780:	88800015 	stw	r2,0(r17)
    8784:	1805883a 	mov	r2,r3
    8788:	dfc00217 	ldw	ra,8(sp)
    878c:	dc400117 	ldw	r17,4(sp)
    8790:	dc000017 	ldw	r16,0(sp)
    8794:	dec00304 	addi	sp,sp,12
    8798:	f800283a 	ret

0000879c <_read_r>:
    879c:	defffd04 	addi	sp,sp,-12
    87a0:	dc000015 	stw	r16,0(sp)
    87a4:	04000074 	movhi	r16,1
    87a8:	8403eb04 	addi	r16,r16,4012
    87ac:	dc400115 	stw	r17,4(sp)
    87b0:	80000015 	stw	zero,0(r16)
    87b4:	2023883a 	mov	r17,r4
    87b8:	2809883a 	mov	r4,r5
    87bc:	300b883a 	mov	r5,r6
    87c0:	380d883a 	mov	r6,r7
    87c4:	dfc00215 	stw	ra,8(sp)
    87c8:	000b4bc0 	call	b4bc <read>
    87cc:	1007883a 	mov	r3,r2
    87d0:	00bfffc4 	movi	r2,-1
    87d4:	18800626 	beq	r3,r2,87f0 <_read_r+0x54>
    87d8:	1805883a 	mov	r2,r3
    87dc:	dfc00217 	ldw	ra,8(sp)
    87e0:	dc400117 	ldw	r17,4(sp)
    87e4:	dc000017 	ldw	r16,0(sp)
    87e8:	dec00304 	addi	sp,sp,12
    87ec:	f800283a 	ret
    87f0:	80800017 	ldw	r2,0(r16)
    87f4:	103ff826 	beq	r2,zero,87d8 <_read_r+0x3c>
    87f8:	88800015 	stw	r2,0(r17)
    87fc:	1805883a 	mov	r2,r3
    8800:	dfc00217 	ldw	ra,8(sp)
    8804:	dc400117 	ldw	r17,4(sp)
    8808:	dc000017 	ldw	r16,0(sp)
    880c:	dec00304 	addi	sp,sp,12
    8810:	f800283a 	ret

00008814 <__udivdi3>:
    8814:	defff004 	addi	sp,sp,-64
    8818:	2005883a 	mov	r2,r4
    881c:	3011883a 	mov	r8,r6
    8820:	df000e15 	stw	fp,56(sp)
    8824:	dd000a15 	stw	r20,40(sp)
    8828:	dc000615 	stw	r16,24(sp)
    882c:	dfc00f15 	stw	ra,60(sp)
    8830:	ddc00d15 	stw	r23,52(sp)
    8834:	dd800c15 	stw	r22,48(sp)
    8838:	dd400b15 	stw	r21,44(sp)
    883c:	dcc00915 	stw	r19,36(sp)
    8840:	dc800815 	stw	r18,32(sp)
    8844:	dc400715 	stw	r17,28(sp)
    8848:	4021883a 	mov	r16,r8
    884c:	1039883a 	mov	fp,r2
    8850:	2829883a 	mov	r20,r5
    8854:	38003b1e 	bne	r7,zero,8944 <__udivdi3+0x130>
    8858:	2a005c36 	bltu	r5,r8,89cc <__udivdi3+0x1b8>
    885c:	4000a626 	beq	r8,zero,8af8 <__udivdi3+0x2e4>
    8860:	00bfffd4 	movui	r2,65535
    8864:	14009e36 	bltu	r2,r16,8ae0 <__udivdi3+0x2cc>
    8868:	00803fc4 	movi	r2,255
    886c:	14013d36 	bltu	r2,r16,8d64 <__udivdi3+0x550>
    8870:	000b883a 	mov	r5,zero
    8874:	0005883a 	mov	r2,zero
    8878:	8084d83a 	srl	r2,r16,r2
    887c:	01000074 	movhi	r4,1
    8880:	21366a04 	addi	r4,r4,-9816
    8884:	01800804 	movi	r6,32
    8888:	1105883a 	add	r2,r2,r4
    888c:	10c00003 	ldbu	r3,0(r2)
    8890:	28c7883a 	add	r3,r5,r3
    8894:	30edc83a 	sub	r22,r6,r3
    8898:	b000ee1e 	bne	r22,zero,8c54 <__udivdi3+0x440>
    889c:	802ad43a 	srli	r21,r16,16
    88a0:	00800044 	movi	r2,1
    88a4:	a423c83a 	sub	r17,r20,r16
    88a8:	85ffffcc 	andi	r23,r16,65535
    88ac:	d8800315 	stw	r2,12(sp)
    88b0:	8809883a 	mov	r4,r17
    88b4:	a80b883a 	mov	r5,r21
    88b8:	000a6080 	call	a608 <__udivsi3>
    88bc:	8809883a 	mov	r4,r17
    88c0:	a80b883a 	mov	r5,r21
    88c4:	102d883a 	mov	r22,r2
    88c8:	000a6100 	call	a610 <__umodsi3>
    88cc:	1004943a 	slli	r2,r2,16
    88d0:	e006d43a 	srli	r3,fp,16
    88d4:	bda3383a 	mul	r17,r23,r22
    88d8:	10c4b03a 	or	r2,r2,r3
    88dc:	1440042e 	bgeu	r2,r17,88f0 <__udivdi3+0xdc>
    88e0:	1405883a 	add	r2,r2,r16
    88e4:	b5bfffc4 	addi	r22,r22,-1
    88e8:	14000136 	bltu	r2,r16,88f0 <__udivdi3+0xdc>
    88ec:	14413d36 	bltu	r2,r17,8de4 <__udivdi3+0x5d0>
    88f0:	1463c83a 	sub	r17,r2,r17
    88f4:	8809883a 	mov	r4,r17
    88f8:	a80b883a 	mov	r5,r21
    88fc:	000a6080 	call	a608 <__udivsi3>
    8900:	8809883a 	mov	r4,r17
    8904:	a80b883a 	mov	r5,r21
    8908:	1029883a 	mov	r20,r2
    890c:	000a6100 	call	a610 <__umodsi3>
    8910:	1004943a 	slli	r2,r2,16
    8914:	bd09383a 	mul	r4,r23,r20
    8918:	e0ffffcc 	andi	r3,fp,65535
    891c:	10c4b03a 	or	r2,r2,r3
    8920:	1100042e 	bgeu	r2,r4,8934 <__udivdi3+0x120>
    8924:	8085883a 	add	r2,r16,r2
    8928:	a53fffc4 	addi	r20,r20,-1
    892c:	14000136 	bltu	r2,r16,8934 <__udivdi3+0x120>
    8930:	11012036 	bltu	r2,r4,8db4 <__udivdi3+0x5a0>
    8934:	b004943a 	slli	r2,r22,16
    8938:	d9000317 	ldw	r4,12(sp)
    893c:	a084b03a 	or	r2,r20,r2
    8940:	00001506 	br	8998 <__udivdi3+0x184>
    8944:	380d883a 	mov	r6,r7
    8948:	29c06236 	bltu	r5,r7,8ad4 <__udivdi3+0x2c0>
    894c:	00bfffd4 	movui	r2,65535
    8950:	11c05a36 	bltu	r2,r7,8abc <__udivdi3+0x2a8>
    8954:	00803fc4 	movi	r2,255
    8958:	11c0fc36 	bltu	r2,r7,8d4c <__udivdi3+0x538>
    895c:	000b883a 	mov	r5,zero
    8960:	0005883a 	mov	r2,zero
    8964:	3084d83a 	srl	r2,r6,r2
    8968:	01000074 	movhi	r4,1
    896c:	21366a04 	addi	r4,r4,-9816
    8970:	01c00804 	movi	r7,32
    8974:	1105883a 	add	r2,r2,r4
    8978:	10c00003 	ldbu	r3,0(r2)
    897c:	28c7883a 	add	r3,r5,r3
    8980:	38efc83a 	sub	r23,r7,r3
    8984:	b800691e 	bne	r23,zero,8b2c <__udivdi3+0x318>
    8988:	35000136 	bltu	r6,r20,8990 <__udivdi3+0x17c>
    898c:	e4005136 	bltu	fp,r16,8ad4 <__udivdi3+0x2c0>
    8990:	00800044 	movi	r2,1
    8994:	0009883a 	mov	r4,zero
    8998:	2007883a 	mov	r3,r4
    899c:	dfc00f17 	ldw	ra,60(sp)
    89a0:	df000e17 	ldw	fp,56(sp)
    89a4:	ddc00d17 	ldw	r23,52(sp)
    89a8:	dd800c17 	ldw	r22,48(sp)
    89ac:	dd400b17 	ldw	r21,44(sp)
    89b0:	dd000a17 	ldw	r20,40(sp)
    89b4:	dcc00917 	ldw	r19,36(sp)
    89b8:	dc800817 	ldw	r18,32(sp)
    89bc:	dc400717 	ldw	r17,28(sp)
    89c0:	dc000617 	ldw	r16,24(sp)
    89c4:	dec01004 	addi	sp,sp,64
    89c8:	f800283a 	ret
    89cc:	00bfffd4 	movui	r2,65535
    89d0:	12005036 	bltu	r2,r8,8b14 <__udivdi3+0x300>
    89d4:	00803fc4 	movi	r2,255
    89d8:	1200e836 	bltu	r2,r8,8d7c <__udivdi3+0x568>
    89dc:	000b883a 	mov	r5,zero
    89e0:	0005883a 	mov	r2,zero
    89e4:	8084d83a 	srl	r2,r16,r2
    89e8:	01000074 	movhi	r4,1
    89ec:	21366a04 	addi	r4,r4,-9816
    89f0:	01800804 	movi	r6,32
    89f4:	1105883a 	add	r2,r2,r4
    89f8:	10c00003 	ldbu	r3,0(r2)
    89fc:	28c7883a 	add	r3,r5,r3
    8a00:	30cbc83a 	sub	r5,r6,r3
    8a04:	28000626 	beq	r5,zero,8a20 <__udivdi3+0x20c>
    8a08:	3145c83a 	sub	r2,r6,r5
    8a0c:	e084d83a 	srl	r2,fp,r2
    8a10:	a146983a 	sll	r3,r20,r5
    8a14:	e178983a 	sll	fp,fp,r5
    8a18:	8160983a 	sll	r16,r16,r5
    8a1c:	18a8b03a 	or	r20,r3,r2
    8a20:	802ad43a 	srli	r21,r16,16
    8a24:	a009883a 	mov	r4,r20
    8a28:	85ffffcc 	andi	r23,r16,65535
    8a2c:	a80b883a 	mov	r5,r21
    8a30:	000a6080 	call	a608 <__udivsi3>
    8a34:	a009883a 	mov	r4,r20
    8a38:	a80b883a 	mov	r5,r21
    8a3c:	102d883a 	mov	r22,r2
    8a40:	000a6100 	call	a610 <__umodsi3>
    8a44:	1004943a 	slli	r2,r2,16
    8a48:	e006d43a 	srli	r3,fp,16
    8a4c:	bda3383a 	mul	r17,r23,r22
    8a50:	10c4b03a 	or	r2,r2,r3
    8a54:	1440042e 	bgeu	r2,r17,8a68 <__udivdi3+0x254>
    8a58:	1405883a 	add	r2,r2,r16
    8a5c:	b5bfffc4 	addi	r22,r22,-1
    8a60:	14000136 	bltu	r2,r16,8a68 <__udivdi3+0x254>
    8a64:	1440d536 	bltu	r2,r17,8dbc <__udivdi3+0x5a8>
    8a68:	1463c83a 	sub	r17,r2,r17
    8a6c:	8809883a 	mov	r4,r17
    8a70:	a80b883a 	mov	r5,r21
    8a74:	000a6080 	call	a608 <__udivsi3>
    8a78:	8809883a 	mov	r4,r17
    8a7c:	a80b883a 	mov	r5,r21
    8a80:	1029883a 	mov	r20,r2
    8a84:	000a6100 	call	a610 <__umodsi3>
    8a88:	1004943a 	slli	r2,r2,16
    8a8c:	bd09383a 	mul	r4,r23,r20
    8a90:	e0ffffcc 	andi	r3,fp,65535
    8a94:	10c4b03a 	or	r2,r2,r3
    8a98:	1100042e 	bgeu	r2,r4,8aac <__udivdi3+0x298>
    8a9c:	8085883a 	add	r2,r16,r2
    8aa0:	a53fffc4 	addi	r20,r20,-1
    8aa4:	14000136 	bltu	r2,r16,8aac <__udivdi3+0x298>
    8aa8:	1100c736 	bltu	r2,r4,8dc8 <__udivdi3+0x5b4>
    8aac:	b004943a 	slli	r2,r22,16
    8ab0:	0009883a 	mov	r4,zero
    8ab4:	a084b03a 	or	r2,r20,r2
    8ab8:	003fb706 	br	8998 <__udivdi3+0x184>
    8abc:	00804034 	movhi	r2,256
    8ac0:	10bfffc4 	addi	r2,r2,-1
    8ac4:	11c0a436 	bltu	r2,r7,8d58 <__udivdi3+0x544>
    8ac8:	01400404 	movi	r5,16
    8acc:	2805883a 	mov	r2,r5
    8ad0:	003fa406 	br	8964 <__udivdi3+0x150>
    8ad4:	0005883a 	mov	r2,zero
    8ad8:	0009883a 	mov	r4,zero
    8adc:	003fae06 	br	8998 <__udivdi3+0x184>
    8ae0:	00804034 	movhi	r2,256
    8ae4:	10bfffc4 	addi	r2,r2,-1
    8ae8:	1400a136 	bltu	r2,r16,8d70 <__udivdi3+0x55c>
    8aec:	01400404 	movi	r5,16
    8af0:	2805883a 	mov	r2,r5
    8af4:	003f6006 	br	8878 <__udivdi3+0x64>
    8af8:	01000044 	movi	r4,1
    8afc:	000b883a 	mov	r5,zero
    8b00:	000a6080 	call	a608 <__udivsi3>
    8b04:	1021883a 	mov	r16,r2
    8b08:	00bfffd4 	movui	r2,65535
    8b0c:	143ff436 	bltu	r2,r16,8ae0 <__udivdi3+0x2cc>
    8b10:	003f5506 	br	8868 <__udivdi3+0x54>
    8b14:	00804034 	movhi	r2,256
    8b18:	10bfffc4 	addi	r2,r2,-1
    8b1c:	12009a36 	bltu	r2,r8,8d88 <__udivdi3+0x574>
    8b20:	01400404 	movi	r5,16
    8b24:	2805883a 	mov	r2,r5
    8b28:	003fae06 	br	89e4 <__udivdi3+0x1d0>
    8b2c:	3dc5c83a 	sub	r2,r7,r23
    8b30:	35c8983a 	sll	r4,r6,r23
    8b34:	8086d83a 	srl	r3,r16,r2
    8b38:	a0a2d83a 	srl	r17,r20,r2
    8b3c:	e084d83a 	srl	r2,fp,r2
    8b40:	20eab03a 	or	r21,r4,r3
    8b44:	a82cd43a 	srli	r22,r21,16
    8b48:	a5c6983a 	sll	r3,r20,r23
    8b4c:	8809883a 	mov	r4,r17
    8b50:	b00b883a 	mov	r5,r22
    8b54:	1886b03a 	or	r3,r3,r2
    8b58:	d8c00215 	stw	r3,8(sp)
    8b5c:	000a6080 	call	a608 <__udivsi3>
    8b60:	8809883a 	mov	r4,r17
    8b64:	b00b883a 	mov	r5,r22
    8b68:	1029883a 	mov	r20,r2
    8b6c:	000a6100 	call	a610 <__umodsi3>
    8b70:	a8ffffcc 	andi	r3,r21,65535
    8b74:	d8c00515 	stw	r3,20(sp)
    8b78:	d9000217 	ldw	r4,8(sp)
    8b7c:	d9400517 	ldw	r5,20(sp)
    8b80:	1004943a 	slli	r2,r2,16
    8b84:	2006d43a 	srli	r3,r4,16
    8b88:	85e0983a 	sll	r16,r16,r23
    8b8c:	2d23383a 	mul	r17,r5,r20
    8b90:	10c4b03a 	or	r2,r2,r3
    8b94:	dc000015 	stw	r16,0(sp)
    8b98:	1440032e 	bgeu	r2,r17,8ba8 <__udivdi3+0x394>
    8b9c:	1545883a 	add	r2,r2,r21
    8ba0:	a53fffc4 	addi	r20,r20,-1
    8ba4:	15407f2e 	bgeu	r2,r21,8da4 <__udivdi3+0x590>
    8ba8:	1463c83a 	sub	r17,r2,r17
    8bac:	8809883a 	mov	r4,r17
    8bb0:	b00b883a 	mov	r5,r22
    8bb4:	000a6080 	call	a608 <__udivsi3>
    8bb8:	8809883a 	mov	r4,r17
    8bbc:	b00b883a 	mov	r5,r22
    8bc0:	1021883a 	mov	r16,r2
    8bc4:	000a6100 	call	a610 <__umodsi3>
    8bc8:	d8c00517 	ldw	r3,20(sp)
    8bcc:	d9000217 	ldw	r4,8(sp)
    8bd0:	1004943a 	slli	r2,r2,16
    8bd4:	1c0f383a 	mul	r7,r3,r16
    8bd8:	20ffffcc 	andi	r3,r4,65535
    8bdc:	10e2b03a 	or	r17,r2,r3
    8be0:	89c0032e 	bgeu	r17,r7,8bf0 <__udivdi3+0x3dc>
    8be4:	8d63883a 	add	r17,r17,r21
    8be8:	843fffc4 	addi	r16,r16,-1
    8bec:	8d40692e 	bgeu	r17,r21,8d94 <__udivdi3+0x580>
    8bf0:	a008943a 	slli	r4,r20,16
    8bf4:	d9400017 	ldw	r5,0(sp)
    8bf8:	89e3c83a 	sub	r17,r17,r7
    8bfc:	8110b03a 	or	r8,r16,r4
    8c00:	280cd43a 	srli	r6,r5,16
    8c04:	28ffffcc 	andi	r3,r5,65535
    8c08:	40bfffcc 	andi	r2,r8,65535
    8c0c:	400ad43a 	srli	r5,r8,16
    8c10:	10d3383a 	mul	r9,r2,r3
    8c14:	1185383a 	mul	r2,r2,r6
    8c18:	28c7383a 	mul	r3,r5,r3
    8c1c:	4808d43a 	srli	r4,r9,16
    8c20:	298b383a 	mul	r5,r5,r6
    8c24:	10c5883a 	add	r2,r2,r3
    8c28:	2089883a 	add	r4,r4,r2
    8c2c:	20c0022e 	bgeu	r4,r3,8c38 <__udivdi3+0x424>
    8c30:	00800074 	movhi	r2,1
    8c34:	288b883a 	add	r5,r5,r2
    8c38:	2004d43a 	srli	r2,r4,16
    8c3c:	288b883a 	add	r5,r5,r2
    8c40:	89403f36 	bltu	r17,r5,8d40 <__udivdi3+0x52c>
    8c44:	89403926 	beq	r17,r5,8d2c <__udivdi3+0x518>
    8c48:	4005883a 	mov	r2,r8
    8c4c:	0009883a 	mov	r4,zero
    8c50:	003f5106 	br	8998 <__udivdi3+0x184>
    8c54:	85a0983a 	sll	r16,r16,r22
    8c58:	3585c83a 	sub	r2,r6,r22
    8c5c:	a0a2d83a 	srl	r17,r20,r2
    8c60:	802ad43a 	srli	r21,r16,16
    8c64:	e084d83a 	srl	r2,fp,r2
    8c68:	a586983a 	sll	r3,r20,r22
    8c6c:	8809883a 	mov	r4,r17
    8c70:	a80b883a 	mov	r5,r21
    8c74:	1886b03a 	or	r3,r3,r2
    8c78:	d8c00115 	stw	r3,4(sp)
    8c7c:	000a6080 	call	a608 <__udivsi3>
    8c80:	8809883a 	mov	r4,r17
    8c84:	a80b883a 	mov	r5,r21
    8c88:	d8800415 	stw	r2,16(sp)
    8c8c:	000a6100 	call	a610 <__umodsi3>
    8c90:	d9000117 	ldw	r4,4(sp)
    8c94:	d9400417 	ldw	r5,16(sp)
    8c98:	1004943a 	slli	r2,r2,16
    8c9c:	85ffffcc 	andi	r23,r16,65535
    8ca0:	2006d43a 	srli	r3,r4,16
    8ca4:	b963383a 	mul	r17,r23,r5
    8ca8:	10c4b03a 	or	r2,r2,r3
    8cac:	1440042e 	bgeu	r2,r17,8cc0 <__udivdi3+0x4ac>
    8cb0:	297fffc4 	addi	r5,r5,-1
    8cb4:	1405883a 	add	r2,r2,r16
    8cb8:	d9400415 	stw	r5,16(sp)
    8cbc:	1400442e 	bgeu	r2,r16,8dd0 <__udivdi3+0x5bc>
    8cc0:	1463c83a 	sub	r17,r2,r17
    8cc4:	8809883a 	mov	r4,r17
    8cc8:	a80b883a 	mov	r5,r21
    8ccc:	000a6080 	call	a608 <__udivsi3>
    8cd0:	8809883a 	mov	r4,r17
    8cd4:	a80b883a 	mov	r5,r21
    8cd8:	1029883a 	mov	r20,r2
    8cdc:	000a6100 	call	a610 <__umodsi3>
    8ce0:	d9400117 	ldw	r5,4(sp)
    8ce4:	1004943a 	slli	r2,r2,16
    8ce8:	bd09383a 	mul	r4,r23,r20
    8cec:	28ffffcc 	andi	r3,r5,65535
    8cf0:	10c6b03a 	or	r3,r2,r3
    8cf4:	1900062e 	bgeu	r3,r4,8d10 <__udivdi3+0x4fc>
    8cf8:	1c07883a 	add	r3,r3,r16
    8cfc:	a53fffc4 	addi	r20,r20,-1
    8d00:	1c000336 	bltu	r3,r16,8d10 <__udivdi3+0x4fc>
    8d04:	1900022e 	bgeu	r3,r4,8d10 <__udivdi3+0x4fc>
    8d08:	a53fffc4 	addi	r20,r20,-1
    8d0c:	1c07883a 	add	r3,r3,r16
    8d10:	d9400417 	ldw	r5,16(sp)
    8d14:	e5b8983a 	sll	fp,fp,r22
    8d18:	1923c83a 	sub	r17,r3,r4
    8d1c:	2804943a 	slli	r2,r5,16
    8d20:	a0a8b03a 	or	r20,r20,r2
    8d24:	dd000315 	stw	r20,12(sp)
    8d28:	003ee106 	br	88b0 <__udivdi3+0x9c>
    8d2c:	2004943a 	slli	r2,r4,16
    8d30:	e5c8983a 	sll	r4,fp,r23
    8d34:	48ffffcc 	andi	r3,r9,65535
    8d38:	10c5883a 	add	r2,r2,r3
    8d3c:	20bfc22e 	bgeu	r4,r2,8c48 <__udivdi3+0x434>
    8d40:	40bfffc4 	addi	r2,r8,-1
    8d44:	0009883a 	mov	r4,zero
    8d48:	003f1306 	br	8998 <__udivdi3+0x184>
    8d4c:	01400204 	movi	r5,8
    8d50:	2805883a 	mov	r2,r5
    8d54:	003f0306 	br	8964 <__udivdi3+0x150>
    8d58:	01400604 	movi	r5,24
    8d5c:	2805883a 	mov	r2,r5
    8d60:	003f0006 	br	8964 <__udivdi3+0x150>
    8d64:	01400204 	movi	r5,8
    8d68:	2805883a 	mov	r2,r5
    8d6c:	003ec206 	br	8878 <__udivdi3+0x64>
    8d70:	01400604 	movi	r5,24
    8d74:	2805883a 	mov	r2,r5
    8d78:	003ebf06 	br	8878 <__udivdi3+0x64>
    8d7c:	01400204 	movi	r5,8
    8d80:	2805883a 	mov	r2,r5
    8d84:	003f1706 	br	89e4 <__udivdi3+0x1d0>
    8d88:	01400604 	movi	r5,24
    8d8c:	2805883a 	mov	r2,r5
    8d90:	003f1406 	br	89e4 <__udivdi3+0x1d0>
    8d94:	89ff962e 	bgeu	r17,r7,8bf0 <__udivdi3+0x3dc>
    8d98:	8d63883a 	add	r17,r17,r21
    8d9c:	843fffc4 	addi	r16,r16,-1
    8da0:	003f9306 	br	8bf0 <__udivdi3+0x3dc>
    8da4:	147f802e 	bgeu	r2,r17,8ba8 <__udivdi3+0x394>
    8da8:	a53fffc4 	addi	r20,r20,-1
    8dac:	1545883a 	add	r2,r2,r21
    8db0:	003f7d06 	br	8ba8 <__udivdi3+0x394>
    8db4:	a53fffc4 	addi	r20,r20,-1
    8db8:	003ede06 	br	8934 <__udivdi3+0x120>
    8dbc:	b5bfffc4 	addi	r22,r22,-1
    8dc0:	1405883a 	add	r2,r2,r16
    8dc4:	003f2806 	br	8a68 <__udivdi3+0x254>
    8dc8:	a53fffc4 	addi	r20,r20,-1
    8dcc:	003f3706 	br	8aac <__udivdi3+0x298>
    8dd0:	147fbb2e 	bgeu	r2,r17,8cc0 <__udivdi3+0x4ac>
    8dd4:	297fffc4 	addi	r5,r5,-1
    8dd8:	1405883a 	add	r2,r2,r16
    8ddc:	d9400415 	stw	r5,16(sp)
    8de0:	003fb706 	br	8cc0 <__udivdi3+0x4ac>
    8de4:	b5bfffc4 	addi	r22,r22,-1
    8de8:	1405883a 	add	r2,r2,r16
    8dec:	003ec006 	br	88f0 <__udivdi3+0xdc>

00008df0 <__umoddi3>:
    8df0:	defff104 	addi	sp,sp,-60
    8df4:	dd800b15 	stw	r22,44(sp)
    8df8:	dd000915 	stw	r20,36(sp)
    8dfc:	dc000515 	stw	r16,20(sp)
    8e00:	dfc00e15 	stw	ra,56(sp)
    8e04:	df000d15 	stw	fp,52(sp)
    8e08:	ddc00c15 	stw	r23,48(sp)
    8e0c:	dd400a15 	stw	r21,40(sp)
    8e10:	dcc00815 	stw	r19,32(sp)
    8e14:	dc800715 	stw	r18,28(sp)
    8e18:	dc400615 	stw	r17,24(sp)
    8e1c:	3021883a 	mov	r16,r6
    8e20:	202d883a 	mov	r22,r4
    8e24:	2829883a 	mov	r20,r5
    8e28:	38002b1e 	bne	r7,zero,8ed8 <__umoddi3+0xe8>
    8e2c:	29805036 	bltu	r5,r6,8f70 <__umoddi3+0x180>
    8e30:	30008a26 	beq	r6,zero,905c <__umoddi3+0x26c>
    8e34:	00bfffd4 	movui	r2,65535
    8e38:	14008236 	bltu	r2,r16,9044 <__umoddi3+0x254>
    8e3c:	00803fc4 	movi	r2,255
    8e40:	14013636 	bltu	r2,r16,931c <__umoddi3+0x52c>
    8e44:	000b883a 	mov	r5,zero
    8e48:	0005883a 	mov	r2,zero
    8e4c:	8084d83a 	srl	r2,r16,r2
    8e50:	01000074 	movhi	r4,1
    8e54:	21366a04 	addi	r4,r4,-9816
    8e58:	01800804 	movi	r6,32
    8e5c:	1105883a 	add	r2,r2,r4
    8e60:	10c00003 	ldbu	r3,0(r2)
    8e64:	28c7883a 	add	r3,r5,r3
    8e68:	30efc83a 	sub	r23,r6,r3
    8e6c:	b800941e 	bne	r23,zero,90c0 <__umoddi3+0x2d0>
    8e70:	802ad43a 	srli	r21,r16,16
    8e74:	a423c83a 	sub	r17,r20,r16
    8e78:	0039883a 	mov	fp,zero
    8e7c:	853fffcc 	andi	r20,r16,65535
    8e80:	8809883a 	mov	r4,r17
    8e84:	a80b883a 	mov	r5,r21
    8e88:	000a6080 	call	a608 <__udivsi3>
    8e8c:	8809883a 	mov	r4,r17
    8e90:	a80b883a 	mov	r5,r21
    8e94:	a0a3383a 	mul	r17,r20,r2
    8e98:	000a6100 	call	a610 <__umodsi3>
    8e9c:	1004943a 	slli	r2,r2,16
    8ea0:	b006d43a 	srli	r3,r22,16
    8ea4:	10c4b03a 	or	r2,r2,r3
    8ea8:	1440032e 	bgeu	r2,r17,8eb8 <__umoddi3+0xc8>
    8eac:	1405883a 	add	r2,r2,r16
    8eb0:	14000136 	bltu	r2,r16,8eb8 <__umoddi3+0xc8>
    8eb4:	14413536 	bltu	r2,r17,938c <__umoddi3+0x59c>
    8eb8:	1463c83a 	sub	r17,r2,r17
    8ebc:	8809883a 	mov	r4,r17
    8ec0:	a80b883a 	mov	r5,r21
    8ec4:	000a6080 	call	a608 <__udivsi3>
    8ec8:	8809883a 	mov	r4,r17
    8ecc:	a0a3383a 	mul	r17,r20,r2
    8ed0:	a80b883a 	mov	r5,r21
    8ed4:	00004d06 	br	900c <__umoddi3+0x21c>
    8ed8:	380d883a 	mov	r6,r7
    8edc:	29c0102e 	bgeu	r5,r7,8f20 <__umoddi3+0x130>
    8ee0:	2011883a 	mov	r8,r4
    8ee4:	2813883a 	mov	r9,r5
    8ee8:	4005883a 	mov	r2,r8
    8eec:	4807883a 	mov	r3,r9
    8ef0:	dfc00e17 	ldw	ra,56(sp)
    8ef4:	df000d17 	ldw	fp,52(sp)
    8ef8:	ddc00c17 	ldw	r23,48(sp)
    8efc:	dd800b17 	ldw	r22,44(sp)
    8f00:	dd400a17 	ldw	r21,40(sp)
    8f04:	dd000917 	ldw	r20,36(sp)
    8f08:	dcc00817 	ldw	r19,32(sp)
    8f0c:	dc800717 	ldw	r18,28(sp)
    8f10:	dc400617 	ldw	r17,24(sp)
    8f14:	dc000517 	ldw	r16,20(sp)
    8f18:	dec00f04 	addi	sp,sp,60
    8f1c:	f800283a 	ret
    8f20:	00bfffd4 	movui	r2,65535
    8f24:	11c05a36 	bltu	r2,r7,9090 <__umoddi3+0x2a0>
    8f28:	00803fc4 	movi	r2,255
    8f2c:	11c0fe36 	bltu	r2,r7,9328 <__umoddi3+0x538>
    8f30:	000b883a 	mov	r5,zero
    8f34:	0005883a 	mov	r2,zero
    8f38:	3084d83a 	srl	r2,r6,r2
    8f3c:	01000074 	movhi	r4,1
    8f40:	21366a04 	addi	r4,r4,-9816
    8f44:	01c00804 	movi	r7,32
    8f48:	1105883a 	add	r2,r2,r4
    8f4c:	10c00003 	ldbu	r3,0(r2)
    8f50:	28c7883a 	add	r3,r5,r3
    8f54:	38ebc83a 	sub	r21,r7,r3
    8f58:	a800851e 	bne	r21,zero,9170 <__umoddi3+0x380>
    8f5c:	35005236 	bltu	r6,r20,90a8 <__umoddi3+0x2b8>
    8f60:	b400512e 	bgeu	r22,r16,90a8 <__umoddi3+0x2b8>
    8f64:	b011883a 	mov	r8,r22
    8f68:	a013883a 	mov	r9,r20
    8f6c:	003fde06 	br	8ee8 <__umoddi3+0xf8>
    8f70:	00bfffd4 	movui	r2,65535
    8f74:	11804036 	bltu	r2,r6,9078 <__umoddi3+0x288>
    8f78:	00803fc4 	movi	r2,255
    8f7c:	1180ed36 	bltu	r2,r6,9334 <__umoddi3+0x544>
    8f80:	000b883a 	mov	r5,zero
    8f84:	0005883a 	mov	r2,zero
    8f88:	8084d83a 	srl	r2,r16,r2
    8f8c:	01000074 	movhi	r4,1
    8f90:	21366a04 	addi	r4,r4,-9816
    8f94:	01800804 	movi	r6,32
    8f98:	1105883a 	add	r2,r2,r4
    8f9c:	10c00003 	ldbu	r3,0(r2)
    8fa0:	28c7883a 	add	r3,r5,r3
    8fa4:	30c7c83a 	sub	r3,r6,r3
    8fa8:	1800bf1e 	bne	r3,zero,92a8 <__umoddi3+0x4b8>
    8fac:	0039883a 	mov	fp,zero
    8fb0:	802ad43a 	srli	r21,r16,16
    8fb4:	a009883a 	mov	r4,r20
    8fb8:	85ffffcc 	andi	r23,r16,65535
    8fbc:	a80b883a 	mov	r5,r21
    8fc0:	000a6080 	call	a608 <__udivsi3>
    8fc4:	a009883a 	mov	r4,r20
    8fc8:	a80b883a 	mov	r5,r21
    8fcc:	b8a3383a 	mul	r17,r23,r2
    8fd0:	000a6100 	call	a610 <__umodsi3>
    8fd4:	1004943a 	slli	r2,r2,16
    8fd8:	b006d43a 	srli	r3,r22,16
    8fdc:	10c4b03a 	or	r2,r2,r3
    8fe0:	1440032e 	bgeu	r2,r17,8ff0 <__umoddi3+0x200>
    8fe4:	1405883a 	add	r2,r2,r16
    8fe8:	14000136 	bltu	r2,r16,8ff0 <__umoddi3+0x200>
    8fec:	1440e536 	bltu	r2,r17,9384 <__umoddi3+0x594>
    8ff0:	1463c83a 	sub	r17,r2,r17
    8ff4:	8809883a 	mov	r4,r17
    8ff8:	a80b883a 	mov	r5,r21
    8ffc:	000a6080 	call	a608 <__udivsi3>
    9000:	8809883a 	mov	r4,r17
    9004:	b8a3383a 	mul	r17,r23,r2
    9008:	a80b883a 	mov	r5,r21
    900c:	000a6100 	call	a610 <__umodsi3>
    9010:	1004943a 	slli	r2,r2,16
    9014:	b0ffffcc 	andi	r3,r22,65535
    9018:	10c4b03a 	or	r2,r2,r3
    901c:	1440042e 	bgeu	r2,r17,9030 <__umoddi3+0x240>
    9020:	1405883a 	add	r2,r2,r16
    9024:	14000236 	bltu	r2,r16,9030 <__umoddi3+0x240>
    9028:	1440012e 	bgeu	r2,r17,9030 <__umoddi3+0x240>
    902c:	1405883a 	add	r2,r2,r16
    9030:	1445c83a 	sub	r2,r2,r17
    9034:	1724d83a 	srl	r18,r2,fp
    9038:	0013883a 	mov	r9,zero
    903c:	9011883a 	mov	r8,r18
    9040:	003fa906 	br	8ee8 <__umoddi3+0xf8>
    9044:	00804034 	movhi	r2,256
    9048:	10bfffc4 	addi	r2,r2,-1
    904c:	1400b036 	bltu	r2,r16,9310 <__umoddi3+0x520>
    9050:	01400404 	movi	r5,16
    9054:	2805883a 	mov	r2,r5
    9058:	003f7c06 	br	8e4c <__umoddi3+0x5c>
    905c:	01000044 	movi	r4,1
    9060:	000b883a 	mov	r5,zero
    9064:	000a6080 	call	a608 <__udivsi3>
    9068:	1021883a 	mov	r16,r2
    906c:	00bfffd4 	movui	r2,65535
    9070:	143ff436 	bltu	r2,r16,9044 <__umoddi3+0x254>
    9074:	003f7106 	br	8e3c <__umoddi3+0x4c>
    9078:	00804034 	movhi	r2,256
    907c:	10bfffc4 	addi	r2,r2,-1
    9080:	1180af36 	bltu	r2,r6,9340 <__umoddi3+0x550>
    9084:	01400404 	movi	r5,16
    9088:	2805883a 	mov	r2,r5
    908c:	003fbe06 	br	8f88 <__umoddi3+0x198>
    9090:	00804034 	movhi	r2,256
    9094:	10bfffc4 	addi	r2,r2,-1
    9098:	11c0ac36 	bltu	r2,r7,934c <__umoddi3+0x55c>
    909c:	01400404 	movi	r5,16
    90a0:	2805883a 	mov	r2,r5
    90a4:	003fa406 	br	8f38 <__umoddi3+0x148>
    90a8:	b409c83a 	sub	r4,r22,r16
    90ac:	b105803a 	cmpltu	r2,r22,r4
    90b0:	a187c83a 	sub	r3,r20,r6
    90b4:	18a9c83a 	sub	r20,r3,r2
    90b8:	202d883a 	mov	r22,r4
    90bc:	003fa906 	br	8f64 <__umoddi3+0x174>
    90c0:	85e0983a 	sll	r16,r16,r23
    90c4:	35c5c83a 	sub	r2,r6,r23
    90c8:	a0a2d83a 	srl	r17,r20,r2
    90cc:	802ad43a 	srli	r21,r16,16
    90d0:	b084d83a 	srl	r2,r22,r2
    90d4:	a5c6983a 	sll	r3,r20,r23
    90d8:	8809883a 	mov	r4,r17
    90dc:	a80b883a 	mov	r5,r21
    90e0:	1886b03a 	or	r3,r3,r2
    90e4:	d8c00115 	stw	r3,4(sp)
    90e8:	853fffcc 	andi	r20,r16,65535
    90ec:	000a6080 	call	a608 <__udivsi3>
    90f0:	8809883a 	mov	r4,r17
    90f4:	a80b883a 	mov	r5,r21
    90f8:	a0a3383a 	mul	r17,r20,r2
    90fc:	000a6100 	call	a610 <__umodsi3>
    9100:	d9000117 	ldw	r4,4(sp)
    9104:	1004943a 	slli	r2,r2,16
    9108:	b839883a 	mov	fp,r23
    910c:	2006d43a 	srli	r3,r4,16
    9110:	10c4b03a 	or	r2,r2,r3
    9114:	1440022e 	bgeu	r2,r17,9120 <__umoddi3+0x330>
    9118:	1405883a 	add	r2,r2,r16
    911c:	1400962e 	bgeu	r2,r16,9378 <__umoddi3+0x588>
    9120:	1463c83a 	sub	r17,r2,r17
    9124:	8809883a 	mov	r4,r17
    9128:	a80b883a 	mov	r5,r21
    912c:	000a6080 	call	a608 <__udivsi3>
    9130:	8809883a 	mov	r4,r17
    9134:	a80b883a 	mov	r5,r21
    9138:	a0a3383a 	mul	r17,r20,r2
    913c:	000a6100 	call	a610 <__umodsi3>
    9140:	d9400117 	ldw	r5,4(sp)
    9144:	1004943a 	slli	r2,r2,16
    9148:	28ffffcc 	andi	r3,r5,65535
    914c:	10c4b03a 	or	r2,r2,r3
    9150:	1440042e 	bgeu	r2,r17,9164 <__umoddi3+0x374>
    9154:	1405883a 	add	r2,r2,r16
    9158:	14000236 	bltu	r2,r16,9164 <__umoddi3+0x374>
    915c:	1440012e 	bgeu	r2,r17,9164 <__umoddi3+0x374>
    9160:	1405883a 	add	r2,r2,r16
    9164:	b5ec983a 	sll	r22,r22,r23
    9168:	1463c83a 	sub	r17,r2,r17
    916c:	003f4406 	br	8e80 <__umoddi3+0x90>
    9170:	3d4fc83a 	sub	r7,r7,r21
    9174:	3546983a 	sll	r3,r6,r21
    9178:	81c4d83a 	srl	r2,r16,r7
    917c:	a1e2d83a 	srl	r17,r20,r7
    9180:	a54c983a 	sll	r6,r20,r21
    9184:	18aeb03a 	or	r23,r3,r2
    9188:	b828d43a 	srli	r20,r23,16
    918c:	b1c4d83a 	srl	r2,r22,r7
    9190:	8809883a 	mov	r4,r17
    9194:	a00b883a 	mov	r5,r20
    9198:	308cb03a 	or	r6,r6,r2
    919c:	d9c00315 	stw	r7,12(sp)
    91a0:	d9800215 	stw	r6,8(sp)
    91a4:	000a6080 	call	a608 <__udivsi3>
    91a8:	8809883a 	mov	r4,r17
    91ac:	a00b883a 	mov	r5,r20
    91b0:	1039883a 	mov	fp,r2
    91b4:	000a6100 	call	a610 <__umodsi3>
    91b8:	b8ffffcc 	andi	r3,r23,65535
    91bc:	d8c00415 	stw	r3,16(sp)
    91c0:	d9000217 	ldw	r4,8(sp)
    91c4:	d9400417 	ldw	r5,16(sp)
    91c8:	1004943a 	slli	r2,r2,16
    91cc:	2006d43a 	srli	r3,r4,16
    91d0:	8560983a 	sll	r16,r16,r21
    91d4:	2f23383a 	mul	r17,r5,fp
    91d8:	10c4b03a 	or	r2,r2,r3
    91dc:	dc000015 	stw	r16,0(sp)
    91e0:	b56c983a 	sll	r22,r22,r21
    91e4:	1440032e 	bgeu	r2,r17,91f4 <__umoddi3+0x404>
    91e8:	15c5883a 	add	r2,r2,r23
    91ec:	e73fffc4 	addi	fp,fp,-1
    91f0:	15c05d2e 	bgeu	r2,r23,9368 <__umoddi3+0x578>
    91f4:	1463c83a 	sub	r17,r2,r17
    91f8:	8809883a 	mov	r4,r17
    91fc:	a00b883a 	mov	r5,r20
    9200:	000a6080 	call	a608 <__udivsi3>
    9204:	8809883a 	mov	r4,r17
    9208:	a00b883a 	mov	r5,r20
    920c:	1021883a 	mov	r16,r2
    9210:	000a6100 	call	a610 <__umodsi3>
    9214:	d8c00417 	ldw	r3,16(sp)
    9218:	d9000217 	ldw	r4,8(sp)
    921c:	1004943a 	slli	r2,r2,16
    9220:	1c23383a 	mul	r17,r3,r16
    9224:	20ffffcc 	andi	r3,r4,65535
    9228:	10ceb03a 	or	r7,r2,r3
    922c:	3c40032e 	bgeu	r7,r17,923c <__umoddi3+0x44c>
    9230:	3dcf883a 	add	r7,r7,r23
    9234:	843fffc4 	addi	r16,r16,-1
    9238:	3dc0472e 	bgeu	r7,r23,9358 <__umoddi3+0x568>
    923c:	e004943a 	slli	r2,fp,16
    9240:	d9400017 	ldw	r5,0(sp)
    9244:	3c4fc83a 	sub	r7,r7,r17
    9248:	8084b03a 	or	r2,r16,r2
    924c:	28ffffcc 	andi	r3,r5,65535
    9250:	280cd43a 	srli	r6,r5,16
    9254:	100ad43a 	srli	r5,r2,16
    9258:	10bfffcc 	andi	r2,r2,65535
    925c:	10d1383a 	mul	r8,r2,r3
    9260:	28c7383a 	mul	r3,r5,r3
    9264:	1185383a 	mul	r2,r2,r6
    9268:	4008d43a 	srli	r4,r8,16
    926c:	298b383a 	mul	r5,r5,r6
    9270:	10c5883a 	add	r2,r2,r3
    9274:	2089883a 	add	r4,r4,r2
    9278:	20c0022e 	bgeu	r4,r3,9284 <__umoddi3+0x494>
    927c:	00800074 	movhi	r2,1
    9280:	288b883a 	add	r5,r5,r2
    9284:	2004d43a 	srli	r2,r4,16
    9288:	2008943a 	slli	r4,r4,16
    928c:	40ffffcc 	andi	r3,r8,65535
    9290:	288b883a 	add	r5,r5,r2
    9294:	20c9883a 	add	r4,r4,r3
    9298:	39400b36 	bltu	r7,r5,92c8 <__umoddi3+0x4d8>
    929c:	39403d26 	beq	r7,r5,9394 <__umoddi3+0x5a4>
    92a0:	394bc83a 	sub	r5,r7,r5
    92a4:	00000f06 	br	92e4 <__umoddi3+0x4f4>
    92a8:	30c5c83a 	sub	r2,r6,r3
    92ac:	1839883a 	mov	fp,r3
    92b0:	b084d83a 	srl	r2,r22,r2
    92b4:	a0c6983a 	sll	r3,r20,r3
    92b8:	8720983a 	sll	r16,r16,fp
    92bc:	b72c983a 	sll	r22,r22,fp
    92c0:	18a8b03a 	or	r20,r3,r2
    92c4:	003f3a06 	br	8fb0 <__umoddi3+0x1c0>
    92c8:	d8c00017 	ldw	r3,0(sp)
    92cc:	20c5c83a 	sub	r2,r4,r3
    92d0:	2089803a 	cmpltu	r4,r4,r2
    92d4:	2dc7c83a 	sub	r3,r5,r23
    92d8:	1907c83a 	sub	r3,r3,r4
    92dc:	38cbc83a 	sub	r5,r7,r3
    92e0:	1009883a 	mov	r4,r2
    92e4:	b105c83a 	sub	r2,r22,r4
    92e8:	b087803a 	cmpltu	r3,r22,r2
    92ec:	28c7c83a 	sub	r3,r5,r3
    92f0:	d9400317 	ldw	r5,12(sp)
    92f4:	1544d83a 	srl	r2,r2,r21
    92f8:	1948983a 	sll	r4,r3,r5
    92fc:	1d46d83a 	srl	r3,r3,r21
    9300:	20a4b03a 	or	r18,r4,r2
    9304:	9011883a 	mov	r8,r18
    9308:	1813883a 	mov	r9,r3
    930c:	003ef606 	br	8ee8 <__umoddi3+0xf8>
    9310:	01400604 	movi	r5,24
    9314:	2805883a 	mov	r2,r5
    9318:	003ecc06 	br	8e4c <__umoddi3+0x5c>
    931c:	01400204 	movi	r5,8
    9320:	2805883a 	mov	r2,r5
    9324:	003ec906 	br	8e4c <__umoddi3+0x5c>
    9328:	01400204 	movi	r5,8
    932c:	2805883a 	mov	r2,r5
    9330:	003f0106 	br	8f38 <__umoddi3+0x148>
    9334:	01400204 	movi	r5,8
    9338:	2805883a 	mov	r2,r5
    933c:	003f1206 	br	8f88 <__umoddi3+0x198>
    9340:	01400604 	movi	r5,24
    9344:	2805883a 	mov	r2,r5
    9348:	003f0f06 	br	8f88 <__umoddi3+0x198>
    934c:	01400604 	movi	r5,24
    9350:	2805883a 	mov	r2,r5
    9354:	003ef806 	br	8f38 <__umoddi3+0x148>
    9358:	3c7fb82e 	bgeu	r7,r17,923c <__umoddi3+0x44c>
    935c:	843fffc4 	addi	r16,r16,-1
    9360:	3dcf883a 	add	r7,r7,r23
    9364:	003fb506 	br	923c <__umoddi3+0x44c>
    9368:	147fa22e 	bgeu	r2,r17,91f4 <__umoddi3+0x404>
    936c:	e73fffc4 	addi	fp,fp,-1
    9370:	15c5883a 	add	r2,r2,r23
    9374:	003f9f06 	br	91f4 <__umoddi3+0x404>
    9378:	147f692e 	bgeu	r2,r17,9120 <__umoddi3+0x330>
    937c:	1405883a 	add	r2,r2,r16
    9380:	003f6706 	br	9120 <__umoddi3+0x330>
    9384:	1405883a 	add	r2,r2,r16
    9388:	003f1906 	br	8ff0 <__umoddi3+0x200>
    938c:	1405883a 	add	r2,r2,r16
    9390:	003ec906 	br	8eb8 <__umoddi3+0xc8>
    9394:	b13fcc36 	bltu	r22,r4,92c8 <__umoddi3+0x4d8>
    9398:	000b883a 	mov	r5,zero
    939c:	003fd106 	br	92e4 <__umoddi3+0x4f4>

000093a0 <_fpadd_parts>:
    93a0:	defff804 	addi	sp,sp,-32
    93a4:	dcc00315 	stw	r19,12(sp)
    93a8:	2027883a 	mov	r19,r4
    93ac:	21000017 	ldw	r4,0(r4)
    93b0:	00c00044 	movi	r3,1
    93b4:	dd400515 	stw	r21,20(sp)
    93b8:	dd000415 	stw	r20,16(sp)
    93bc:	ddc00715 	stw	r23,28(sp)
    93c0:	dd800615 	stw	r22,24(sp)
    93c4:	dc800215 	stw	r18,8(sp)
    93c8:	dc400115 	stw	r17,4(sp)
    93cc:	dc000015 	stw	r16,0(sp)
    93d0:	282b883a 	mov	r21,r5
    93d4:	3029883a 	mov	r20,r6
    93d8:	1900632e 	bgeu	r3,r4,9568 <_fpadd_parts+0x1c8>
    93dc:	28800017 	ldw	r2,0(r5)
    93e0:	1880812e 	bgeu	r3,r2,95e8 <_fpadd_parts+0x248>
    93e4:	00c00104 	movi	r3,4
    93e8:	20c0dc26 	beq	r4,r3,975c <_fpadd_parts+0x3bc>
    93ec:	10c07e26 	beq	r2,r3,95e8 <_fpadd_parts+0x248>
    93f0:	00c00084 	movi	r3,2
    93f4:	10c06726 	beq	r2,r3,9594 <_fpadd_parts+0x1f4>
    93f8:	20c07b26 	beq	r4,r3,95e8 <_fpadd_parts+0x248>
    93fc:	9dc00217 	ldw	r23,8(r19)
    9400:	28c00217 	ldw	r3,8(r5)
    9404:	9c400317 	ldw	r17,12(r19)
    9408:	2bc00317 	ldw	r15,12(r5)
    940c:	b8cdc83a 	sub	r6,r23,r3
    9410:	9c800417 	ldw	r18,16(r19)
    9414:	2c000417 	ldw	r16,16(r5)
    9418:	3009883a 	mov	r4,r6
    941c:	30009716 	blt	r6,zero,967c <_fpadd_parts+0x2dc>
    9420:	00800fc4 	movi	r2,63
    9424:	11806b16 	blt	r2,r6,95d4 <_fpadd_parts+0x234>
    9428:	0100a40e 	bge	zero,r4,96bc <_fpadd_parts+0x31c>
    942c:	35bff804 	addi	r22,r6,-32
    9430:	b000bc16 	blt	r22,zero,9724 <_fpadd_parts+0x384>
    9434:	8596d83a 	srl	r11,r16,r22
    9438:	0019883a 	mov	r12,zero
    943c:	0013883a 	mov	r9,zero
    9440:	01000044 	movi	r4,1
    9444:	0015883a 	mov	r10,zero
    9448:	b000be16 	blt	r22,zero,9744 <_fpadd_parts+0x3a4>
    944c:	2590983a 	sll	r8,r4,r22
    9450:	000f883a 	mov	r7,zero
    9454:	00bfffc4 	movi	r2,-1
    9458:	3889883a 	add	r4,r7,r2
    945c:	408b883a 	add	r5,r8,r2
    9460:	21cd803a 	cmpltu	r6,r4,r7
    9464:	314b883a 	add	r5,r6,r5
    9468:	7904703a 	and	r2,r15,r4
    946c:	8146703a 	and	r3,r16,r5
    9470:	10c4b03a 	or	r2,r2,r3
    9474:	10000226 	beq	r2,zero,9480 <_fpadd_parts+0xe0>
    9478:	02400044 	movi	r9,1
    947c:	0015883a 	mov	r10,zero
    9480:	5a5eb03a 	or	r15,r11,r9
    9484:	62a0b03a 	or	r16,r12,r10
    9488:	99400117 	ldw	r5,4(r19)
    948c:	a8800117 	ldw	r2,4(r21)
    9490:	28806e26 	beq	r5,r2,964c <_fpadd_parts+0x2ac>
    9494:	28006626 	beq	r5,zero,9630 <_fpadd_parts+0x290>
    9498:	7c45c83a 	sub	r2,r15,r17
    949c:	7889803a 	cmpltu	r4,r15,r2
    94a0:	8487c83a 	sub	r3,r16,r18
    94a4:	1909c83a 	sub	r4,r3,r4
    94a8:	100d883a 	mov	r6,r2
    94ac:	200f883a 	mov	r7,r4
    94b0:	38007716 	blt	r7,zero,9690 <_fpadd_parts+0x2f0>
    94b4:	a5c00215 	stw	r23,8(r20)
    94b8:	a1c00415 	stw	r7,16(r20)
    94bc:	a0000115 	stw	zero,4(r20)
    94c0:	a1800315 	stw	r6,12(r20)
    94c4:	a2000317 	ldw	r8,12(r20)
    94c8:	a2400417 	ldw	r9,16(r20)
    94cc:	00bfffc4 	movi	r2,-1
    94d0:	408b883a 	add	r5,r8,r2
    94d4:	2a09803a 	cmpltu	r4,r5,r8
    94d8:	488d883a 	add	r6,r9,r2
    94dc:	01c40034 	movhi	r7,4096
    94e0:	39ffffc4 	addi	r7,r7,-1
    94e4:	218d883a 	add	r6,r4,r6
    94e8:	39801736 	bltu	r7,r6,9548 <_fpadd_parts+0x1a8>
    94ec:	31c06526 	beq	r6,r7,9684 <_fpadd_parts+0x2e4>
    94f0:	a3000217 	ldw	r12,8(r20)
    94f4:	4209883a 	add	r4,r8,r8
    94f8:	00bfffc4 	movi	r2,-1
    94fc:	220f803a 	cmpltu	r7,r4,r8
    9500:	4a4b883a 	add	r5,r9,r9
    9504:	394f883a 	add	r7,r7,r5
    9508:	2095883a 	add	r10,r4,r2
    950c:	3897883a 	add	r11,r7,r2
    9510:	510d803a 	cmpltu	r6,r10,r4
    9514:	6099883a 	add	r12,r12,r2
    9518:	32d7883a 	add	r11,r6,r11
    951c:	00840034 	movhi	r2,4096
    9520:	10bfffc4 	addi	r2,r2,-1
    9524:	2011883a 	mov	r8,r4
    9528:	3813883a 	mov	r9,r7
    952c:	a1000315 	stw	r4,12(r20)
    9530:	a1c00415 	stw	r7,16(r20)
    9534:	a3000215 	stw	r12,8(r20)
    9538:	12c00336 	bltu	r2,r11,9548 <_fpadd_parts+0x1a8>
    953c:	58bfed1e 	bne	r11,r2,94f4 <_fpadd_parts+0x154>
    9540:	00bfff84 	movi	r2,-2
    9544:	12bfeb2e 	bgeu	r2,r10,94f4 <_fpadd_parts+0x154>
    9548:	a2800417 	ldw	r10,16(r20)
    954c:	008000c4 	movi	r2,3
    9550:	00c80034 	movhi	r3,8192
    9554:	18ffffc4 	addi	r3,r3,-1
    9558:	a2400317 	ldw	r9,12(r20)
    955c:	a0800015 	stw	r2,0(r20)
    9560:	1a802336 	bltu	r3,r10,95f0 <_fpadd_parts+0x250>
    9564:	a027883a 	mov	r19,r20
    9568:	9805883a 	mov	r2,r19
    956c:	ddc00717 	ldw	r23,28(sp)
    9570:	dd800617 	ldw	r22,24(sp)
    9574:	dd400517 	ldw	r21,20(sp)
    9578:	dd000417 	ldw	r20,16(sp)
    957c:	dcc00317 	ldw	r19,12(sp)
    9580:	dc800217 	ldw	r18,8(sp)
    9584:	dc400117 	ldw	r17,4(sp)
    9588:	dc000017 	ldw	r16,0(sp)
    958c:	dec00804 	addi	sp,sp,32
    9590:	f800283a 	ret
    9594:	20fff41e 	bne	r4,r3,9568 <_fpadd_parts+0x1c8>
    9598:	31000015 	stw	r4,0(r6)
    959c:	98800117 	ldw	r2,4(r19)
    95a0:	30800115 	stw	r2,4(r6)
    95a4:	98c00217 	ldw	r3,8(r19)
    95a8:	30c00215 	stw	r3,8(r6)
    95ac:	98800317 	ldw	r2,12(r19)
    95b0:	30800315 	stw	r2,12(r6)
    95b4:	98c00417 	ldw	r3,16(r19)
    95b8:	30c00415 	stw	r3,16(r6)
    95bc:	98800117 	ldw	r2,4(r19)
    95c0:	28c00117 	ldw	r3,4(r5)
    95c4:	3027883a 	mov	r19,r6
    95c8:	10c4703a 	and	r2,r2,r3
    95cc:	30800115 	stw	r2,4(r6)
    95d0:	003fe506 	br	9568 <_fpadd_parts+0x1c8>
    95d4:	1dc02616 	blt	r3,r23,9670 <_fpadd_parts+0x2d0>
    95d8:	0023883a 	mov	r17,zero
    95dc:	182f883a 	mov	r23,r3
    95e0:	0025883a 	mov	r18,zero
    95e4:	003fa806 	br	9488 <_fpadd_parts+0xe8>
    95e8:	a827883a 	mov	r19,r21
    95ec:	003fde06 	br	9568 <_fpadd_parts+0x1c8>
    95f0:	01800044 	movi	r6,1
    95f4:	500497fa 	slli	r2,r10,31
    95f8:	4808d07a 	srli	r4,r9,1
    95fc:	518ad83a 	srl	r5,r10,r6
    9600:	a2000217 	ldw	r8,8(r20)
    9604:	1108b03a 	or	r4,r2,r4
    9608:	0007883a 	mov	r3,zero
    960c:	4984703a 	and	r2,r9,r6
    9610:	208cb03a 	or	r6,r4,r2
    9614:	28ceb03a 	or	r7,r5,r3
    9618:	42000044 	addi	r8,r8,1
    961c:	a027883a 	mov	r19,r20
    9620:	a1c00415 	stw	r7,16(r20)
    9624:	a2000215 	stw	r8,8(r20)
    9628:	a1800315 	stw	r6,12(r20)
    962c:	003fce06 	br	9568 <_fpadd_parts+0x1c8>
    9630:	8bc5c83a 	sub	r2,r17,r15
    9634:	8889803a 	cmpltu	r4,r17,r2
    9638:	9407c83a 	sub	r3,r18,r16
    963c:	1909c83a 	sub	r4,r3,r4
    9640:	100d883a 	mov	r6,r2
    9644:	200f883a 	mov	r7,r4
    9648:	003f9906 	br	94b0 <_fpadd_parts+0x110>
    964c:	7c45883a 	add	r2,r15,r17
    9650:	13c9803a 	cmpltu	r4,r2,r15
    9654:	8487883a 	add	r3,r16,r18
    9658:	20c9883a 	add	r4,r4,r3
    965c:	a1400115 	stw	r5,4(r20)
    9660:	a5c00215 	stw	r23,8(r20)
    9664:	a0800315 	stw	r2,12(r20)
    9668:	a1000415 	stw	r4,16(r20)
    966c:	003fb606 	br	9548 <_fpadd_parts+0x1a8>
    9670:	001f883a 	mov	r15,zero
    9674:	0021883a 	mov	r16,zero
    9678:	003f8306 	br	9488 <_fpadd_parts+0xe8>
    967c:	018dc83a 	sub	r6,zero,r6
    9680:	003f6706 	br	9420 <_fpadd_parts+0x80>
    9684:	00bfff84 	movi	r2,-2
    9688:	117faf36 	bltu	r2,r5,9548 <_fpadd_parts+0x1a8>
    968c:	003f9806 	br	94f0 <_fpadd_parts+0x150>
    9690:	0005883a 	mov	r2,zero
    9694:	1189c83a 	sub	r4,r2,r6
    9698:	1105803a 	cmpltu	r2,r2,r4
    969c:	01cbc83a 	sub	r5,zero,r7
    96a0:	2885c83a 	sub	r2,r5,r2
    96a4:	01800044 	movi	r6,1
    96a8:	a1800115 	stw	r6,4(r20)
    96ac:	a5c00215 	stw	r23,8(r20)
    96b0:	a1000315 	stw	r4,12(r20)
    96b4:	a0800415 	stw	r2,16(r20)
    96b8:	003f8206 	br	94c4 <_fpadd_parts+0x124>
    96bc:	203f7226 	beq	r4,zero,9488 <_fpadd_parts+0xe8>
    96c0:	35bff804 	addi	r22,r6,-32
    96c4:	b9af883a 	add	r23,r23,r6
    96c8:	b0003116 	blt	r22,zero,9790 <_fpadd_parts+0x3f0>
    96cc:	959ad83a 	srl	r13,r18,r22
    96d0:	001d883a 	mov	r14,zero
    96d4:	000f883a 	mov	r7,zero
    96d8:	01000044 	movi	r4,1
    96dc:	0011883a 	mov	r8,zero
    96e0:	b0002516 	blt	r22,zero,9778 <_fpadd_parts+0x3d8>
    96e4:	2594983a 	sll	r10,r4,r22
    96e8:	0013883a 	mov	r9,zero
    96ec:	00bfffc4 	movi	r2,-1
    96f0:	4889883a 	add	r4,r9,r2
    96f4:	508b883a 	add	r5,r10,r2
    96f8:	224d803a 	cmpltu	r6,r4,r9
    96fc:	314b883a 	add	r5,r6,r5
    9700:	8904703a 	and	r2,r17,r4
    9704:	9146703a 	and	r3,r18,r5
    9708:	10c4b03a 	or	r2,r2,r3
    970c:	10000226 	beq	r2,zero,9718 <_fpadd_parts+0x378>
    9710:	01c00044 	movi	r7,1
    9714:	0011883a 	mov	r8,zero
    9718:	69e2b03a 	or	r17,r13,r7
    971c:	7224b03a 	or	r18,r14,r8
    9720:	003f5906 	br	9488 <_fpadd_parts+0xe8>
    9724:	8407883a 	add	r3,r16,r16
    9728:	008007c4 	movi	r2,31
    972c:	1185c83a 	sub	r2,r2,r6
    9730:	1886983a 	sll	r3,r3,r2
    9734:	7996d83a 	srl	r11,r15,r6
    9738:	8198d83a 	srl	r12,r16,r6
    973c:	1ad6b03a 	or	r11,r3,r11
    9740:	003f3e06 	br	943c <_fpadd_parts+0x9c>
    9744:	2006d07a 	srli	r3,r4,1
    9748:	008007c4 	movi	r2,31
    974c:	1185c83a 	sub	r2,r2,r6
    9750:	1890d83a 	srl	r8,r3,r2
    9754:	218e983a 	sll	r7,r4,r6
    9758:	003f3e06 	br	9454 <_fpadd_parts+0xb4>
    975c:	113f821e 	bne	r2,r4,9568 <_fpadd_parts+0x1c8>
    9760:	28c00117 	ldw	r3,4(r5)
    9764:	98800117 	ldw	r2,4(r19)
    9768:	10ff7f26 	beq	r2,r3,9568 <_fpadd_parts+0x1c8>
    976c:	04c00074 	movhi	r19,1
    9770:	9cf66504 	addi	r19,r19,-9836
    9774:	003f7c06 	br	9568 <_fpadd_parts+0x1c8>
    9778:	2006d07a 	srli	r3,r4,1
    977c:	008007c4 	movi	r2,31
    9780:	1185c83a 	sub	r2,r2,r6
    9784:	1894d83a 	srl	r10,r3,r2
    9788:	2192983a 	sll	r9,r4,r6
    978c:	003fd706 	br	96ec <_fpadd_parts+0x34c>
    9790:	9487883a 	add	r3,r18,r18
    9794:	008007c4 	movi	r2,31
    9798:	1185c83a 	sub	r2,r2,r6
    979c:	1886983a 	sll	r3,r3,r2
    97a0:	899ad83a 	srl	r13,r17,r6
    97a4:	919cd83a 	srl	r14,r18,r6
    97a8:	1b5ab03a 	or	r13,r3,r13
    97ac:	003fc906 	br	96d4 <_fpadd_parts+0x334>

000097b0 <__subdf3>:
    97b0:	deffea04 	addi	sp,sp,-88
    97b4:	dcc01415 	stw	r19,80(sp)
    97b8:	dcc00404 	addi	r19,sp,16
    97bc:	2011883a 	mov	r8,r4
    97c0:	2813883a 	mov	r9,r5
    97c4:	dc401315 	stw	r17,76(sp)
    97c8:	d809883a 	mov	r4,sp
    97cc:	980b883a 	mov	r5,r19
    97d0:	dc400904 	addi	r17,sp,36
    97d4:	dfc01515 	stw	ra,84(sp)
    97d8:	da400115 	stw	r9,4(sp)
    97dc:	d9c00315 	stw	r7,12(sp)
    97e0:	da000015 	stw	r8,0(sp)
    97e4:	d9800215 	stw	r6,8(sp)
    97e8:	000aa440 	call	aa44 <__unpack_d>
    97ec:	d9000204 	addi	r4,sp,8
    97f0:	880b883a 	mov	r5,r17
    97f4:	000aa440 	call	aa44 <__unpack_d>
    97f8:	d8800a17 	ldw	r2,40(sp)
    97fc:	880b883a 	mov	r5,r17
    9800:	9809883a 	mov	r4,r19
    9804:	d9800e04 	addi	r6,sp,56
    9808:	1080005c 	xori	r2,r2,1
    980c:	d8800a15 	stw	r2,40(sp)
    9810:	00093a00 	call	93a0 <_fpadd_parts>
    9814:	1009883a 	mov	r4,r2
    9818:	000a7300 	call	a730 <__pack_d>
    981c:	dfc01517 	ldw	ra,84(sp)
    9820:	dcc01417 	ldw	r19,80(sp)
    9824:	dc401317 	ldw	r17,76(sp)
    9828:	dec01604 	addi	sp,sp,88
    982c:	f800283a 	ret

00009830 <__adddf3>:
    9830:	deffea04 	addi	sp,sp,-88
    9834:	dcc01415 	stw	r19,80(sp)
    9838:	dcc00404 	addi	r19,sp,16
    983c:	2011883a 	mov	r8,r4
    9840:	2813883a 	mov	r9,r5
    9844:	dc401315 	stw	r17,76(sp)
    9848:	d809883a 	mov	r4,sp
    984c:	980b883a 	mov	r5,r19
    9850:	dc400904 	addi	r17,sp,36
    9854:	dfc01515 	stw	ra,84(sp)
    9858:	da400115 	stw	r9,4(sp)
    985c:	d9c00315 	stw	r7,12(sp)
    9860:	da000015 	stw	r8,0(sp)
    9864:	d9800215 	stw	r6,8(sp)
    9868:	000aa440 	call	aa44 <__unpack_d>
    986c:	d9000204 	addi	r4,sp,8
    9870:	880b883a 	mov	r5,r17
    9874:	000aa440 	call	aa44 <__unpack_d>
    9878:	d9800e04 	addi	r6,sp,56
    987c:	9809883a 	mov	r4,r19
    9880:	880b883a 	mov	r5,r17
    9884:	00093a00 	call	93a0 <_fpadd_parts>
    9888:	1009883a 	mov	r4,r2
    988c:	000a7300 	call	a730 <__pack_d>
    9890:	dfc01517 	ldw	ra,84(sp)
    9894:	dcc01417 	ldw	r19,80(sp)
    9898:	dc401317 	ldw	r17,76(sp)
    989c:	dec01604 	addi	sp,sp,88
    98a0:	f800283a 	ret

000098a4 <__muldf3>:
    98a4:	deffe004 	addi	sp,sp,-128
    98a8:	dc401815 	stw	r17,96(sp)
    98ac:	dc400404 	addi	r17,sp,16
    98b0:	2011883a 	mov	r8,r4
    98b4:	2813883a 	mov	r9,r5
    98b8:	dc001715 	stw	r16,92(sp)
    98bc:	d809883a 	mov	r4,sp
    98c0:	880b883a 	mov	r5,r17
    98c4:	dc000904 	addi	r16,sp,36
    98c8:	dfc01f15 	stw	ra,124(sp)
    98cc:	da400115 	stw	r9,4(sp)
    98d0:	d9c00315 	stw	r7,12(sp)
    98d4:	da000015 	stw	r8,0(sp)
    98d8:	d9800215 	stw	r6,8(sp)
    98dc:	ddc01e15 	stw	r23,120(sp)
    98e0:	dd801d15 	stw	r22,116(sp)
    98e4:	dd401c15 	stw	r21,112(sp)
    98e8:	dd001b15 	stw	r20,108(sp)
    98ec:	dcc01a15 	stw	r19,104(sp)
    98f0:	dc801915 	stw	r18,100(sp)
    98f4:	000aa440 	call	aa44 <__unpack_d>
    98f8:	d9000204 	addi	r4,sp,8
    98fc:	800b883a 	mov	r5,r16
    9900:	000aa440 	call	aa44 <__unpack_d>
    9904:	d9000417 	ldw	r4,16(sp)
    9908:	00800044 	movi	r2,1
    990c:	1100102e 	bgeu	r2,r4,9950 <__muldf3+0xac>
    9910:	d8c00917 	ldw	r3,36(sp)
    9914:	10c0062e 	bgeu	r2,r3,9930 <__muldf3+0x8c>
    9918:	00800104 	movi	r2,4
    991c:	20800a26 	beq	r4,r2,9948 <__muldf3+0xa4>
    9920:	1880cc26 	beq	r3,r2,9c54 <__muldf3+0x3b0>
    9924:	00800084 	movi	r2,2
    9928:	20800926 	beq	r4,r2,9950 <__muldf3+0xac>
    992c:	1880191e 	bne	r3,r2,9994 <__muldf3+0xf0>
    9930:	d8c00a17 	ldw	r3,40(sp)
    9934:	d8800517 	ldw	r2,20(sp)
    9938:	8009883a 	mov	r4,r16
    993c:	10c4c03a 	cmpne	r2,r2,r3
    9940:	d8800a15 	stw	r2,40(sp)
    9944:	00000706 	br	9964 <__muldf3+0xc0>
    9948:	00800084 	movi	r2,2
    994c:	1880c326 	beq	r3,r2,9c5c <__muldf3+0x3b8>
    9950:	d8800517 	ldw	r2,20(sp)
    9954:	d8c00a17 	ldw	r3,40(sp)
    9958:	8809883a 	mov	r4,r17
    995c:	10c4c03a 	cmpne	r2,r2,r3
    9960:	d8800515 	stw	r2,20(sp)
    9964:	000a7300 	call	a730 <__pack_d>
    9968:	dfc01f17 	ldw	ra,124(sp)
    996c:	ddc01e17 	ldw	r23,120(sp)
    9970:	dd801d17 	ldw	r22,116(sp)
    9974:	dd401c17 	ldw	r21,112(sp)
    9978:	dd001b17 	ldw	r20,108(sp)
    997c:	dcc01a17 	ldw	r19,104(sp)
    9980:	dc801917 	ldw	r18,100(sp)
    9984:	dc401817 	ldw	r17,96(sp)
    9988:	dc001717 	ldw	r16,92(sp)
    998c:	dec02004 	addi	sp,sp,128
    9990:	f800283a 	ret
    9994:	dd800717 	ldw	r22,28(sp)
    9998:	dc800c17 	ldw	r18,48(sp)
    999c:	002b883a 	mov	r21,zero
    99a0:	0023883a 	mov	r17,zero
    99a4:	a80b883a 	mov	r5,r21
    99a8:	b00d883a 	mov	r6,r22
    99ac:	880f883a 	mov	r7,r17
    99b0:	ddc00817 	ldw	r23,32(sp)
    99b4:	dcc00d17 	ldw	r19,52(sp)
    99b8:	9009883a 	mov	r4,r18
    99bc:	000a6180 	call	a618 <__muldi3>
    99c0:	001b883a 	mov	r13,zero
    99c4:	680f883a 	mov	r7,r13
    99c8:	b009883a 	mov	r4,r22
    99cc:	000b883a 	mov	r5,zero
    99d0:	980d883a 	mov	r6,r19
    99d4:	b82d883a 	mov	r22,r23
    99d8:	002f883a 	mov	r23,zero
    99dc:	db401615 	stw	r13,88(sp)
    99e0:	d8801315 	stw	r2,76(sp)
    99e4:	d8c01415 	stw	r3,80(sp)
    99e8:	dcc01515 	stw	r19,84(sp)
    99ec:	000a6180 	call	a618 <__muldi3>
    99f0:	b00d883a 	mov	r6,r22
    99f4:	000b883a 	mov	r5,zero
    99f8:	9009883a 	mov	r4,r18
    99fc:	b80f883a 	mov	r7,r23
    9a00:	1021883a 	mov	r16,r2
    9a04:	1823883a 	mov	r17,r3
    9a08:	000a6180 	call	a618 <__muldi3>
    9a0c:	8085883a 	add	r2,r16,r2
    9a10:	140d803a 	cmpltu	r6,r2,r16
    9a14:	88c7883a 	add	r3,r17,r3
    9a18:	30cd883a 	add	r6,r6,r3
    9a1c:	1029883a 	mov	r20,r2
    9a20:	302b883a 	mov	r21,r6
    9a24:	da801317 	ldw	r10,76(sp)
    9a28:	dac01417 	ldw	r11,80(sp)
    9a2c:	db001517 	ldw	r12,84(sp)
    9a30:	db401617 	ldw	r13,88(sp)
    9a34:	3440612e 	bgeu	r6,r17,9bbc <__muldf3+0x318>
    9a38:	0009883a 	mov	r4,zero
    9a3c:	5105883a 	add	r2,r10,r4
    9a40:	128d803a 	cmpltu	r6,r2,r10
    9a44:	5d07883a 	add	r3,r11,r20
    9a48:	30cd883a 	add	r6,r6,r3
    9a4c:	0021883a 	mov	r16,zero
    9a50:	04400044 	movi	r17,1
    9a54:	1025883a 	mov	r18,r2
    9a58:	3027883a 	mov	r19,r6
    9a5c:	32c06236 	bltu	r6,r11,9be8 <__muldf3+0x344>
    9a60:	59807a26 	beq	r11,r6,9c4c <__muldf3+0x3a8>
    9a64:	680b883a 	mov	r5,r13
    9a68:	b80f883a 	mov	r7,r23
    9a6c:	6009883a 	mov	r4,r12
    9a70:	b00d883a 	mov	r6,r22
    9a74:	000a6180 	call	a618 <__muldi3>
    9a78:	1009883a 	mov	r4,r2
    9a7c:	000f883a 	mov	r7,zero
    9a80:	1545883a 	add	r2,r2,r21
    9a84:	1111803a 	cmpltu	r8,r2,r4
    9a88:	19c7883a 	add	r3,r3,r7
    9a8c:	40c7883a 	add	r3,r8,r3
    9a90:	88cb883a 	add	r5,r17,r3
    9a94:	d8c00617 	ldw	r3,24(sp)
    9a98:	8089883a 	add	r4,r16,r2
    9a9c:	d8800b17 	ldw	r2,44(sp)
    9aa0:	18c00104 	addi	r3,r3,4
    9aa4:	240d803a 	cmpltu	r6,r4,r16
    9aa8:	10c7883a 	add	r3,r2,r3
    9aac:	2013883a 	mov	r9,r4
    9ab0:	d8800a17 	ldw	r2,40(sp)
    9ab4:	d9000517 	ldw	r4,20(sp)
    9ab8:	314d883a 	add	r6,r6,r5
    9abc:	3015883a 	mov	r10,r6
    9ac0:	2088c03a 	cmpne	r4,r4,r2
    9ac4:	00880034 	movhi	r2,8192
    9ac8:	10bfffc4 	addi	r2,r2,-1
    9acc:	d9000f15 	stw	r4,60(sp)
    9ad0:	d8c01015 	stw	r3,64(sp)
    9ad4:	1180162e 	bgeu	r2,r6,9b30 <__muldf3+0x28c>
    9ad8:	1811883a 	mov	r8,r3
    9adc:	101f883a 	mov	r15,r2
    9ae0:	980497fa 	slli	r2,r19,31
    9ae4:	9016d07a 	srli	r11,r18,1
    9ae8:	500697fa 	slli	r3,r10,31
    9aec:	480cd07a 	srli	r6,r9,1
    9af0:	500ed07a 	srli	r7,r10,1
    9af4:	12d6b03a 	or	r11,r2,r11
    9af8:	00800044 	movi	r2,1
    9afc:	198cb03a 	or	r6,r3,r6
    9b00:	4888703a 	and	r4,r9,r2
    9b04:	9818d07a 	srli	r12,r19,1
    9b08:	001b883a 	mov	r13,zero
    9b0c:	03a00034 	movhi	r14,32768
    9b10:	3013883a 	mov	r9,r6
    9b14:	3815883a 	mov	r10,r7
    9b18:	4091883a 	add	r8,r8,r2
    9b1c:	20000226 	beq	r4,zero,9b28 <__muldf3+0x284>
    9b20:	5b64b03a 	or	r18,r11,r13
    9b24:	63a6b03a 	or	r19,r12,r14
    9b28:	7abfed36 	bltu	r15,r10,9ae0 <__muldf3+0x23c>
    9b2c:	da001015 	stw	r8,64(sp)
    9b30:	00840034 	movhi	r2,4096
    9b34:	10bfffc4 	addi	r2,r2,-1
    9b38:	12801436 	bltu	r2,r10,9b8c <__muldf3+0x2e8>
    9b3c:	da001017 	ldw	r8,64(sp)
    9b40:	101f883a 	mov	r15,r2
    9b44:	4a45883a 	add	r2,r9,r9
    9b48:	124d803a 	cmpltu	r6,r2,r9
    9b4c:	5287883a 	add	r3,r10,r10
    9b50:	9497883a 	add	r11,r18,r18
    9b54:	5c8f803a 	cmpltu	r7,r11,r18
    9b58:	9cd9883a 	add	r12,r19,r19
    9b5c:	01000044 	movi	r4,1
    9b60:	30cd883a 	add	r6,r6,r3
    9b64:	3b0f883a 	add	r7,r7,r12
    9b68:	423fffc4 	addi	r8,r8,-1
    9b6c:	1013883a 	mov	r9,r2
    9b70:	3015883a 	mov	r10,r6
    9b74:	111ab03a 	or	r13,r2,r4
    9b78:	98003016 	blt	r19,zero,9c3c <__muldf3+0x398>
    9b7c:	5825883a 	mov	r18,r11
    9b80:	3827883a 	mov	r19,r7
    9b84:	7abfef2e 	bgeu	r15,r10,9b44 <__muldf3+0x2a0>
    9b88:	da001015 	stw	r8,64(sp)
    9b8c:	00803fc4 	movi	r2,255
    9b90:	488e703a 	and	r7,r9,r2
    9b94:	00802004 	movi	r2,128
    9b98:	0007883a 	mov	r3,zero
    9b9c:	0011883a 	mov	r8,zero
    9ba0:	38801826 	beq	r7,r2,9c04 <__muldf3+0x360>
    9ba4:	008000c4 	movi	r2,3
    9ba8:	d9000e04 	addi	r4,sp,56
    9bac:	da801215 	stw	r10,72(sp)
    9bb0:	d8800e15 	stw	r2,56(sp)
    9bb4:	da401115 	stw	r9,68(sp)
    9bb8:	003f6a06 	br	9964 <__muldf3+0xc0>
    9bbc:	89802126 	beq	r17,r6,9c44 <__muldf3+0x3a0>
    9bc0:	0009883a 	mov	r4,zero
    9bc4:	5105883a 	add	r2,r10,r4
    9bc8:	128d803a 	cmpltu	r6,r2,r10
    9bcc:	5d07883a 	add	r3,r11,r20
    9bd0:	30cd883a 	add	r6,r6,r3
    9bd4:	0021883a 	mov	r16,zero
    9bd8:	0023883a 	mov	r17,zero
    9bdc:	1025883a 	mov	r18,r2
    9be0:	3027883a 	mov	r19,r6
    9be4:	32ff9e2e 	bgeu	r6,r11,9a60 <__muldf3+0x1bc>
    9be8:	00800044 	movi	r2,1
    9bec:	8089883a 	add	r4,r16,r2
    9bf0:	240d803a 	cmpltu	r6,r4,r16
    9bf4:	344d883a 	add	r6,r6,r17
    9bf8:	2021883a 	mov	r16,r4
    9bfc:	3023883a 	mov	r17,r6
    9c00:	003f9806 	br	9a64 <__muldf3+0x1c0>
    9c04:	403fe71e 	bne	r8,zero,9ba4 <__muldf3+0x300>
    9c08:	01004004 	movi	r4,256
    9c0c:	4904703a 	and	r2,r9,r4
    9c10:	10c4b03a 	or	r2,r2,r3
    9c14:	103fe31e 	bne	r2,zero,9ba4 <__muldf3+0x300>
    9c18:	94c4b03a 	or	r2,r18,r19
    9c1c:	103fe126 	beq	r2,zero,9ba4 <__muldf3+0x300>
    9c20:	49c5883a 	add	r2,r9,r7
    9c24:	1251803a 	cmpltu	r8,r2,r9
    9c28:	4291883a 	add	r8,r8,r10
    9c2c:	013fc004 	movi	r4,-256
    9c30:	1112703a 	and	r9,r2,r4
    9c34:	4015883a 	mov	r10,r8
    9c38:	003fda06 	br	9ba4 <__muldf3+0x300>
    9c3c:	6813883a 	mov	r9,r13
    9c40:	003fce06 	br	9b7c <__muldf3+0x2d8>
    9c44:	143f7c36 	bltu	r2,r16,9a38 <__muldf3+0x194>
    9c48:	003fdd06 	br	9bc0 <__muldf3+0x31c>
    9c4c:	12bf852e 	bgeu	r2,r10,9a64 <__muldf3+0x1c0>
    9c50:	003fe506 	br	9be8 <__muldf3+0x344>
    9c54:	00800084 	movi	r2,2
    9c58:	20bf351e 	bne	r4,r2,9930 <__muldf3+0x8c>
    9c5c:	01000074 	movhi	r4,1
    9c60:	21366504 	addi	r4,r4,-9836
    9c64:	003f3f06 	br	9964 <__muldf3+0xc0>

00009c68 <__divdf3>:
    9c68:	deffed04 	addi	sp,sp,-76
    9c6c:	dcc01115 	stw	r19,68(sp)
    9c70:	dcc00404 	addi	r19,sp,16
    9c74:	2011883a 	mov	r8,r4
    9c78:	2813883a 	mov	r9,r5
    9c7c:	dc000e15 	stw	r16,56(sp)
    9c80:	d809883a 	mov	r4,sp
    9c84:	980b883a 	mov	r5,r19
    9c88:	dc000904 	addi	r16,sp,36
    9c8c:	dfc01215 	stw	ra,72(sp)
    9c90:	da400115 	stw	r9,4(sp)
    9c94:	d9c00315 	stw	r7,12(sp)
    9c98:	da000015 	stw	r8,0(sp)
    9c9c:	d9800215 	stw	r6,8(sp)
    9ca0:	dc801015 	stw	r18,64(sp)
    9ca4:	dc400f15 	stw	r17,60(sp)
    9ca8:	000aa440 	call	aa44 <__unpack_d>
    9cac:	d9000204 	addi	r4,sp,8
    9cb0:	800b883a 	mov	r5,r16
    9cb4:	000aa440 	call	aa44 <__unpack_d>
    9cb8:	d9000417 	ldw	r4,16(sp)
    9cbc:	00800044 	movi	r2,1
    9cc0:	11000b2e 	bgeu	r2,r4,9cf0 <__divdf3+0x88>
    9cc4:	d9400917 	ldw	r5,36(sp)
    9cc8:	1140762e 	bgeu	r2,r5,9ea4 <__divdf3+0x23c>
    9ccc:	d8800517 	ldw	r2,20(sp)
    9cd0:	d8c00a17 	ldw	r3,40(sp)
    9cd4:	01800104 	movi	r6,4
    9cd8:	10c4f03a 	xor	r2,r2,r3
    9cdc:	d8800515 	stw	r2,20(sp)
    9ce0:	21800226 	beq	r4,r6,9cec <__divdf3+0x84>
    9ce4:	00800084 	movi	r2,2
    9ce8:	2080141e 	bne	r4,r2,9d3c <__divdf3+0xd4>
    9cec:	29000926 	beq	r5,r4,9d14 <__divdf3+0xac>
    9cf0:	9809883a 	mov	r4,r19
    9cf4:	000a7300 	call	a730 <__pack_d>
    9cf8:	dfc01217 	ldw	ra,72(sp)
    9cfc:	dcc01117 	ldw	r19,68(sp)
    9d00:	dc801017 	ldw	r18,64(sp)
    9d04:	dc400f17 	ldw	r17,60(sp)
    9d08:	dc000e17 	ldw	r16,56(sp)
    9d0c:	dec01304 	addi	sp,sp,76
    9d10:	f800283a 	ret
    9d14:	01000074 	movhi	r4,1
    9d18:	21366504 	addi	r4,r4,-9836
    9d1c:	000a7300 	call	a730 <__pack_d>
    9d20:	dfc01217 	ldw	ra,72(sp)
    9d24:	dcc01117 	ldw	r19,68(sp)
    9d28:	dc801017 	ldw	r18,64(sp)
    9d2c:	dc400f17 	ldw	r17,60(sp)
    9d30:	dc000e17 	ldw	r16,56(sp)
    9d34:	dec01304 	addi	sp,sp,76
    9d38:	f800283a 	ret
    9d3c:	29805b26 	beq	r5,r6,9eac <__divdf3+0x244>
    9d40:	28802d26 	beq	r5,r2,9df8 <__divdf3+0x190>
    9d44:	d8c00617 	ldw	r3,24(sp)
    9d48:	d8800b17 	ldw	r2,44(sp)
    9d4c:	d9c00817 	ldw	r7,32(sp)
    9d50:	dc400d17 	ldw	r17,52(sp)
    9d54:	188bc83a 	sub	r5,r3,r2
    9d58:	d9800717 	ldw	r6,28(sp)
    9d5c:	dc000c17 	ldw	r16,48(sp)
    9d60:	d9400615 	stw	r5,24(sp)
    9d64:	3c403836 	bltu	r7,r17,9e48 <__divdf3+0x1e0>
    9d68:	89c03626 	beq	r17,r7,9e44 <__divdf3+0x1dc>
    9d6c:	0015883a 	mov	r10,zero
    9d70:	001d883a 	mov	r14,zero
    9d74:	02c40034 	movhi	r11,4096
    9d78:	001f883a 	mov	r15,zero
    9d7c:	003f883a 	mov	ra,zero
    9d80:	04800f44 	movi	r18,61
    9d84:	00000f06 	br	9dc4 <__divdf3+0x15c>
    9d88:	601d883a 	mov	r14,r12
    9d8c:	681f883a 	mov	r15,r13
    9d90:	400d883a 	mov	r6,r8
    9d94:	100f883a 	mov	r7,r2
    9d98:	3191883a 	add	r8,r6,r6
    9d9c:	5808d07a 	srli	r4,r11,1
    9da0:	4185803a 	cmpltu	r2,r8,r6
    9da4:	39d3883a 	add	r9,r7,r7
    9da8:	28c6b03a 	or	r3,r5,r3
    9dac:	1245883a 	add	r2,r2,r9
    9db0:	1815883a 	mov	r10,r3
    9db4:	2017883a 	mov	r11,r4
    9db8:	400d883a 	mov	r6,r8
    9dbc:	100f883a 	mov	r7,r2
    9dc0:	fc801726 	beq	ra,r18,9e20 <__divdf3+0x1b8>
    9dc4:	580a97fa 	slli	r5,r11,31
    9dc8:	5006d07a 	srli	r3,r10,1
    9dcc:	ffc00044 	addi	ra,ra,1
    9dd0:	3c7ff136 	bltu	r7,r17,9d98 <__divdf3+0x130>
    9dd4:	3411c83a 	sub	r8,r6,r16
    9dd8:	3205803a 	cmpltu	r2,r6,r8
    9ddc:	3c53c83a 	sub	r9,r7,r17
    9de0:	7298b03a 	or	r12,r14,r10
    9de4:	7adab03a 	or	r13,r15,r11
    9de8:	4885c83a 	sub	r2,r9,r2
    9dec:	89ffe61e 	bne	r17,r7,9d88 <__divdf3+0x120>
    9df0:	343fe936 	bltu	r6,r16,9d98 <__divdf3+0x130>
    9df4:	003fe406 	br	9d88 <__divdf3+0x120>
    9df8:	9809883a 	mov	r4,r19
    9dfc:	d9800415 	stw	r6,16(sp)
    9e00:	000a7300 	call	a730 <__pack_d>
    9e04:	dfc01217 	ldw	ra,72(sp)
    9e08:	dcc01117 	ldw	r19,68(sp)
    9e0c:	dc801017 	ldw	r18,64(sp)
    9e10:	dc400f17 	ldw	r17,60(sp)
    9e14:	dc000e17 	ldw	r16,56(sp)
    9e18:	dec01304 	addi	sp,sp,76
    9e1c:	f800283a 	ret
    9e20:	00803fc4 	movi	r2,255
    9e24:	7090703a 	and	r8,r14,r2
    9e28:	00802004 	movi	r2,128
    9e2c:	0007883a 	mov	r3,zero
    9e30:	0013883a 	mov	r9,zero
    9e34:	40800d26 	beq	r8,r2,9e6c <__divdf3+0x204>
    9e38:	dbc00815 	stw	r15,32(sp)
    9e3c:	db800715 	stw	r14,28(sp)
    9e40:	003fab06 	br	9cf0 <__divdf3+0x88>
    9e44:	343fc92e 	bgeu	r6,r16,9d6c <__divdf3+0x104>
    9e48:	3185883a 	add	r2,r6,r6
    9e4c:	1189803a 	cmpltu	r4,r2,r6
    9e50:	39c7883a 	add	r3,r7,r7
    9e54:	20c9883a 	add	r4,r4,r3
    9e58:	297fffc4 	addi	r5,r5,-1
    9e5c:	100d883a 	mov	r6,r2
    9e60:	200f883a 	mov	r7,r4
    9e64:	d9400615 	stw	r5,24(sp)
    9e68:	003fc006 	br	9d6c <__divdf3+0x104>
    9e6c:	483ff21e 	bne	r9,zero,9e38 <__divdf3+0x1d0>
    9e70:	01004004 	movi	r4,256
    9e74:	7104703a 	and	r2,r14,r4
    9e78:	10c4b03a 	or	r2,r2,r3
    9e7c:	103fee1e 	bne	r2,zero,9e38 <__divdf3+0x1d0>
    9e80:	31c4b03a 	or	r2,r6,r7
    9e84:	103fec26 	beq	r2,zero,9e38 <__divdf3+0x1d0>
    9e88:	7205883a 	add	r2,r14,r8
    9e8c:	1391803a 	cmpltu	r8,r2,r14
    9e90:	43d1883a 	add	r8,r8,r15
    9e94:	013fc004 	movi	r4,-256
    9e98:	111c703a 	and	r14,r2,r4
    9e9c:	401f883a 	mov	r15,r8
    9ea0:	003fe506 	br	9e38 <__divdf3+0x1d0>
    9ea4:	8009883a 	mov	r4,r16
    9ea8:	003f9206 	br	9cf4 <__divdf3+0x8c>
    9eac:	9809883a 	mov	r4,r19
    9eb0:	d8000715 	stw	zero,28(sp)
    9eb4:	d8000815 	stw	zero,32(sp)
    9eb8:	d8000615 	stw	zero,24(sp)
    9ebc:	003f8d06 	br	9cf4 <__divdf3+0x8c>

00009ec0 <__eqdf2>:
    9ec0:	deffef04 	addi	sp,sp,-68
    9ec4:	dc400f15 	stw	r17,60(sp)
    9ec8:	dc400404 	addi	r17,sp,16
    9ecc:	2005883a 	mov	r2,r4
    9ed0:	2807883a 	mov	r3,r5
    9ed4:	dc000e15 	stw	r16,56(sp)
    9ed8:	d809883a 	mov	r4,sp
    9edc:	880b883a 	mov	r5,r17
    9ee0:	dc000904 	addi	r16,sp,36
    9ee4:	d8c00115 	stw	r3,4(sp)
    9ee8:	d8800015 	stw	r2,0(sp)
    9eec:	d9800215 	stw	r6,8(sp)
    9ef0:	dfc01015 	stw	ra,64(sp)
    9ef4:	d9c00315 	stw	r7,12(sp)
    9ef8:	000aa440 	call	aa44 <__unpack_d>
    9efc:	d9000204 	addi	r4,sp,8
    9f00:	800b883a 	mov	r5,r16
    9f04:	000aa440 	call	aa44 <__unpack_d>
    9f08:	d8800417 	ldw	r2,16(sp)
    9f0c:	00c00044 	movi	r3,1
    9f10:	180d883a 	mov	r6,r3
    9f14:	1880062e 	bgeu	r3,r2,9f30 <__eqdf2+0x70>
    9f18:	d8800917 	ldw	r2,36(sp)
    9f1c:	8809883a 	mov	r4,r17
    9f20:	800b883a 	mov	r5,r16
    9f24:	1880022e 	bgeu	r3,r2,9f30 <__eqdf2+0x70>
    9f28:	000ab7c0 	call	ab7c <__fpcmp_parts_d>
    9f2c:	100d883a 	mov	r6,r2
    9f30:	3005883a 	mov	r2,r6
    9f34:	dfc01017 	ldw	ra,64(sp)
    9f38:	dc400f17 	ldw	r17,60(sp)
    9f3c:	dc000e17 	ldw	r16,56(sp)
    9f40:	dec01104 	addi	sp,sp,68
    9f44:	f800283a 	ret

00009f48 <__nedf2>:
    9f48:	deffef04 	addi	sp,sp,-68
    9f4c:	dc400f15 	stw	r17,60(sp)
    9f50:	dc400404 	addi	r17,sp,16
    9f54:	2005883a 	mov	r2,r4
    9f58:	2807883a 	mov	r3,r5
    9f5c:	dc000e15 	stw	r16,56(sp)
    9f60:	d809883a 	mov	r4,sp
    9f64:	880b883a 	mov	r5,r17
    9f68:	dc000904 	addi	r16,sp,36
    9f6c:	d8c00115 	stw	r3,4(sp)
    9f70:	d8800015 	stw	r2,0(sp)
    9f74:	d9800215 	stw	r6,8(sp)
    9f78:	dfc01015 	stw	ra,64(sp)
    9f7c:	d9c00315 	stw	r7,12(sp)
    9f80:	000aa440 	call	aa44 <__unpack_d>
    9f84:	d9000204 	addi	r4,sp,8
    9f88:	800b883a 	mov	r5,r16
    9f8c:	000aa440 	call	aa44 <__unpack_d>
    9f90:	d8800417 	ldw	r2,16(sp)
    9f94:	00c00044 	movi	r3,1
    9f98:	180d883a 	mov	r6,r3
    9f9c:	1880062e 	bgeu	r3,r2,9fb8 <__nedf2+0x70>
    9fa0:	d8800917 	ldw	r2,36(sp)
    9fa4:	8809883a 	mov	r4,r17
    9fa8:	800b883a 	mov	r5,r16
    9fac:	1880022e 	bgeu	r3,r2,9fb8 <__nedf2+0x70>
    9fb0:	000ab7c0 	call	ab7c <__fpcmp_parts_d>
    9fb4:	100d883a 	mov	r6,r2
    9fb8:	3005883a 	mov	r2,r6
    9fbc:	dfc01017 	ldw	ra,64(sp)
    9fc0:	dc400f17 	ldw	r17,60(sp)
    9fc4:	dc000e17 	ldw	r16,56(sp)
    9fc8:	dec01104 	addi	sp,sp,68
    9fcc:	f800283a 	ret

00009fd0 <__gtdf2>:
    9fd0:	deffef04 	addi	sp,sp,-68
    9fd4:	dc400f15 	stw	r17,60(sp)
    9fd8:	dc400404 	addi	r17,sp,16
    9fdc:	2005883a 	mov	r2,r4
    9fe0:	2807883a 	mov	r3,r5
    9fe4:	dc000e15 	stw	r16,56(sp)
    9fe8:	d809883a 	mov	r4,sp
    9fec:	880b883a 	mov	r5,r17
    9ff0:	dc000904 	addi	r16,sp,36
    9ff4:	d8c00115 	stw	r3,4(sp)
    9ff8:	d8800015 	stw	r2,0(sp)
    9ffc:	d9800215 	stw	r6,8(sp)
    a000:	dfc01015 	stw	ra,64(sp)
    a004:	d9c00315 	stw	r7,12(sp)
    a008:	000aa440 	call	aa44 <__unpack_d>
    a00c:	d9000204 	addi	r4,sp,8
    a010:	800b883a 	mov	r5,r16
    a014:	000aa440 	call	aa44 <__unpack_d>
    a018:	d8800417 	ldw	r2,16(sp)
    a01c:	00c00044 	movi	r3,1
    a020:	01bfffc4 	movi	r6,-1
    a024:	1880062e 	bgeu	r3,r2,a040 <__gtdf2+0x70>
    a028:	d8800917 	ldw	r2,36(sp)
    a02c:	8809883a 	mov	r4,r17
    a030:	800b883a 	mov	r5,r16
    a034:	1880022e 	bgeu	r3,r2,a040 <__gtdf2+0x70>
    a038:	000ab7c0 	call	ab7c <__fpcmp_parts_d>
    a03c:	100d883a 	mov	r6,r2
    a040:	3005883a 	mov	r2,r6
    a044:	dfc01017 	ldw	ra,64(sp)
    a048:	dc400f17 	ldw	r17,60(sp)
    a04c:	dc000e17 	ldw	r16,56(sp)
    a050:	dec01104 	addi	sp,sp,68
    a054:	f800283a 	ret

0000a058 <__gedf2>:
    a058:	deffef04 	addi	sp,sp,-68
    a05c:	dc400f15 	stw	r17,60(sp)
    a060:	dc400404 	addi	r17,sp,16
    a064:	2005883a 	mov	r2,r4
    a068:	2807883a 	mov	r3,r5
    a06c:	dc000e15 	stw	r16,56(sp)
    a070:	d809883a 	mov	r4,sp
    a074:	880b883a 	mov	r5,r17
    a078:	dc000904 	addi	r16,sp,36
    a07c:	d8c00115 	stw	r3,4(sp)
    a080:	d8800015 	stw	r2,0(sp)
    a084:	d9800215 	stw	r6,8(sp)
    a088:	dfc01015 	stw	ra,64(sp)
    a08c:	d9c00315 	stw	r7,12(sp)
    a090:	000aa440 	call	aa44 <__unpack_d>
    a094:	d9000204 	addi	r4,sp,8
    a098:	800b883a 	mov	r5,r16
    a09c:	000aa440 	call	aa44 <__unpack_d>
    a0a0:	d8800417 	ldw	r2,16(sp)
    a0a4:	00c00044 	movi	r3,1
    a0a8:	01bfffc4 	movi	r6,-1
    a0ac:	1880062e 	bgeu	r3,r2,a0c8 <__gedf2+0x70>
    a0b0:	d8800917 	ldw	r2,36(sp)
    a0b4:	8809883a 	mov	r4,r17
    a0b8:	800b883a 	mov	r5,r16
    a0bc:	1880022e 	bgeu	r3,r2,a0c8 <__gedf2+0x70>
    a0c0:	000ab7c0 	call	ab7c <__fpcmp_parts_d>
    a0c4:	100d883a 	mov	r6,r2
    a0c8:	3005883a 	mov	r2,r6
    a0cc:	dfc01017 	ldw	ra,64(sp)
    a0d0:	dc400f17 	ldw	r17,60(sp)
    a0d4:	dc000e17 	ldw	r16,56(sp)
    a0d8:	dec01104 	addi	sp,sp,68
    a0dc:	f800283a 	ret

0000a0e0 <__ltdf2>:
    a0e0:	deffef04 	addi	sp,sp,-68
    a0e4:	dc400f15 	stw	r17,60(sp)
    a0e8:	dc400404 	addi	r17,sp,16
    a0ec:	2005883a 	mov	r2,r4
    a0f0:	2807883a 	mov	r3,r5
    a0f4:	dc000e15 	stw	r16,56(sp)
    a0f8:	d809883a 	mov	r4,sp
    a0fc:	880b883a 	mov	r5,r17
    a100:	dc000904 	addi	r16,sp,36
    a104:	d8c00115 	stw	r3,4(sp)
    a108:	d8800015 	stw	r2,0(sp)
    a10c:	d9800215 	stw	r6,8(sp)
    a110:	dfc01015 	stw	ra,64(sp)
    a114:	d9c00315 	stw	r7,12(sp)
    a118:	000aa440 	call	aa44 <__unpack_d>
    a11c:	d9000204 	addi	r4,sp,8
    a120:	800b883a 	mov	r5,r16
    a124:	000aa440 	call	aa44 <__unpack_d>
    a128:	d8800417 	ldw	r2,16(sp)
    a12c:	00c00044 	movi	r3,1
    a130:	180d883a 	mov	r6,r3
    a134:	1880062e 	bgeu	r3,r2,a150 <__ltdf2+0x70>
    a138:	d8800917 	ldw	r2,36(sp)
    a13c:	8809883a 	mov	r4,r17
    a140:	800b883a 	mov	r5,r16
    a144:	1880022e 	bgeu	r3,r2,a150 <__ltdf2+0x70>
    a148:	000ab7c0 	call	ab7c <__fpcmp_parts_d>
    a14c:	100d883a 	mov	r6,r2
    a150:	3005883a 	mov	r2,r6
    a154:	dfc01017 	ldw	ra,64(sp)
    a158:	dc400f17 	ldw	r17,60(sp)
    a15c:	dc000e17 	ldw	r16,56(sp)
    a160:	dec01104 	addi	sp,sp,68
    a164:	f800283a 	ret

0000a168 <__floatsidf>:
    a168:	2006d7fa 	srli	r3,r4,31
    a16c:	defff604 	addi	sp,sp,-40
    a170:	008000c4 	movi	r2,3
    a174:	dfc00915 	stw	ra,36(sp)
    a178:	dcc00815 	stw	r19,32(sp)
    a17c:	dc800715 	stw	r18,28(sp)
    a180:	dc400615 	stw	r17,24(sp)
    a184:	dc000515 	stw	r16,20(sp)
    a188:	d8800015 	stw	r2,0(sp)
    a18c:	d8c00115 	stw	r3,4(sp)
    a190:	20000f1e 	bne	r4,zero,a1d0 <__floatsidf+0x68>
    a194:	00800084 	movi	r2,2
    a198:	d8800015 	stw	r2,0(sp)
    a19c:	d809883a 	mov	r4,sp
    a1a0:	000a7300 	call	a730 <__pack_d>
    a1a4:	1009883a 	mov	r4,r2
    a1a8:	180b883a 	mov	r5,r3
    a1ac:	2005883a 	mov	r2,r4
    a1b0:	2807883a 	mov	r3,r5
    a1b4:	dfc00917 	ldw	ra,36(sp)
    a1b8:	dcc00817 	ldw	r19,32(sp)
    a1bc:	dc800717 	ldw	r18,28(sp)
    a1c0:	dc400617 	ldw	r17,24(sp)
    a1c4:	dc000517 	ldw	r16,20(sp)
    a1c8:	dec00a04 	addi	sp,sp,40
    a1cc:	f800283a 	ret
    a1d0:	00800f04 	movi	r2,60
    a1d4:	1807003a 	cmpeq	r3,r3,zero
    a1d8:	d8800215 	stw	r2,8(sp)
    a1dc:	18001126 	beq	r3,zero,a224 <__floatsidf+0xbc>
    a1e0:	0027883a 	mov	r19,zero
    a1e4:	2025883a 	mov	r18,r4
    a1e8:	d9000315 	stw	r4,12(sp)
    a1ec:	dcc00415 	stw	r19,16(sp)
    a1f0:	000a6b00 	call	a6b0 <__clzsi2>
    a1f4:	11000744 	addi	r4,r2,29
    a1f8:	013fe80e 	bge	zero,r4,a19c <__floatsidf+0x34>
    a1fc:	10bfff44 	addi	r2,r2,-3
    a200:	10000c16 	blt	r2,zero,a234 <__floatsidf+0xcc>
    a204:	90a2983a 	sll	r17,r18,r2
    a208:	0021883a 	mov	r16,zero
    a20c:	d8800217 	ldw	r2,8(sp)
    a210:	dc400415 	stw	r17,16(sp)
    a214:	dc000315 	stw	r16,12(sp)
    a218:	1105c83a 	sub	r2,r2,r4
    a21c:	d8800215 	stw	r2,8(sp)
    a220:	003fde06 	br	a19c <__floatsidf+0x34>
    a224:	00a00034 	movhi	r2,32768
    a228:	20800a26 	beq	r4,r2,a254 <__floatsidf+0xec>
    a22c:	0109c83a 	sub	r4,zero,r4
    a230:	003feb06 	br	a1e0 <__floatsidf+0x78>
    a234:	9006d07a 	srli	r3,r18,1
    a238:	008007c4 	movi	r2,31
    a23c:	1105c83a 	sub	r2,r2,r4
    a240:	1886d83a 	srl	r3,r3,r2
    a244:	9922983a 	sll	r17,r19,r4
    a248:	9120983a 	sll	r16,r18,r4
    a24c:	1c62b03a 	or	r17,r3,r17
    a250:	003fee06 	br	a20c <__floatsidf+0xa4>
    a254:	0009883a 	mov	r4,zero
    a258:	01707834 	movhi	r5,49632
    a25c:	003fd306 	br	a1ac <__floatsidf+0x44>

0000a260 <__fixdfsi>:
    a260:	defff804 	addi	sp,sp,-32
    a264:	2005883a 	mov	r2,r4
    a268:	2807883a 	mov	r3,r5
    a26c:	d809883a 	mov	r4,sp
    a270:	d9400204 	addi	r5,sp,8
    a274:	d8c00115 	stw	r3,4(sp)
    a278:	d8800015 	stw	r2,0(sp)
    a27c:	dfc00715 	stw	ra,28(sp)
    a280:	000aa440 	call	aa44 <__unpack_d>
    a284:	d8c00217 	ldw	r3,8(sp)
    a288:	00800084 	movi	r2,2
    a28c:	1880051e 	bne	r3,r2,a2a4 <__fixdfsi+0x44>
    a290:	0007883a 	mov	r3,zero
    a294:	1805883a 	mov	r2,r3
    a298:	dfc00717 	ldw	ra,28(sp)
    a29c:	dec00804 	addi	sp,sp,32
    a2a0:	f800283a 	ret
    a2a4:	00800044 	movi	r2,1
    a2a8:	10fff92e 	bgeu	r2,r3,a290 <__fixdfsi+0x30>
    a2ac:	00800104 	movi	r2,4
    a2b0:	18800426 	beq	r3,r2,a2c4 <__fixdfsi+0x64>
    a2b4:	d8c00417 	ldw	r3,16(sp)
    a2b8:	183ff516 	blt	r3,zero,a290 <__fixdfsi+0x30>
    a2bc:	00800784 	movi	r2,30
    a2c0:	10c0080e 	bge	r2,r3,a2e4 <__fixdfsi+0x84>
    a2c4:	d8800317 	ldw	r2,12(sp)
    a2c8:	1000121e 	bne	r2,zero,a314 <__fixdfsi+0xb4>
    a2cc:	00e00034 	movhi	r3,32768
    a2d0:	18ffffc4 	addi	r3,r3,-1
    a2d4:	1805883a 	mov	r2,r3
    a2d8:	dfc00717 	ldw	ra,28(sp)
    a2dc:	dec00804 	addi	sp,sp,32
    a2e0:	f800283a 	ret
    a2e4:	00800f04 	movi	r2,60
    a2e8:	10d1c83a 	sub	r8,r2,r3
    a2ec:	40bff804 	addi	r2,r8,-32
    a2f0:	d9800517 	ldw	r6,20(sp)
    a2f4:	d9c00617 	ldw	r7,24(sp)
    a2f8:	10000816 	blt	r2,zero,a31c <__fixdfsi+0xbc>
    a2fc:	3888d83a 	srl	r4,r7,r2
    a300:	d8800317 	ldw	r2,12(sp)
    a304:	2007883a 	mov	r3,r4
    a308:	103fe226 	beq	r2,zero,a294 <__fixdfsi+0x34>
    a30c:	0107c83a 	sub	r3,zero,r4
    a310:	003fe006 	br	a294 <__fixdfsi+0x34>
    a314:	00e00034 	movhi	r3,32768
    a318:	003fde06 	br	a294 <__fixdfsi+0x34>
    a31c:	39c7883a 	add	r3,r7,r7
    a320:	008007c4 	movi	r2,31
    a324:	1205c83a 	sub	r2,r2,r8
    a328:	1886983a 	sll	r3,r3,r2
    a32c:	3208d83a 	srl	r4,r6,r8
    a330:	1908b03a 	or	r4,r3,r4
    a334:	003ff206 	br	a300 <__fixdfsi+0xa0>

0000a338 <__floatunsidf>:
    a338:	defff204 	addi	sp,sp,-56
    a33c:	dfc00d15 	stw	ra,52(sp)
    a340:	ddc00c15 	stw	r23,48(sp)
    a344:	dd800b15 	stw	r22,44(sp)
    a348:	dd400a15 	stw	r21,40(sp)
    a34c:	dd000915 	stw	r20,36(sp)
    a350:	dcc00815 	stw	r19,32(sp)
    a354:	dc800715 	stw	r18,28(sp)
    a358:	dc400615 	stw	r17,24(sp)
    a35c:	dc000515 	stw	r16,20(sp)
    a360:	d8000115 	stw	zero,4(sp)
    a364:	20000f1e 	bne	r4,zero,a3a4 <__floatunsidf+0x6c>
    a368:	00800084 	movi	r2,2
    a36c:	d8800015 	stw	r2,0(sp)
    a370:	d809883a 	mov	r4,sp
    a374:	000a7300 	call	a730 <__pack_d>
    a378:	dfc00d17 	ldw	ra,52(sp)
    a37c:	ddc00c17 	ldw	r23,48(sp)
    a380:	dd800b17 	ldw	r22,44(sp)
    a384:	dd400a17 	ldw	r21,40(sp)
    a388:	dd000917 	ldw	r20,36(sp)
    a38c:	dcc00817 	ldw	r19,32(sp)
    a390:	dc800717 	ldw	r18,28(sp)
    a394:	dc400617 	ldw	r17,24(sp)
    a398:	dc000517 	ldw	r16,20(sp)
    a39c:	dec00e04 	addi	sp,sp,56
    a3a0:	f800283a 	ret
    a3a4:	008000c4 	movi	r2,3
    a3a8:	00c00f04 	movi	r3,60
    a3ac:	002f883a 	mov	r23,zero
    a3b0:	202d883a 	mov	r22,r4
    a3b4:	d8800015 	stw	r2,0(sp)
    a3b8:	d8c00215 	stw	r3,8(sp)
    a3bc:	d9000315 	stw	r4,12(sp)
    a3c0:	ddc00415 	stw	r23,16(sp)
    a3c4:	000a6b00 	call	a6b0 <__clzsi2>
    a3c8:	12400744 	addi	r9,r2,29
    a3cc:	48000b16 	blt	r9,zero,a3fc <__floatunsidf+0xc4>
    a3d0:	483fe726 	beq	r9,zero,a370 <__floatunsidf+0x38>
    a3d4:	10bfff44 	addi	r2,r2,-3
    a3d8:	10002e16 	blt	r2,zero,a494 <__floatunsidf+0x15c>
    a3dc:	b0a2983a 	sll	r17,r22,r2
    a3e0:	0021883a 	mov	r16,zero
    a3e4:	d8800217 	ldw	r2,8(sp)
    a3e8:	dc400415 	stw	r17,16(sp)
    a3ec:	dc000315 	stw	r16,12(sp)
    a3f0:	1245c83a 	sub	r2,r2,r9
    a3f4:	d8800215 	stw	r2,8(sp)
    a3f8:	003fdd06 	br	a370 <__floatunsidf+0x38>
    a3fc:	0255c83a 	sub	r10,zero,r9
    a400:	51bff804 	addi	r6,r10,-32
    a404:	30001b16 	blt	r6,zero,a474 <__floatunsidf+0x13c>
    a408:	b9a8d83a 	srl	r20,r23,r6
    a40c:	002b883a 	mov	r21,zero
    a410:	000f883a 	mov	r7,zero
    a414:	01000044 	movi	r4,1
    a418:	0011883a 	mov	r8,zero
    a41c:	30002516 	blt	r6,zero,a4b4 <__floatunsidf+0x17c>
    a420:	21a6983a 	sll	r19,r4,r6
    a424:	0025883a 	mov	r18,zero
    a428:	00bfffc4 	movi	r2,-1
    a42c:	9089883a 	add	r4,r18,r2
    a430:	988b883a 	add	r5,r19,r2
    a434:	248d803a 	cmpltu	r6,r4,r18
    a438:	314b883a 	add	r5,r6,r5
    a43c:	b104703a 	and	r2,r22,r4
    a440:	b946703a 	and	r3,r23,r5
    a444:	10c4b03a 	or	r2,r2,r3
    a448:	10000226 	beq	r2,zero,a454 <__floatunsidf+0x11c>
    a44c:	01c00044 	movi	r7,1
    a450:	0011883a 	mov	r8,zero
    a454:	d9000217 	ldw	r4,8(sp)
    a458:	a1c4b03a 	or	r2,r20,r7
    a45c:	aa06b03a 	or	r3,r21,r8
    a460:	2249c83a 	sub	r4,r4,r9
    a464:	d8c00415 	stw	r3,16(sp)
    a468:	d9000215 	stw	r4,8(sp)
    a46c:	d8800315 	stw	r2,12(sp)
    a470:	003fbf06 	br	a370 <__floatunsidf+0x38>
    a474:	bdc7883a 	add	r3,r23,r23
    a478:	008007c4 	movi	r2,31
    a47c:	1285c83a 	sub	r2,r2,r10
    a480:	1886983a 	sll	r3,r3,r2
    a484:	b2a8d83a 	srl	r20,r22,r10
    a488:	baaad83a 	srl	r21,r23,r10
    a48c:	1d28b03a 	or	r20,r3,r20
    a490:	003fdf06 	br	a410 <__floatunsidf+0xd8>
    a494:	b006d07a 	srli	r3,r22,1
    a498:	008007c4 	movi	r2,31
    a49c:	1245c83a 	sub	r2,r2,r9
    a4a0:	1886d83a 	srl	r3,r3,r2
    a4a4:	ba62983a 	sll	r17,r23,r9
    a4a8:	b260983a 	sll	r16,r22,r9
    a4ac:	1c62b03a 	or	r17,r3,r17
    a4b0:	003fcc06 	br	a3e4 <__floatunsidf+0xac>
    a4b4:	2006d07a 	srli	r3,r4,1
    a4b8:	008007c4 	movi	r2,31
    a4bc:	1285c83a 	sub	r2,r2,r10
    a4c0:	18a6d83a 	srl	r19,r3,r2
    a4c4:	22a4983a 	sll	r18,r4,r10
    a4c8:	003fd706 	br	a428 <__floatunsidf+0xf0>

0000a4cc <udivmodsi4>:
    a4cc:	29001b2e 	bgeu	r5,r4,a53c <udivmodsi4+0x70>
    a4d0:	28001a16 	blt	r5,zero,a53c <udivmodsi4+0x70>
    a4d4:	00800044 	movi	r2,1
    a4d8:	0007883a 	mov	r3,zero
    a4dc:	01c007c4 	movi	r7,31
    a4e0:	00000306 	br	a4f0 <udivmodsi4+0x24>
    a4e4:	19c01326 	beq	r3,r7,a534 <udivmodsi4+0x68>
    a4e8:	18c00044 	addi	r3,r3,1
    a4ec:	28000416 	blt	r5,zero,a500 <udivmodsi4+0x34>
    a4f0:	294b883a 	add	r5,r5,r5
    a4f4:	1085883a 	add	r2,r2,r2
    a4f8:	293ffa36 	bltu	r5,r4,a4e4 <udivmodsi4+0x18>
    a4fc:	10000d26 	beq	r2,zero,a534 <udivmodsi4+0x68>
    a500:	0007883a 	mov	r3,zero
    a504:	21400236 	bltu	r4,r5,a510 <udivmodsi4+0x44>
    a508:	2149c83a 	sub	r4,r4,r5
    a50c:	1886b03a 	or	r3,r3,r2
    a510:	1004d07a 	srli	r2,r2,1
    a514:	280ad07a 	srli	r5,r5,1
    a518:	103ffa1e 	bne	r2,zero,a504 <udivmodsi4+0x38>
    a51c:	30000226 	beq	r6,zero,a528 <udivmodsi4+0x5c>
    a520:	2005883a 	mov	r2,r4
    a524:	f800283a 	ret
    a528:	1809883a 	mov	r4,r3
    a52c:	2005883a 	mov	r2,r4
    a530:	f800283a 	ret
    a534:	0007883a 	mov	r3,zero
    a538:	003ff806 	br	a51c <udivmodsi4+0x50>
    a53c:	00800044 	movi	r2,1
    a540:	0007883a 	mov	r3,zero
    a544:	003fef06 	br	a504 <udivmodsi4+0x38>

0000a548 <__divsi3>:
    a548:	defffe04 	addi	sp,sp,-8
    a54c:	dc000015 	stw	r16,0(sp)
    a550:	dfc00115 	stw	ra,4(sp)
    a554:	0021883a 	mov	r16,zero
    a558:	20000c16 	blt	r4,zero,a58c <__divsi3+0x44>
    a55c:	000d883a 	mov	r6,zero
    a560:	28000e16 	blt	r5,zero,a59c <__divsi3+0x54>
    a564:	000a4cc0 	call	a4cc <udivmodsi4>
    a568:	1007883a 	mov	r3,r2
    a56c:	8005003a 	cmpeq	r2,r16,zero
    a570:	1000011e 	bne	r2,zero,a578 <__divsi3+0x30>
    a574:	00c7c83a 	sub	r3,zero,r3
    a578:	1805883a 	mov	r2,r3
    a57c:	dfc00117 	ldw	ra,4(sp)
    a580:	dc000017 	ldw	r16,0(sp)
    a584:	dec00204 	addi	sp,sp,8
    a588:	f800283a 	ret
    a58c:	0109c83a 	sub	r4,zero,r4
    a590:	04000044 	movi	r16,1
    a594:	000d883a 	mov	r6,zero
    a598:	283ff20e 	bge	r5,zero,a564 <__divsi3+0x1c>
    a59c:	014bc83a 	sub	r5,zero,r5
    a5a0:	8021003a 	cmpeq	r16,r16,zero
    a5a4:	003fef06 	br	a564 <__divsi3+0x1c>

0000a5a8 <__modsi3>:
    a5a8:	deffff04 	addi	sp,sp,-4
    a5ac:	dfc00015 	stw	ra,0(sp)
    a5b0:	01800044 	movi	r6,1
    a5b4:	2807883a 	mov	r3,r5
    a5b8:	20000416 	blt	r4,zero,a5cc <__modsi3+0x24>
    a5bc:	28000c16 	blt	r5,zero,a5f0 <__modsi3+0x48>
    a5c0:	dfc00017 	ldw	ra,0(sp)
    a5c4:	dec00104 	addi	sp,sp,4
    a5c8:	000a4cc1 	jmpi	a4cc <udivmodsi4>
    a5cc:	0109c83a 	sub	r4,zero,r4
    a5d0:	28000b16 	blt	r5,zero,a600 <__modsi3+0x58>
    a5d4:	180b883a 	mov	r5,r3
    a5d8:	01800044 	movi	r6,1
    a5dc:	000a4cc0 	call	a4cc <udivmodsi4>
    a5e0:	0085c83a 	sub	r2,zero,r2
    a5e4:	dfc00017 	ldw	ra,0(sp)
    a5e8:	dec00104 	addi	sp,sp,4
    a5ec:	f800283a 	ret
    a5f0:	014bc83a 	sub	r5,zero,r5
    a5f4:	dfc00017 	ldw	ra,0(sp)
    a5f8:	dec00104 	addi	sp,sp,4
    a5fc:	000a4cc1 	jmpi	a4cc <udivmodsi4>
    a600:	0147c83a 	sub	r3,zero,r5
    a604:	003ff306 	br	a5d4 <__modsi3+0x2c>

0000a608 <__udivsi3>:
    a608:	000d883a 	mov	r6,zero
    a60c:	000a4cc1 	jmpi	a4cc <udivmodsi4>

0000a610 <__umodsi3>:
    a610:	01800044 	movi	r6,1
    a614:	000a4cc1 	jmpi	a4cc <udivmodsi4>

0000a618 <__muldi3>:
    a618:	2011883a 	mov	r8,r4
    a61c:	427fffcc 	andi	r9,r8,65535
    a620:	4018d43a 	srli	r12,r8,16
    a624:	32bfffcc 	andi	r10,r6,65535
    a628:	3016d43a 	srli	r11,r6,16
    a62c:	4a85383a 	mul	r2,r9,r10
    a630:	6295383a 	mul	r10,r12,r10
    a634:	4ad3383a 	mul	r9,r9,r11
    a638:	113fffcc 	andi	r4,r2,65535
    a63c:	1004d43a 	srli	r2,r2,16
    a640:	4a93883a 	add	r9,r9,r10
    a644:	3807883a 	mov	r3,r7
    a648:	1245883a 	add	r2,r2,r9
    a64c:	280f883a 	mov	r7,r5
    a650:	180b883a 	mov	r5,r3
    a654:	1006943a 	slli	r3,r2,16
    a658:	defffd04 	addi	sp,sp,-12
    a65c:	dc800215 	stw	r18,8(sp)
    a660:	1907883a 	add	r3,r3,r4
    a664:	dc400115 	stw	r17,4(sp)
    a668:	dc000015 	stw	r16,0(sp)
    a66c:	4165383a 	mul	r18,r8,r5
    a670:	31e3383a 	mul	r17,r6,r7
    a674:	1012d43a 	srli	r9,r2,16
    a678:	62d9383a 	mul	r12,r12,r11
    a67c:	181f883a 	mov	r15,r3
    a680:	1280022e 	bgeu	r2,r10,a68c <__muldi3+0x74>
    a684:	00800074 	movhi	r2,1
    a688:	6099883a 	add	r12,r12,r2
    a68c:	624d883a 	add	r6,r12,r9
    a690:	9187883a 	add	r3,r18,r6
    a694:	88c7883a 	add	r3,r17,r3
    a698:	7805883a 	mov	r2,r15
    a69c:	dc800217 	ldw	r18,8(sp)
    a6a0:	dc400117 	ldw	r17,4(sp)
    a6a4:	dc000017 	ldw	r16,0(sp)
    a6a8:	dec00304 	addi	sp,sp,12
    a6ac:	f800283a 	ret

0000a6b0 <__clzsi2>:
    a6b0:	00bfffd4 	movui	r2,65535
    a6b4:	11000e36 	bltu	r2,r4,a6f0 <__clzsi2+0x40>
    a6b8:	00803fc4 	movi	r2,255
    a6bc:	01400204 	movi	r5,8
    a6c0:	0007883a 	mov	r3,zero
    a6c4:	11001036 	bltu	r2,r4,a708 <__clzsi2+0x58>
    a6c8:	000b883a 	mov	r5,zero
    a6cc:	20c6d83a 	srl	r3,r4,r3
    a6d0:	00800074 	movhi	r2,1
    a6d4:	10b66a04 	addi	r2,r2,-9816
    a6d8:	1887883a 	add	r3,r3,r2
    a6dc:	18800003 	ldbu	r2,0(r3)
    a6e0:	00c00804 	movi	r3,32
    a6e4:	2885883a 	add	r2,r5,r2
    a6e8:	1885c83a 	sub	r2,r3,r2
    a6ec:	f800283a 	ret
    a6f0:	01400404 	movi	r5,16
    a6f4:	00804034 	movhi	r2,256
    a6f8:	10bfffc4 	addi	r2,r2,-1
    a6fc:	2807883a 	mov	r3,r5
    a700:	113ff22e 	bgeu	r2,r4,a6cc <__clzsi2+0x1c>
    a704:	01400604 	movi	r5,24
    a708:	2807883a 	mov	r3,r5
    a70c:	20c6d83a 	srl	r3,r4,r3
    a710:	00800074 	movhi	r2,1
    a714:	10b66a04 	addi	r2,r2,-9816
    a718:	1887883a 	add	r3,r3,r2
    a71c:	18800003 	ldbu	r2,0(r3)
    a720:	00c00804 	movi	r3,32
    a724:	2885883a 	add	r2,r5,r2
    a728:	1885c83a 	sub	r2,r3,r2
    a72c:	f800283a 	ret

0000a730 <__pack_d>:
    a730:	20c00017 	ldw	r3,0(r4)
    a734:	defffd04 	addi	sp,sp,-12
    a738:	dc000015 	stw	r16,0(sp)
    a73c:	dc800215 	stw	r18,8(sp)
    a740:	dc400115 	stw	r17,4(sp)
    a744:	00800044 	movi	r2,1
    a748:	22000317 	ldw	r8,12(r4)
    a74c:	001f883a 	mov	r15,zero
    a750:	22400417 	ldw	r9,16(r4)
    a754:	24000117 	ldw	r16,4(r4)
    a758:	10c0552e 	bgeu	r2,r3,a8b0 <__pack_d+0x180>
    a75c:	00800104 	movi	r2,4
    a760:	18804f26 	beq	r3,r2,a8a0 <__pack_d+0x170>
    a764:	00800084 	movi	r2,2
    a768:	18800226 	beq	r3,r2,a774 <__pack_d+0x44>
    a76c:	4244b03a 	or	r2,r8,r9
    a770:	10001a1e 	bne	r2,zero,a7dc <__pack_d+0xac>
    a774:	000d883a 	mov	r6,zero
    a778:	000f883a 	mov	r7,zero
    a77c:	0011883a 	mov	r8,zero
    a780:	00800434 	movhi	r2,16
    a784:	10bfffc4 	addi	r2,r2,-1
    a788:	301d883a 	mov	r14,r6
    a78c:	3884703a 	and	r2,r7,r2
    a790:	400a953a 	slli	r5,r8,20
    a794:	79bffc2c 	andhi	r6,r15,65520
    a798:	308cb03a 	or	r6,r6,r2
    a79c:	00e00434 	movhi	r3,32784
    a7a0:	18ffffc4 	addi	r3,r3,-1
    a7a4:	800497fa 	slli	r2,r16,31
    a7a8:	30c6703a 	and	r3,r6,r3
    a7ac:	1946b03a 	or	r3,r3,r5
    a7b0:	01600034 	movhi	r5,32768
    a7b4:	297fffc4 	addi	r5,r5,-1
    a7b8:	194a703a 	and	r5,r3,r5
    a7bc:	288ab03a 	or	r5,r5,r2
    a7c0:	2807883a 	mov	r3,r5
    a7c4:	7005883a 	mov	r2,r14
    a7c8:	dc800217 	ldw	r18,8(sp)
    a7cc:	dc400117 	ldw	r17,4(sp)
    a7d0:	dc000017 	ldw	r16,0(sp)
    a7d4:	dec00304 	addi	sp,sp,12
    a7d8:	f800283a 	ret
    a7dc:	21000217 	ldw	r4,8(r4)
    a7e0:	00bf0084 	movi	r2,-1022
    a7e4:	20803f16 	blt	r4,r2,a8e4 <__pack_d+0x1b4>
    a7e8:	0080ffc4 	movi	r2,1023
    a7ec:	11002c16 	blt	r2,r4,a8a0 <__pack_d+0x170>
    a7f0:	00803fc4 	movi	r2,255
    a7f4:	408c703a 	and	r6,r8,r2
    a7f8:	00802004 	movi	r2,128
    a7fc:	0007883a 	mov	r3,zero
    a800:	000f883a 	mov	r7,zero
    a804:	2280ffc4 	addi	r10,r4,1023
    a808:	30801e26 	beq	r6,r2,a884 <__pack_d+0x154>
    a80c:	00801fc4 	movi	r2,127
    a810:	4089883a 	add	r4,r8,r2
    a814:	220d803a 	cmpltu	r6,r4,r8
    a818:	324d883a 	add	r6,r6,r9
    a81c:	2011883a 	mov	r8,r4
    a820:	3013883a 	mov	r9,r6
    a824:	00880034 	movhi	r2,8192
    a828:	10bfffc4 	addi	r2,r2,-1
    a82c:	12400d36 	bltu	r2,r9,a864 <__pack_d+0x134>
    a830:	4804963a 	slli	r2,r9,24
    a834:	400cd23a 	srli	r6,r8,8
    a838:	480ed23a 	srli	r7,r9,8
    a83c:	013fffc4 	movi	r4,-1
    a840:	118cb03a 	or	r6,r2,r6
    a844:	01400434 	movhi	r5,16
    a848:	297fffc4 	addi	r5,r5,-1
    a84c:	3104703a 	and	r2,r6,r4
    a850:	3946703a 	and	r3,r7,r5
    a854:	5201ffcc 	andi	r8,r10,2047
    a858:	100d883a 	mov	r6,r2
    a85c:	180f883a 	mov	r7,r3
    a860:	003fc706 	br	a780 <__pack_d+0x50>
    a864:	480897fa 	slli	r4,r9,31
    a868:	4004d07a 	srli	r2,r8,1
    a86c:	4806d07a 	srli	r3,r9,1
    a870:	52800044 	addi	r10,r10,1
    a874:	2084b03a 	or	r2,r4,r2
    a878:	1011883a 	mov	r8,r2
    a87c:	1813883a 	mov	r9,r3
    a880:	003feb06 	br	a830 <__pack_d+0x100>
    a884:	383fe11e 	bne	r7,zero,a80c <__pack_d+0xdc>
    a888:	01004004 	movi	r4,256
    a88c:	4104703a 	and	r2,r8,r4
    a890:	10c4b03a 	or	r2,r2,r3
    a894:	103fe326 	beq	r2,zero,a824 <__pack_d+0xf4>
    a898:	3005883a 	mov	r2,r6
    a89c:	003fdc06 	br	a810 <__pack_d+0xe0>
    a8a0:	000d883a 	mov	r6,zero
    a8a4:	000f883a 	mov	r7,zero
    a8a8:	0201ffc4 	movi	r8,2047
    a8ac:	003fb406 	br	a780 <__pack_d+0x50>
    a8b0:	0005883a 	mov	r2,zero
    a8b4:	00c00234 	movhi	r3,8
    a8b8:	408cb03a 	or	r6,r8,r2
    a8bc:	48ceb03a 	or	r7,r9,r3
    a8c0:	013fffc4 	movi	r4,-1
    a8c4:	01400434 	movhi	r5,16
    a8c8:	297fffc4 	addi	r5,r5,-1
    a8cc:	3104703a 	and	r2,r6,r4
    a8d0:	3946703a 	and	r3,r7,r5
    a8d4:	100d883a 	mov	r6,r2
    a8d8:	180f883a 	mov	r7,r3
    a8dc:	0201ffc4 	movi	r8,2047
    a8e0:	003fa706 	br	a780 <__pack_d+0x50>
    a8e4:	1109c83a 	sub	r4,r2,r4
    a8e8:	00800e04 	movi	r2,56
    a8ec:	11004316 	blt	r2,r4,a9fc <__pack_d+0x2cc>
    a8f0:	21fff804 	addi	r7,r4,-32
    a8f4:	38004516 	blt	r7,zero,aa0c <__pack_d+0x2dc>
    a8f8:	49d8d83a 	srl	r12,r9,r7
    a8fc:	001b883a 	mov	r13,zero
    a900:	0023883a 	mov	r17,zero
    a904:	01400044 	movi	r5,1
    a908:	0025883a 	mov	r18,zero
    a90c:	38004716 	blt	r7,zero,aa2c <__pack_d+0x2fc>
    a910:	29d6983a 	sll	r11,r5,r7
    a914:	0015883a 	mov	r10,zero
    a918:	00bfffc4 	movi	r2,-1
    a91c:	5089883a 	add	r4,r10,r2
    a920:	588b883a 	add	r5,r11,r2
    a924:	228d803a 	cmpltu	r6,r4,r10
    a928:	314b883a 	add	r5,r6,r5
    a92c:	4104703a 	and	r2,r8,r4
    a930:	4946703a 	and	r3,r9,r5
    a934:	10c4b03a 	or	r2,r2,r3
    a938:	10000226 	beq	r2,zero,a944 <__pack_d+0x214>
    a93c:	04400044 	movi	r17,1
    a940:	0025883a 	mov	r18,zero
    a944:	00803fc4 	movi	r2,255
    a948:	644eb03a 	or	r7,r12,r17
    a94c:	3892703a 	and	r9,r7,r2
    a950:	00802004 	movi	r2,128
    a954:	6c90b03a 	or	r8,r13,r18
    a958:	0015883a 	mov	r10,zero
    a95c:	48801626 	beq	r9,r2,a9b8 <__pack_d+0x288>
    a960:	01001fc4 	movi	r4,127
    a964:	3905883a 	add	r2,r7,r4
    a968:	11cd803a 	cmpltu	r6,r2,r7
    a96c:	320d883a 	add	r6,r6,r8
    a970:	100f883a 	mov	r7,r2
    a974:	00840034 	movhi	r2,4096
    a978:	10bfffc4 	addi	r2,r2,-1
    a97c:	3011883a 	mov	r8,r6
    a980:	0007883a 	mov	r3,zero
    a984:	11801b36 	bltu	r2,r6,a9f4 <__pack_d+0x2c4>
    a988:	4004963a 	slli	r2,r8,24
    a98c:	3808d23a 	srli	r4,r7,8
    a990:	400ad23a 	srli	r5,r8,8
    a994:	1813883a 	mov	r9,r3
    a998:	1108b03a 	or	r4,r2,r4
    a99c:	00bfffc4 	movi	r2,-1
    a9a0:	00c00434 	movhi	r3,16
    a9a4:	18ffffc4 	addi	r3,r3,-1
    a9a8:	208c703a 	and	r6,r4,r2
    a9ac:	28ce703a 	and	r7,r5,r3
    a9b0:	4a01ffcc 	andi	r8,r9,2047
    a9b4:	003f7206 	br	a780 <__pack_d+0x50>
    a9b8:	503fe91e 	bne	r10,zero,a960 <__pack_d+0x230>
    a9bc:	01004004 	movi	r4,256
    a9c0:	3904703a 	and	r2,r7,r4
    a9c4:	0007883a 	mov	r3,zero
    a9c8:	10c4b03a 	or	r2,r2,r3
    a9cc:	10000626 	beq	r2,zero,a9e8 <__pack_d+0x2b8>
    a9d0:	3a45883a 	add	r2,r7,r9
    a9d4:	11cd803a 	cmpltu	r6,r2,r7
    a9d8:	320d883a 	add	r6,r6,r8
    a9dc:	100f883a 	mov	r7,r2
    a9e0:	3011883a 	mov	r8,r6
    a9e4:	0007883a 	mov	r3,zero
    a9e8:	00840034 	movhi	r2,4096
    a9ec:	10bfffc4 	addi	r2,r2,-1
    a9f0:	123fe52e 	bgeu	r2,r8,a988 <__pack_d+0x258>
    a9f4:	00c00044 	movi	r3,1
    a9f8:	003fe306 	br	a988 <__pack_d+0x258>
    a9fc:	0009883a 	mov	r4,zero
    aa00:	0013883a 	mov	r9,zero
    aa04:	000b883a 	mov	r5,zero
    aa08:	003fe406 	br	a99c <__pack_d+0x26c>
    aa0c:	4a47883a 	add	r3,r9,r9
    aa10:	008007c4 	movi	r2,31
    aa14:	1105c83a 	sub	r2,r2,r4
    aa18:	1886983a 	sll	r3,r3,r2
    aa1c:	4118d83a 	srl	r12,r8,r4
    aa20:	491ad83a 	srl	r13,r9,r4
    aa24:	1b18b03a 	or	r12,r3,r12
    aa28:	003fb506 	br	a900 <__pack_d+0x1d0>
    aa2c:	2806d07a 	srli	r3,r5,1
    aa30:	008007c4 	movi	r2,31
    aa34:	1105c83a 	sub	r2,r2,r4
    aa38:	1896d83a 	srl	r11,r3,r2
    aa3c:	2914983a 	sll	r10,r5,r4
    aa40:	003fb506 	br	a918 <__pack_d+0x1e8>

0000aa44 <__unpack_d>:
    aa44:	20c00117 	ldw	r3,4(r4)
    aa48:	22400017 	ldw	r9,0(r4)
    aa4c:	00800434 	movhi	r2,16
    aa50:	10bfffc4 	addi	r2,r2,-1
    aa54:	1808d53a 	srli	r4,r3,20
    aa58:	180cd7fa 	srli	r6,r3,31
    aa5c:	1894703a 	and	r10,r3,r2
    aa60:	2201ffcc 	andi	r8,r4,2047
    aa64:	281b883a 	mov	r13,r5
    aa68:	4817883a 	mov	r11,r9
    aa6c:	29800115 	stw	r6,4(r5)
    aa70:	5019883a 	mov	r12,r10
    aa74:	40001e1e 	bne	r8,zero,aaf0 <__unpack_d+0xac>
    aa78:	4a84b03a 	or	r2,r9,r10
    aa7c:	10001926 	beq	r2,zero,aae4 <__unpack_d+0xa0>
    aa80:	4804d63a 	srli	r2,r9,24
    aa84:	500c923a 	slli	r6,r10,8
    aa88:	013f0084 	movi	r4,-1022
    aa8c:	00c40034 	movhi	r3,4096
    aa90:	18ffffc4 	addi	r3,r3,-1
    aa94:	118cb03a 	or	r6,r2,r6
    aa98:	008000c4 	movi	r2,3
    aa9c:	480a923a 	slli	r5,r9,8
    aaa0:	68800015 	stw	r2,0(r13)
    aaa4:	69000215 	stw	r4,8(r13)
    aaa8:	19800b36 	bltu	r3,r6,aad8 <__unpack_d+0x94>
    aaac:	200f883a 	mov	r7,r4
    aab0:	1811883a 	mov	r8,r3
    aab4:	2945883a 	add	r2,r5,r5
    aab8:	1149803a 	cmpltu	r4,r2,r5
    aabc:	3187883a 	add	r3,r6,r6
    aac0:	20c9883a 	add	r4,r4,r3
    aac4:	100b883a 	mov	r5,r2
    aac8:	200d883a 	mov	r6,r4
    aacc:	39ffffc4 	addi	r7,r7,-1
    aad0:	413ff82e 	bgeu	r8,r4,aab4 <__unpack_d+0x70>
    aad4:	69c00215 	stw	r7,8(r13)
    aad8:	69800415 	stw	r6,16(r13)
    aadc:	69400315 	stw	r5,12(r13)
    aae0:	f800283a 	ret
    aae4:	00800084 	movi	r2,2
    aae8:	28800015 	stw	r2,0(r5)
    aaec:	f800283a 	ret
    aaf0:	0081ffc4 	movi	r2,2047
    aaf4:	40800f26 	beq	r8,r2,ab34 <__unpack_d+0xf0>
    aaf8:	480cd63a 	srli	r6,r9,24
    aafc:	5006923a 	slli	r3,r10,8
    ab00:	4804923a 	slli	r2,r9,8
    ab04:	0009883a 	mov	r4,zero
    ab08:	30c6b03a 	or	r3,r6,r3
    ab0c:	01440034 	movhi	r5,4096
    ab10:	110cb03a 	or	r6,r2,r4
    ab14:	423f0044 	addi	r8,r8,-1023
    ab18:	194eb03a 	or	r7,r3,r5
    ab1c:	008000c4 	movi	r2,3
    ab20:	69c00415 	stw	r7,16(r13)
    ab24:	6a000215 	stw	r8,8(r13)
    ab28:	68800015 	stw	r2,0(r13)
    ab2c:	69800315 	stw	r6,12(r13)
    ab30:	f800283a 	ret
    ab34:	4a84b03a 	or	r2,r9,r10
    ab38:	1000031e 	bne	r2,zero,ab48 <__unpack_d+0x104>
    ab3c:	00800104 	movi	r2,4
    ab40:	28800015 	stw	r2,0(r5)
    ab44:	f800283a 	ret
    ab48:	0009883a 	mov	r4,zero
    ab4c:	01400234 	movhi	r5,8
    ab50:	4904703a 	and	r2,r9,r4
    ab54:	5146703a 	and	r3,r10,r5
    ab58:	10c4b03a 	or	r2,r2,r3
    ab5c:	10000526 	beq	r2,zero,ab74 <__unpack_d+0x130>
    ab60:	00800044 	movi	r2,1
    ab64:	68800015 	stw	r2,0(r13)
    ab68:	6b000415 	stw	r12,16(r13)
    ab6c:	6ac00315 	stw	r11,12(r13)
    ab70:	f800283a 	ret
    ab74:	68000015 	stw	zero,0(r13)
    ab78:	003ffb06 	br	ab68 <__unpack_d+0x124>

0000ab7c <__fpcmp_parts_d>:
    ab7c:	21800017 	ldw	r6,0(r4)
    ab80:	00c00044 	movi	r3,1
    ab84:	19800a2e 	bgeu	r3,r6,abb0 <__fpcmp_parts_d+0x34>
    ab88:	28800017 	ldw	r2,0(r5)
    ab8c:	1880082e 	bgeu	r3,r2,abb0 <__fpcmp_parts_d+0x34>
    ab90:	00c00104 	movi	r3,4
    ab94:	30c02626 	beq	r6,r3,ac30 <__fpcmp_parts_d+0xb4>
    ab98:	10c02226 	beq	r2,r3,ac24 <__fpcmp_parts_d+0xa8>
    ab9c:	00c00084 	movi	r3,2
    aba0:	30c00526 	beq	r6,r3,abb8 <__fpcmp_parts_d+0x3c>
    aba4:	10c0071e 	bne	r2,r3,abc4 <__fpcmp_parts_d+0x48>
    aba8:	20800117 	ldw	r2,4(r4)
    abac:	1000091e 	bne	r2,zero,abd4 <__fpcmp_parts_d+0x58>
    abb0:	00800044 	movi	r2,1
    abb4:	f800283a 	ret
    abb8:	10c01a1e 	bne	r2,r3,ac24 <__fpcmp_parts_d+0xa8>
    abbc:	0005883a 	mov	r2,zero
    abc0:	f800283a 	ret
    abc4:	22000117 	ldw	r8,4(r4)
    abc8:	28800117 	ldw	r2,4(r5)
    abcc:	40800326 	beq	r8,r2,abdc <__fpcmp_parts_d+0x60>
    abd0:	403ff726 	beq	r8,zero,abb0 <__fpcmp_parts_d+0x34>
    abd4:	00bfffc4 	movi	r2,-1
    abd8:	f800283a 	ret
    abdc:	20c00217 	ldw	r3,8(r4)
    abe0:	28800217 	ldw	r2,8(r5)
    abe4:	10fffa16 	blt	r2,r3,abd0 <__fpcmp_parts_d+0x54>
    abe8:	18800916 	blt	r3,r2,ac10 <__fpcmp_parts_d+0x94>
    abec:	21c00417 	ldw	r7,16(r4)
    abf0:	28c00417 	ldw	r3,16(r5)
    abf4:	21800317 	ldw	r6,12(r4)
    abf8:	28800317 	ldw	r2,12(r5)
    abfc:	19fff436 	bltu	r3,r7,abd0 <__fpcmp_parts_d+0x54>
    ac00:	38c00526 	beq	r7,r3,ac18 <__fpcmp_parts_d+0x9c>
    ac04:	38c00236 	bltu	r7,r3,ac10 <__fpcmp_parts_d+0x94>
    ac08:	19ffec1e 	bne	r3,r7,abbc <__fpcmp_parts_d+0x40>
    ac0c:	30bfeb2e 	bgeu	r6,r2,abbc <__fpcmp_parts_d+0x40>
    ac10:	403fe71e 	bne	r8,zero,abb0 <__fpcmp_parts_d+0x34>
    ac14:	003fef06 	br	abd4 <__fpcmp_parts_d+0x58>
    ac18:	11bffa2e 	bgeu	r2,r6,ac04 <__fpcmp_parts_d+0x88>
    ac1c:	403fe426 	beq	r8,zero,abb0 <__fpcmp_parts_d+0x34>
    ac20:	003fec06 	br	abd4 <__fpcmp_parts_d+0x58>
    ac24:	28800117 	ldw	r2,4(r5)
    ac28:	103fe11e 	bne	r2,zero,abb0 <__fpcmp_parts_d+0x34>
    ac2c:	003fe906 	br	abd4 <__fpcmp_parts_d+0x58>
    ac30:	11bfdd1e 	bne	r2,r6,aba8 <__fpcmp_parts_d+0x2c>
    ac34:	28c00117 	ldw	r3,4(r5)
    ac38:	20800117 	ldw	r2,4(r4)
    ac3c:	1885c83a 	sub	r2,r3,r2
    ac40:	f800283a 	ret

0000ac44 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    ac44:	defff404 	addi	sp,sp,-48
    ac48:	df000b15 	stw	fp,44(sp)
    ac4c:	df000b04 	addi	fp,sp,44
    ac50:	e13ffb15 	stw	r4,-20(fp)
    ac54:	e17ffc15 	stw	r5,-16(fp)
    ac58:	e1bffd15 	stw	r6,-12(fp)
    ac5c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    ac60:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    ac64:	00800074 	movhi	r2,1
    ac68:	1083f204 	addi	r2,r2,4040
    ac6c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    ac70:	1005003a 	cmpeq	r2,r2,zero
    ac74:	1000411e 	bne	r2,zero,ad7c <alt_alarm_start+0x138>
  {
    if (alarm)
    ac78:	e0bffb17 	ldw	r2,-20(fp)
    ac7c:	1005003a 	cmpeq	r2,r2,zero
    ac80:	10003b1e 	bne	r2,zero,ad70 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    ac84:	e0fffb17 	ldw	r3,-20(fp)
    ac88:	e0bffd17 	ldw	r2,-12(fp)
    ac8c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    ac90:	e0fffb17 	ldw	r3,-20(fp)
    ac94:	e0bffe17 	ldw	r2,-8(fp)
    ac98:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ac9c:	0005303a 	rdctl	r2,status
    aca0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    aca4:	e0fff817 	ldw	r3,-32(fp)
    aca8:	00bfff84 	movi	r2,-2
    acac:	1884703a 	and	r2,r3,r2
    acb0:	1001703a 	wrctl	status,r2
  
  return context;
    acb4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    acb8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    acbc:	00800074 	movhi	r2,1
    acc0:	1083f304 	addi	r2,r2,4044
    acc4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    acc8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    accc:	e0fffc17 	ldw	r3,-16(fp)
    acd0:	e0bff917 	ldw	r2,-28(fp)
    acd4:	1885883a 	add	r2,r3,r2
    acd8:	10c00044 	addi	r3,r2,1
    acdc:	e0bffb17 	ldw	r2,-20(fp)
    ace0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    ace4:	e0bffb17 	ldw	r2,-20(fp)
    ace8:	10c00217 	ldw	r3,8(r2)
    acec:	e0bff917 	ldw	r2,-28(fp)
    acf0:	1880042e 	bgeu	r3,r2,ad04 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    acf4:	e0fffb17 	ldw	r3,-20(fp)
    acf8:	00800044 	movi	r2,1
    acfc:	18800405 	stb	r2,16(r3)
    ad00:	00000206 	br	ad0c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    ad04:	e0bffb17 	ldw	r2,-20(fp)
    ad08:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    ad0c:	e0fffb17 	ldw	r3,-20(fp)
    ad10:	00800074 	movhi	r2,1
    ad14:	10bd4904 	addi	r2,r2,-2780
    ad18:	e0bff615 	stw	r2,-40(fp)
    ad1c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ad20:	e0fff717 	ldw	r3,-36(fp)
    ad24:	e0bff617 	ldw	r2,-40(fp)
    ad28:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    ad2c:	e0bff617 	ldw	r2,-40(fp)
    ad30:	10c00017 	ldw	r3,0(r2)
    ad34:	e0bff717 	ldw	r2,-36(fp)
    ad38:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    ad3c:	e0bff617 	ldw	r2,-40(fp)
    ad40:	10c00017 	ldw	r3,0(r2)
    ad44:	e0bff717 	ldw	r2,-36(fp)
    ad48:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    ad4c:	e0fff617 	ldw	r3,-40(fp)
    ad50:	e0bff717 	ldw	r2,-36(fp)
    ad54:	18800015 	stw	r2,0(r3)
    ad58:	e0bffa17 	ldw	r2,-24(fp)
    ad5c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ad60:	e0bff517 	ldw	r2,-44(fp)
    ad64:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    ad68:	e03fff15 	stw	zero,-4(fp)
    ad6c:	00000506 	br	ad84 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    ad70:	00bffa84 	movi	r2,-22
    ad74:	e0bfff15 	stw	r2,-4(fp)
    ad78:	00000206 	br	ad84 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    ad7c:	00bfde84 	movi	r2,-134
    ad80:	e0bfff15 	stw	r2,-4(fp)
    ad84:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    ad88:	e037883a 	mov	sp,fp
    ad8c:	df000017 	ldw	fp,0(sp)
    ad90:	dec00104 	addi	sp,sp,4
    ad94:	f800283a 	ret

0000ad98 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ad98:	defff804 	addi	sp,sp,-32
    ad9c:	dfc00715 	stw	ra,28(sp)
    ada0:	df000615 	stw	fp,24(sp)
    ada4:	df000604 	addi	fp,sp,24
    ada8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    adac:	e0bffc17 	ldw	r2,-16(fp)
    adb0:	1004803a 	cmplt	r2,r2,zero
    adb4:	1000081e 	bne	r2,zero,add8 <close+0x40>
    adb8:	e0bffc17 	ldw	r2,-16(fp)
    adbc:	10800324 	muli	r2,r2,12
    adc0:	1007883a 	mov	r3,r2
    adc4:	00800074 	movhi	r2,1
    adc8:	10b8c404 	addi	r2,r2,-7408
    adcc:	1887883a 	add	r3,r3,r2
    add0:	e0ffff15 	stw	r3,-4(fp)
    add4:	00000106 	br	addc <close+0x44>
    add8:	e03fff15 	stw	zero,-4(fp)
    addc:	e0bfff17 	ldw	r2,-4(fp)
    ade0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    ade4:	e0bffb17 	ldw	r2,-20(fp)
    ade8:	1005003a 	cmpeq	r2,r2,zero
    adec:	10001d1e 	bne	r2,zero,ae64 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    adf0:	e0bffb17 	ldw	r2,-20(fp)
    adf4:	10800017 	ldw	r2,0(r2)
    adf8:	10800417 	ldw	r2,16(r2)
    adfc:	1005003a 	cmpeq	r2,r2,zero
    ae00:	1000071e 	bne	r2,zero,ae20 <close+0x88>
    ae04:	e0bffb17 	ldw	r2,-20(fp)
    ae08:	10800017 	ldw	r2,0(r2)
    ae0c:	10800417 	ldw	r2,16(r2)
    ae10:	e13ffb17 	ldw	r4,-20(fp)
    ae14:	103ee83a 	callr	r2
    ae18:	e0bffe15 	stw	r2,-8(fp)
    ae1c:	00000106 	br	ae24 <close+0x8c>
    ae20:	e03ffe15 	stw	zero,-8(fp)
    ae24:	e0bffe17 	ldw	r2,-8(fp)
    ae28:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ae2c:	e13ffc17 	ldw	r4,-16(fp)
    ae30:	000b63c0 	call	b63c <alt_release_fd>
    if (rval < 0)
    ae34:	e0bffa17 	ldw	r2,-24(fp)
    ae38:	1004403a 	cmpge	r2,r2,zero
    ae3c:	1000071e 	bne	r2,zero,ae5c <close+0xc4>
    {
      ALT_ERRNO = -rval;
    ae40:	000ae940 	call	ae94 <alt_get_errno>
    ae44:	e0fffa17 	ldw	r3,-24(fp)
    ae48:	00c7c83a 	sub	r3,zero,r3
    ae4c:	10c00015 	stw	r3,0(r2)
      return -1;
    ae50:	00bfffc4 	movi	r2,-1
    ae54:	e0bffd15 	stw	r2,-12(fp)
    ae58:	00000806 	br	ae7c <close+0xe4>
    }
    return 0;
    ae5c:	e03ffd15 	stw	zero,-12(fp)
    ae60:	00000606 	br	ae7c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ae64:	000ae940 	call	ae94 <alt_get_errno>
    ae68:	1007883a 	mov	r3,r2
    ae6c:	00801444 	movi	r2,81
    ae70:	18800015 	stw	r2,0(r3)
    return -1;
    ae74:	00bfffc4 	movi	r2,-1
    ae78:	e0bffd15 	stw	r2,-12(fp)
    ae7c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    ae80:	e037883a 	mov	sp,fp
    ae84:	dfc00117 	ldw	ra,4(sp)
    ae88:	df000017 	ldw	fp,0(sp)
    ae8c:	dec00204 	addi	sp,sp,8
    ae90:	f800283a 	ret

0000ae94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ae94:	defffd04 	addi	sp,sp,-12
    ae98:	dfc00215 	stw	ra,8(sp)
    ae9c:	df000115 	stw	fp,4(sp)
    aea0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    aea4:	00800074 	movhi	r2,1
    aea8:	10bd4704 	addi	r2,r2,-2788
    aeac:	10800017 	ldw	r2,0(r2)
    aeb0:	1005003a 	cmpeq	r2,r2,zero
    aeb4:	1000061e 	bne	r2,zero,aed0 <alt_get_errno+0x3c>
    aeb8:	00800074 	movhi	r2,1
    aebc:	10bd4704 	addi	r2,r2,-2788
    aec0:	10800017 	ldw	r2,0(r2)
    aec4:	103ee83a 	callr	r2
    aec8:	e0bfff15 	stw	r2,-4(fp)
    aecc:	00000306 	br	aedc <alt_get_errno+0x48>
    aed0:	00800074 	movhi	r2,1
    aed4:	1083eb04 	addi	r2,r2,4012
    aed8:	e0bfff15 	stw	r2,-4(fp)
    aedc:	e0bfff17 	ldw	r2,-4(fp)
}
    aee0:	e037883a 	mov	sp,fp
    aee4:	dfc00117 	ldw	ra,4(sp)
    aee8:	df000017 	ldw	fp,0(sp)
    aeec:	dec00204 	addi	sp,sp,8
    aef0:	f800283a 	ret

0000aef4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    aef4:	defffc04 	addi	sp,sp,-16
    aef8:	df000315 	stw	fp,12(sp)
    aefc:	df000304 	addi	fp,sp,12
    af00:	e13ffd15 	stw	r4,-12(fp)
    af04:	e17ffe15 	stw	r5,-8(fp)
    af08:	e1bfff15 	stw	r6,-4(fp)
  return len;
    af0c:	e0bfff17 	ldw	r2,-4(fp)
}
    af10:	e037883a 	mov	sp,fp
    af14:	df000017 	ldw	fp,0(sp)
    af18:	dec00104 	addi	sp,sp,4
    af1c:	f800283a 	ret

0000af20 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    af20:	defffd04 	addi	sp,sp,-12
    af24:	df000215 	stw	fp,8(sp)
    af28:	df000204 	addi	fp,sp,8
    af2c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    af30:	e0bfff17 	ldw	r2,-4(fp)
    af34:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    af38:	e0bffe17 	ldw	r2,-8(fp)
    af3c:	1005003a 	cmpeq	r2,r2,zero
    af40:	1000021e 	bne	r2,zero,af4c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    af44:	002af070 	cmpltui	zero,zero,43969
    af48:	00000106 	br	af50 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    af4c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    af50:	e037883a 	mov	sp,fp
    af54:	df000017 	ldw	fp,0(sp)
    af58:	dec00104 	addi	sp,sp,4
    af5c:	f800283a 	ret

0000af60 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    af60:	defffd04 	addi	sp,sp,-12
    af64:	dfc00215 	stw	ra,8(sp)
    af68:	df000115 	stw	fp,4(sp)
    af6c:	df000104 	addi	fp,sp,4
    af70:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    af74:	e13fff17 	ldw	r4,-4(fp)
    af78:	000af200 	call	af20 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    af7c:	003fff06 	br	af7c <_exit+0x1c>

0000af80 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    af80:	defff904 	addi	sp,sp,-28
    af84:	dfc00615 	stw	ra,24(sp)
    af88:	df000515 	stw	fp,20(sp)
    af8c:	df000504 	addi	fp,sp,20
    af90:	e13ffc15 	stw	r4,-16(fp)
    af94:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    af98:	e0bffc17 	ldw	r2,-16(fp)
    af9c:	1004803a 	cmplt	r2,r2,zero
    afa0:	1000081e 	bne	r2,zero,afc4 <fstat+0x44>
    afa4:	e0bffc17 	ldw	r2,-16(fp)
    afa8:	10800324 	muli	r2,r2,12
    afac:	1007883a 	mov	r3,r2
    afb0:	00800074 	movhi	r2,1
    afb4:	10b8c404 	addi	r2,r2,-7408
    afb8:	1887883a 	add	r3,r3,r2
    afbc:	e0ffff15 	stw	r3,-4(fp)
    afc0:	00000106 	br	afc8 <fstat+0x48>
    afc4:	e03fff15 	stw	zero,-4(fp)
    afc8:	e0bfff17 	ldw	r2,-4(fp)
    afcc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    afd0:	e0bffb17 	ldw	r2,-20(fp)
    afd4:	1005003a 	cmpeq	r2,r2,zero
    afd8:	1000121e 	bne	r2,zero,b024 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    afdc:	e0bffb17 	ldw	r2,-20(fp)
    afe0:	10800017 	ldw	r2,0(r2)
    afe4:	10800817 	ldw	r2,32(r2)
    afe8:	1005003a 	cmpeq	r2,r2,zero
    afec:	1000081e 	bne	r2,zero,b010 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    aff0:	e0bffb17 	ldw	r2,-20(fp)
    aff4:	10800017 	ldw	r2,0(r2)
    aff8:	10800817 	ldw	r2,32(r2)
    affc:	e13ffb17 	ldw	r4,-20(fp)
    b000:	e17ffd17 	ldw	r5,-12(fp)
    b004:	103ee83a 	callr	r2
    b008:	e0bffe15 	stw	r2,-8(fp)
    b00c:	00000b06 	br	b03c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b010:	e0fffd17 	ldw	r3,-12(fp)
    b014:	00880004 	movi	r2,8192
    b018:	18800115 	stw	r2,4(r3)
      return 0;
    b01c:	e03ffe15 	stw	zero,-8(fp)
    b020:	00000606 	br	b03c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b024:	000b0540 	call	b054 <alt_get_errno>
    b028:	1007883a 	mov	r3,r2
    b02c:	00801444 	movi	r2,81
    b030:	18800015 	stw	r2,0(r3)
    return -1;
    b034:	00bfffc4 	movi	r2,-1
    b038:	e0bffe15 	stw	r2,-8(fp)
    b03c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b040:	e037883a 	mov	sp,fp
    b044:	dfc00117 	ldw	ra,4(sp)
    b048:	df000017 	ldw	fp,0(sp)
    b04c:	dec00204 	addi	sp,sp,8
    b050:	f800283a 	ret

0000b054 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b054:	defffd04 	addi	sp,sp,-12
    b058:	dfc00215 	stw	ra,8(sp)
    b05c:	df000115 	stw	fp,4(sp)
    b060:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b064:	00800074 	movhi	r2,1
    b068:	10bd4704 	addi	r2,r2,-2788
    b06c:	10800017 	ldw	r2,0(r2)
    b070:	1005003a 	cmpeq	r2,r2,zero
    b074:	1000061e 	bne	r2,zero,b090 <alt_get_errno+0x3c>
    b078:	00800074 	movhi	r2,1
    b07c:	10bd4704 	addi	r2,r2,-2788
    b080:	10800017 	ldw	r2,0(r2)
    b084:	103ee83a 	callr	r2
    b088:	e0bfff15 	stw	r2,-4(fp)
    b08c:	00000306 	br	b09c <alt_get_errno+0x48>
    b090:	00800074 	movhi	r2,1
    b094:	1083eb04 	addi	r2,r2,4012
    b098:	e0bfff15 	stw	r2,-4(fp)
    b09c:	e0bfff17 	ldw	r2,-4(fp)
}
    b0a0:	e037883a 	mov	sp,fp
    b0a4:	dfc00117 	ldw	ra,4(sp)
    b0a8:	df000017 	ldw	fp,0(sp)
    b0ac:	dec00204 	addi	sp,sp,8
    b0b0:	f800283a 	ret

0000b0b4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b0b4:	deffeb04 	addi	sp,sp,-84
    b0b8:	dfc01415 	stw	ra,80(sp)
    b0bc:	df001315 	stw	fp,76(sp)
    b0c0:	df001304 	addi	fp,sp,76
    b0c4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b0c8:	e0bffd17 	ldw	r2,-12(fp)
    b0cc:	1004803a 	cmplt	r2,r2,zero
    b0d0:	1000081e 	bne	r2,zero,b0f4 <isatty+0x40>
    b0d4:	e0bffd17 	ldw	r2,-12(fp)
    b0d8:	10800324 	muli	r2,r2,12
    b0dc:	1007883a 	mov	r3,r2
    b0e0:	00800074 	movhi	r2,1
    b0e4:	10b8c404 	addi	r2,r2,-7408
    b0e8:	1887883a 	add	r3,r3,r2
    b0ec:	e0ffff15 	stw	r3,-4(fp)
    b0f0:	00000106 	br	b0f8 <isatty+0x44>
    b0f4:	e03fff15 	stw	zero,-4(fp)
    b0f8:	e0bfff17 	ldw	r2,-4(fp)
    b0fc:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    b100:	e0bfed17 	ldw	r2,-76(fp)
    b104:	1005003a 	cmpeq	r2,r2,zero
    b108:	10000f1e 	bne	r2,zero,b148 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b10c:	e0bfed17 	ldw	r2,-76(fp)
    b110:	10800017 	ldw	r2,0(r2)
    b114:	10800817 	ldw	r2,32(r2)
    b118:	1004c03a 	cmpne	r2,r2,zero
    b11c:	1000031e 	bne	r2,zero,b12c <isatty+0x78>
    {
      return 1;
    b120:	00800044 	movi	r2,1
    b124:	e0bffe15 	stw	r2,-8(fp)
    b128:	00000c06 	br	b15c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b12c:	e17fee04 	addi	r5,fp,-72
    b130:	e13ffd17 	ldw	r4,-12(fp)
    b134:	000af800 	call	af80 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b138:	e0bfef17 	ldw	r2,-68(fp)
    b13c:	10880020 	cmpeqi	r2,r2,8192
    b140:	e0bffe15 	stw	r2,-8(fp)
    b144:	00000506 	br	b15c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b148:	000b1740 	call	b174 <alt_get_errno>
    b14c:	1007883a 	mov	r3,r2
    b150:	00801444 	movi	r2,81
    b154:	18800015 	stw	r2,0(r3)
    return 0;
    b158:	e03ffe15 	stw	zero,-8(fp)
    b15c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b160:	e037883a 	mov	sp,fp
    b164:	dfc00117 	ldw	ra,4(sp)
    b168:	df000017 	ldw	fp,0(sp)
    b16c:	dec00204 	addi	sp,sp,8
    b170:	f800283a 	ret

0000b174 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b174:	defffd04 	addi	sp,sp,-12
    b178:	dfc00215 	stw	ra,8(sp)
    b17c:	df000115 	stw	fp,4(sp)
    b180:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b184:	00800074 	movhi	r2,1
    b188:	10bd4704 	addi	r2,r2,-2788
    b18c:	10800017 	ldw	r2,0(r2)
    b190:	1005003a 	cmpeq	r2,r2,zero
    b194:	1000061e 	bne	r2,zero,b1b0 <alt_get_errno+0x3c>
    b198:	00800074 	movhi	r2,1
    b19c:	10bd4704 	addi	r2,r2,-2788
    b1a0:	10800017 	ldw	r2,0(r2)
    b1a4:	103ee83a 	callr	r2
    b1a8:	e0bfff15 	stw	r2,-4(fp)
    b1ac:	00000306 	br	b1bc <alt_get_errno+0x48>
    b1b0:	00800074 	movhi	r2,1
    b1b4:	1083eb04 	addi	r2,r2,4012
    b1b8:	e0bfff15 	stw	r2,-4(fp)
    b1bc:	e0bfff17 	ldw	r2,-4(fp)
}
    b1c0:	e037883a 	mov	sp,fp
    b1c4:	dfc00117 	ldw	ra,4(sp)
    b1c8:	df000017 	ldw	fp,0(sp)
    b1cc:	dec00204 	addi	sp,sp,8
    b1d0:	f800283a 	ret

0000b1d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b1d4:	defffe04 	addi	sp,sp,-8
    b1d8:	dfc00115 	stw	ra,4(sp)
    b1dc:	df000015 	stw	fp,0(sp)
    b1e0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b1e4:	01000074 	movhi	r4,1
    b1e8:	213d4c04 	addi	r4,r4,-2768
    b1ec:	01400074 	movhi	r5,1
    b1f0:	2976b504 	addi	r5,r5,-9516
    b1f4:	01800074 	movhi	r6,1
    b1f8:	31bd4c04 	addi	r6,r6,-2768
    b1fc:	000b2540 	call	b254 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b200:	01000034 	movhi	r4,0
    b204:	21000804 	addi	r4,r4,32
    b208:	01400034 	movhi	r5,0
    b20c:	29400804 	addi	r5,r5,32
    b210:	01800034 	movhi	r6,0
    b214:	31807504 	addi	r6,r6,468
    b218:	000b2540 	call	b254 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b21c:	01000074 	movhi	r4,1
    b220:	21354b04 	addi	r4,r4,-10964
    b224:	01400074 	movhi	r5,1
    b228:	29754b04 	addi	r5,r5,-10964
    b22c:	01800074 	movhi	r6,1
    b230:	31b6b504 	addi	r6,r6,-9516
    b234:	000b2540 	call	b254 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b238:	000c6f00 	call	c6f0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b23c:	000c8e80 	call	c8e8 <alt_icache_flush_all>
}
    b240:	e037883a 	mov	sp,fp
    b244:	dfc00117 	ldw	ra,4(sp)
    b248:	df000017 	ldw	fp,0(sp)
    b24c:	dec00204 	addi	sp,sp,8
    b250:	f800283a 	ret

0000b254 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b254:	defffc04 	addi	sp,sp,-16
    b258:	df000315 	stw	fp,12(sp)
    b25c:	df000304 	addi	fp,sp,12
    b260:	e13ffd15 	stw	r4,-12(fp)
    b264:	e17ffe15 	stw	r5,-8(fp)
    b268:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b26c:	e0fffe17 	ldw	r3,-8(fp)
    b270:	e0bffd17 	ldw	r2,-12(fp)
    b274:	18800e26 	beq	r3,r2,b2b0 <alt_load_section+0x5c>
  {
    while( to != end )
    b278:	00000a06 	br	b2a4 <alt_load_section+0x50>
    {
      *to++ = *from++;
    b27c:	e0bffd17 	ldw	r2,-12(fp)
    b280:	10c00017 	ldw	r3,0(r2)
    b284:	e0bffe17 	ldw	r2,-8(fp)
    b288:	10c00015 	stw	r3,0(r2)
    b28c:	e0bffe17 	ldw	r2,-8(fp)
    b290:	10800104 	addi	r2,r2,4
    b294:	e0bffe15 	stw	r2,-8(fp)
    b298:	e0bffd17 	ldw	r2,-12(fp)
    b29c:	10800104 	addi	r2,r2,4
    b2a0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b2a4:	e0fffe17 	ldw	r3,-8(fp)
    b2a8:	e0bfff17 	ldw	r2,-4(fp)
    b2ac:	18bff31e 	bne	r3,r2,b27c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b2b0:	e037883a 	mov	sp,fp
    b2b4:	df000017 	ldw	fp,0(sp)
    b2b8:	dec00104 	addi	sp,sp,4
    b2bc:	f800283a 	ret

0000b2c0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b2c0:	defff804 	addi	sp,sp,-32
    b2c4:	dfc00715 	stw	ra,28(sp)
    b2c8:	df000615 	stw	fp,24(sp)
    b2cc:	df000604 	addi	fp,sp,24
    b2d0:	e13ffc15 	stw	r4,-16(fp)
    b2d4:	e17ffd15 	stw	r5,-12(fp)
    b2d8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b2dc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b2e0:	e0bffc17 	ldw	r2,-16(fp)
    b2e4:	1004803a 	cmplt	r2,r2,zero
    b2e8:	1000081e 	bne	r2,zero,b30c <lseek+0x4c>
    b2ec:	e0bffc17 	ldw	r2,-16(fp)
    b2f0:	10800324 	muli	r2,r2,12
    b2f4:	1007883a 	mov	r3,r2
    b2f8:	00800074 	movhi	r2,1
    b2fc:	10b8c404 	addi	r2,r2,-7408
    b300:	1887883a 	add	r3,r3,r2
    b304:	e0ffff15 	stw	r3,-4(fp)
    b308:	00000106 	br	b310 <lseek+0x50>
    b30c:	e03fff15 	stw	zero,-4(fp)
    b310:	e0bfff17 	ldw	r2,-4(fp)
    b314:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    b318:	e0bffb17 	ldw	r2,-20(fp)
    b31c:	1005003a 	cmpeq	r2,r2,zero
    b320:	1000111e 	bne	r2,zero,b368 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b324:	e0bffb17 	ldw	r2,-20(fp)
    b328:	10800017 	ldw	r2,0(r2)
    b32c:	10800717 	ldw	r2,28(r2)
    b330:	1005003a 	cmpeq	r2,r2,zero
    b334:	1000091e 	bne	r2,zero,b35c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b338:	e0bffb17 	ldw	r2,-20(fp)
    b33c:	10800017 	ldw	r2,0(r2)
    b340:	10800717 	ldw	r2,28(r2)
    b344:	e13ffb17 	ldw	r4,-20(fp)
    b348:	e17ffd17 	ldw	r5,-12(fp)
    b34c:	e1bffe17 	ldw	r6,-8(fp)
    b350:	103ee83a 	callr	r2
    b354:	e0bffa15 	stw	r2,-24(fp)
    b358:	00000506 	br	b370 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b35c:	00bfde84 	movi	r2,-134
    b360:	e0bffa15 	stw	r2,-24(fp)
    b364:	00000206 	br	b370 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    b368:	00bfebc4 	movi	r2,-81
    b36c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    b370:	e0bffa17 	ldw	r2,-24(fp)
    b374:	1004403a 	cmpge	r2,r2,zero
    b378:	1000071e 	bne	r2,zero,b398 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    b37c:	000b3b00 	call	b3b0 <alt_get_errno>
    b380:	1007883a 	mov	r3,r2
    b384:	e0bffa17 	ldw	r2,-24(fp)
    b388:	0085c83a 	sub	r2,zero,r2
    b38c:	18800015 	stw	r2,0(r3)
    rc = -1;
    b390:	00bfffc4 	movi	r2,-1
    b394:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    b398:	e0bffa17 	ldw	r2,-24(fp)
}
    b39c:	e037883a 	mov	sp,fp
    b3a0:	dfc00117 	ldw	ra,4(sp)
    b3a4:	df000017 	ldw	fp,0(sp)
    b3a8:	dec00204 	addi	sp,sp,8
    b3ac:	f800283a 	ret

0000b3b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b3b0:	defffd04 	addi	sp,sp,-12
    b3b4:	dfc00215 	stw	ra,8(sp)
    b3b8:	df000115 	stw	fp,4(sp)
    b3bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b3c0:	00800074 	movhi	r2,1
    b3c4:	10bd4704 	addi	r2,r2,-2788
    b3c8:	10800017 	ldw	r2,0(r2)
    b3cc:	1005003a 	cmpeq	r2,r2,zero
    b3d0:	1000061e 	bne	r2,zero,b3ec <alt_get_errno+0x3c>
    b3d4:	00800074 	movhi	r2,1
    b3d8:	10bd4704 	addi	r2,r2,-2788
    b3dc:	10800017 	ldw	r2,0(r2)
    b3e0:	103ee83a 	callr	r2
    b3e4:	e0bfff15 	stw	r2,-4(fp)
    b3e8:	00000306 	br	b3f8 <alt_get_errno+0x48>
    b3ec:	00800074 	movhi	r2,1
    b3f0:	1083eb04 	addi	r2,r2,4012
    b3f4:	e0bfff15 	stw	r2,-4(fp)
    b3f8:	e0bfff17 	ldw	r2,-4(fp)
}
    b3fc:	e037883a 	mov	sp,fp
    b400:	dfc00117 	ldw	ra,4(sp)
    b404:	df000017 	ldw	fp,0(sp)
    b408:	dec00204 	addi	sp,sp,8
    b40c:	f800283a 	ret

0000b410 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b410:	defffd04 	addi	sp,sp,-12
    b414:	dfc00215 	stw	ra,8(sp)
    b418:	df000115 	stw	fp,4(sp)
    b41c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b420:	0009883a 	mov	r4,zero
    b424:	000ba7c0 	call	ba7c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b428:	000bab00 	call	bab0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b42c:	01000074 	movhi	r4,1
    b430:	2136ad04 	addi	r4,r4,-9548
    b434:	01400074 	movhi	r5,1
    b438:	2976ad04 	addi	r5,r5,-9548
    b43c:	01800074 	movhi	r6,1
    b440:	31b6ad04 	addi	r6,r6,-9548
    b444:	000cca80 	call	cca8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b448:	000c8200 	call	c820 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b44c:	01000074 	movhi	r4,1
    b450:	21322104 	addi	r4,r4,-14204
    b454:	000d3000 	call	d300 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b458:	d126b317 	ldw	r4,-25908(gp)
    b45c:	d166b417 	ldw	r5,-25904(gp)
    b460:	d1a6b517 	ldw	r6,-25900(gp)
    b464:	00007c00 	call	7c0 <main>
    b468:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b46c:	01000044 	movi	r4,1
    b470:	000ad980 	call	ad98 <close>
  exit (result);
    b474:	e13fff17 	ldw	r4,-4(fp)
    b478:	0000f900 	call	f90 <exit>

0000b47c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    b47c:	defffe04 	addi	sp,sp,-8
    b480:	df000115 	stw	fp,4(sp)
    b484:	df000104 	addi	fp,sp,4
    b488:	e13fff15 	stw	r4,-4(fp)
}
    b48c:	e037883a 	mov	sp,fp
    b490:	df000017 	ldw	fp,0(sp)
    b494:	dec00104 	addi	sp,sp,4
    b498:	f800283a 	ret

0000b49c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    b49c:	defffe04 	addi	sp,sp,-8
    b4a0:	df000115 	stw	fp,4(sp)
    b4a4:	df000104 	addi	fp,sp,4
    b4a8:	e13fff15 	stw	r4,-4(fp)
}
    b4ac:	e037883a 	mov	sp,fp
    b4b0:	df000017 	ldw	fp,0(sp)
    b4b4:	dec00104 	addi	sp,sp,4
    b4b8:	f800283a 	ret

0000b4bc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b4bc:	defff704 	addi	sp,sp,-36
    b4c0:	dfc00815 	stw	ra,32(sp)
    b4c4:	df000715 	stw	fp,28(sp)
    b4c8:	df000704 	addi	fp,sp,28
    b4cc:	e13ffb15 	stw	r4,-20(fp)
    b4d0:	e17ffc15 	stw	r5,-16(fp)
    b4d4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b4d8:	e0bffb17 	ldw	r2,-20(fp)
    b4dc:	1004803a 	cmplt	r2,r2,zero
    b4e0:	1000081e 	bne	r2,zero,b504 <read+0x48>
    b4e4:	e0bffb17 	ldw	r2,-20(fp)
    b4e8:	10800324 	muli	r2,r2,12
    b4ec:	1007883a 	mov	r3,r2
    b4f0:	00800074 	movhi	r2,1
    b4f4:	10b8c404 	addi	r2,r2,-7408
    b4f8:	1887883a 	add	r3,r3,r2
    b4fc:	e0ffff15 	stw	r3,-4(fp)
    b500:	00000106 	br	b508 <read+0x4c>
    b504:	e03fff15 	stw	zero,-4(fp)
    b508:	e0bfff17 	ldw	r2,-4(fp)
    b50c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b510:	e0bffa17 	ldw	r2,-24(fp)
    b514:	1005003a 	cmpeq	r2,r2,zero
    b518:	1000241e 	bne	r2,zero,b5ac <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b51c:	e0bffa17 	ldw	r2,-24(fp)
    b520:	10800217 	ldw	r2,8(r2)
    b524:	108000cc 	andi	r2,r2,3
    b528:	10800060 	cmpeqi	r2,r2,1
    b52c:	10001a1e 	bne	r2,zero,b598 <read+0xdc>
    b530:	e0bffa17 	ldw	r2,-24(fp)
    b534:	10800017 	ldw	r2,0(r2)
    b538:	10800517 	ldw	r2,20(r2)
    b53c:	1005003a 	cmpeq	r2,r2,zero
    b540:	1000151e 	bne	r2,zero,b598 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b544:	e0bffa17 	ldw	r2,-24(fp)
    b548:	10800017 	ldw	r2,0(r2)
    b54c:	10800517 	ldw	r2,20(r2)
    b550:	e17ffc17 	ldw	r5,-16(fp)
    b554:	e1bffd17 	ldw	r6,-12(fp)
    b558:	e13ffa17 	ldw	r4,-24(fp)
    b55c:	103ee83a 	callr	r2
    b560:	e0bff915 	stw	r2,-28(fp)
    b564:	e0bff917 	ldw	r2,-28(fp)
    b568:	1004403a 	cmpge	r2,r2,zero
    b56c:	1000071e 	bne	r2,zero,b58c <read+0xd0>
        {
          ALT_ERRNO = -rval;
    b570:	000b5dc0 	call	b5dc <alt_get_errno>
    b574:	e0fff917 	ldw	r3,-28(fp)
    b578:	00c7c83a 	sub	r3,zero,r3
    b57c:	10c00015 	stw	r3,0(r2)
          return -1;
    b580:	00bfffc4 	movi	r2,-1
    b584:	e0bffe15 	stw	r2,-8(fp)
    b588:	00000e06 	br	b5c4 <read+0x108>
        }
        return rval;
    b58c:	e0bff917 	ldw	r2,-28(fp)
    b590:	e0bffe15 	stw	r2,-8(fp)
    b594:	00000b06 	br	b5c4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b598:	000b5dc0 	call	b5dc <alt_get_errno>
    b59c:	1007883a 	mov	r3,r2
    b5a0:	00800344 	movi	r2,13
    b5a4:	18800015 	stw	r2,0(r3)
    b5a8:	00000406 	br	b5bc <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b5ac:	000b5dc0 	call	b5dc <alt_get_errno>
    b5b0:	1007883a 	mov	r3,r2
    b5b4:	00801444 	movi	r2,81
    b5b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b5bc:	00bfffc4 	movi	r2,-1
    b5c0:	e0bffe15 	stw	r2,-8(fp)
    b5c4:	e0bffe17 	ldw	r2,-8(fp)
}
    b5c8:	e037883a 	mov	sp,fp
    b5cc:	dfc00117 	ldw	ra,4(sp)
    b5d0:	df000017 	ldw	fp,0(sp)
    b5d4:	dec00204 	addi	sp,sp,8
    b5d8:	f800283a 	ret

0000b5dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b5dc:	defffd04 	addi	sp,sp,-12
    b5e0:	dfc00215 	stw	ra,8(sp)
    b5e4:	df000115 	stw	fp,4(sp)
    b5e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b5ec:	00800074 	movhi	r2,1
    b5f0:	10bd4704 	addi	r2,r2,-2788
    b5f4:	10800017 	ldw	r2,0(r2)
    b5f8:	1005003a 	cmpeq	r2,r2,zero
    b5fc:	1000061e 	bne	r2,zero,b618 <alt_get_errno+0x3c>
    b600:	00800074 	movhi	r2,1
    b604:	10bd4704 	addi	r2,r2,-2788
    b608:	10800017 	ldw	r2,0(r2)
    b60c:	103ee83a 	callr	r2
    b610:	e0bfff15 	stw	r2,-4(fp)
    b614:	00000306 	br	b624 <alt_get_errno+0x48>
    b618:	00800074 	movhi	r2,1
    b61c:	1083eb04 	addi	r2,r2,4012
    b620:	e0bfff15 	stw	r2,-4(fp)
    b624:	e0bfff17 	ldw	r2,-4(fp)
}
    b628:	e037883a 	mov	sp,fp
    b62c:	dfc00117 	ldw	ra,4(sp)
    b630:	df000017 	ldw	fp,0(sp)
    b634:	dec00204 	addi	sp,sp,8
    b638:	f800283a 	ret

0000b63c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b63c:	defffe04 	addi	sp,sp,-8
    b640:	df000115 	stw	fp,4(sp)
    b644:	df000104 	addi	fp,sp,4
    b648:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    b64c:	e0bfff17 	ldw	r2,-4(fp)
    b650:	108000d0 	cmplti	r2,r2,3
    b654:	10000d1e 	bne	r2,zero,b68c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    b658:	e0bfff17 	ldw	r2,-4(fp)
    b65c:	00c00074 	movhi	r3,1
    b660:	18f8c404 	addi	r3,r3,-7408
    b664:	10800324 	muli	r2,r2,12
    b668:	10c5883a 	add	r2,r2,r3
    b66c:	10800204 	addi	r2,r2,8
    b670:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    b674:	e0bfff17 	ldw	r2,-4(fp)
    b678:	00c00074 	movhi	r3,1
    b67c:	18f8c404 	addi	r3,r3,-7408
    b680:	10800324 	muli	r2,r2,12
    b684:	10c5883a 	add	r2,r2,r3
    b688:	10000015 	stw	zero,0(r2)
  }
}
    b68c:	e037883a 	mov	sp,fp
    b690:	df000017 	ldw	fp,0(sp)
    b694:	dec00104 	addi	sp,sp,4
    b698:	f800283a 	ret

0000b69c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b69c:	defff804 	addi	sp,sp,-32
    b6a0:	df000715 	stw	fp,28(sp)
    b6a4:	df000704 	addi	fp,sp,28
    b6a8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b6ac:	0005303a 	rdctl	r2,status
    b6b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b6b4:	e0fffb17 	ldw	r3,-20(fp)
    b6b8:	00bfff84 	movi	r2,-2
    b6bc:	1884703a 	and	r2,r3,r2
    b6c0:	1001703a 	wrctl	status,r2
  
  return context;
    b6c4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b6c8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b6cc:	d0a00c17 	ldw	r2,-32720(gp)
    b6d0:	10c000c4 	addi	r3,r2,3
    b6d4:	00bfff04 	movi	r2,-4
    b6d8:	1884703a 	and	r2,r3,r2
    b6dc:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b6e0:	d0e00c17 	ldw	r3,-32720(gp)
    b6e4:	e0bffe17 	ldw	r2,-8(fp)
    b6e8:	1887883a 	add	r3,r3,r2
    b6ec:	00802034 	movhi	r2,128
    b6f0:	10800004 	addi	r2,r2,0
    b6f4:	10c0072e 	bgeu	r2,r3,b714 <sbrk+0x78>
    b6f8:	e0bffd17 	ldw	r2,-12(fp)
    b6fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b700:	e0bffa17 	ldw	r2,-24(fp)
    b704:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b708:	00bfffc4 	movi	r2,-1
    b70c:	e0bfff15 	stw	r2,-4(fp)
    b710:	00000c06 	br	b744 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    b714:	d0a00c17 	ldw	r2,-32720(gp)
    b718:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    b71c:	d0e00c17 	ldw	r3,-32720(gp)
    b720:	e0bffe17 	ldw	r2,-8(fp)
    b724:	1885883a 	add	r2,r3,r2
    b728:	d0a00c15 	stw	r2,-32720(gp)
    b72c:	e0bffd17 	ldw	r2,-12(fp)
    b730:	e0bff915 	stw	r2,-28(fp)
    b734:	e0bff917 	ldw	r2,-28(fp)
    b738:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b73c:	e0bffc17 	ldw	r2,-16(fp)
    b740:	e0bfff15 	stw	r2,-4(fp)
    b744:	e0bfff17 	ldw	r2,-4(fp)
} 
    b748:	e037883a 	mov	sp,fp
    b74c:	df000017 	ldw	fp,0(sp)
    b750:	dec00104 	addi	sp,sp,4
    b754:	f800283a 	ret

0000b758 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    b758:	defffa04 	addi	sp,sp,-24
    b75c:	df000515 	stw	fp,20(sp)
    b760:	df000504 	addi	fp,sp,20
    b764:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b768:	0005303a 	rdctl	r2,status
    b76c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b770:	e0fffd17 	ldw	r3,-12(fp)
    b774:	00bfff84 	movi	r2,-2
    b778:	1884703a 	and	r2,r3,r2
    b77c:	1001703a 	wrctl	status,r2
  
  return context;
    b780:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    b784:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    b788:	e0bfff17 	ldw	r2,-4(fp)
    b78c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    b790:	e0bffc17 	ldw	r2,-16(fp)
    b794:	10c00017 	ldw	r3,0(r2)
    b798:	e0bffc17 	ldw	r2,-16(fp)
    b79c:	10800117 	ldw	r2,4(r2)
    b7a0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    b7a4:	e0bffc17 	ldw	r2,-16(fp)
    b7a8:	10c00117 	ldw	r3,4(r2)
    b7ac:	e0bffc17 	ldw	r2,-16(fp)
    b7b0:	10800017 	ldw	r2,0(r2)
    b7b4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    b7b8:	e0fffc17 	ldw	r3,-16(fp)
    b7bc:	e0bffc17 	ldw	r2,-16(fp)
    b7c0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    b7c4:	e0fffc17 	ldw	r3,-16(fp)
    b7c8:	e0bffc17 	ldw	r2,-16(fp)
    b7cc:	18800015 	stw	r2,0(r3)
    b7d0:	e0bffe17 	ldw	r2,-8(fp)
    b7d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b7d8:	e0bffb17 	ldw	r2,-20(fp)
    b7dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    b7e0:	e037883a 	mov	sp,fp
    b7e4:	df000017 	ldw	fp,0(sp)
    b7e8:	dec00104 	addi	sp,sp,4
    b7ec:	f800283a 	ret

0000b7f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    b7f0:	defffb04 	addi	sp,sp,-20
    b7f4:	dfc00415 	stw	ra,16(sp)
    b7f8:	df000315 	stw	fp,12(sp)
    b7fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    b800:	d0a00d17 	ldw	r2,-32716(gp)
    b804:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    b808:	d0a6b717 	ldw	r2,-25892(gp)
    b80c:	10800044 	addi	r2,r2,1
    b810:	d0a6b715 	stw	r2,-25892(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    b814:	00003106 	br	b8dc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    b818:	e0bffe17 	ldw	r2,-8(fp)
    b81c:	10800017 	ldw	r2,0(r2)
    b820:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    b824:	e0bffe17 	ldw	r2,-8(fp)
    b828:	10800403 	ldbu	r2,16(r2)
    b82c:	10803fcc 	andi	r2,r2,255
    b830:	1005003a 	cmpeq	r2,r2,zero
    b834:	1000051e 	bne	r2,zero,b84c <alt_tick+0x5c>
    b838:	d0a6b717 	ldw	r2,-25892(gp)
    b83c:	1004c03a 	cmpne	r2,r2,zero
    b840:	1000021e 	bne	r2,zero,b84c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    b844:	e0bffe17 	ldw	r2,-8(fp)
    b848:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    b84c:	e0bffe17 	ldw	r2,-8(fp)
    b850:	10c00217 	ldw	r3,8(r2)
    b854:	d0a6b717 	ldw	r2,-25892(gp)
    b858:	10c01e36 	bltu	r2,r3,b8d4 <alt_tick+0xe4>
    b85c:	e0bffe17 	ldw	r2,-8(fp)
    b860:	10800403 	ldbu	r2,16(r2)
    b864:	10803fcc 	andi	r2,r2,255
    b868:	1004c03a 	cmpne	r2,r2,zero
    b86c:	1000191e 	bne	r2,zero,b8d4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    b870:	e0bffe17 	ldw	r2,-8(fp)
    b874:	10c00317 	ldw	r3,12(r2)
    b878:	e0bffe17 	ldw	r2,-8(fp)
    b87c:	11000517 	ldw	r4,20(r2)
    b880:	183ee83a 	callr	r3
    b884:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    b888:	e0bffd17 	ldw	r2,-12(fp)
    b88c:	1004c03a 	cmpne	r2,r2,zero
    b890:	1000031e 	bne	r2,zero,b8a0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    b894:	e13ffe17 	ldw	r4,-8(fp)
    b898:	000b7580 	call	b758 <alt_alarm_stop>
    b89c:	00000d06 	br	b8d4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    b8a0:	e0bffe17 	ldw	r2,-8(fp)
    b8a4:	10c00217 	ldw	r3,8(r2)
    b8a8:	e0bffd17 	ldw	r2,-12(fp)
    b8ac:	1887883a 	add	r3,r3,r2
    b8b0:	e0bffe17 	ldw	r2,-8(fp)
    b8b4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    b8b8:	e0bffe17 	ldw	r2,-8(fp)
    b8bc:	10c00217 	ldw	r3,8(r2)
    b8c0:	d0a6b717 	ldw	r2,-25892(gp)
    b8c4:	1880032e 	bgeu	r3,r2,b8d4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    b8c8:	e0fffe17 	ldw	r3,-8(fp)
    b8cc:	00800044 	movi	r2,1
    b8d0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    b8d4:	e0bfff17 	ldw	r2,-4(fp)
    b8d8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    b8dc:	d0e00d04 	addi	r3,gp,-32716
    b8e0:	e0bffe17 	ldw	r2,-8(fp)
    b8e4:	10ffcc1e 	bne	r2,r3,b818 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    b8e8:	e037883a 	mov	sp,fp
    b8ec:	dfc00117 	ldw	ra,4(sp)
    b8f0:	df000017 	ldw	fp,0(sp)
    b8f4:	dec00204 	addi	sp,sp,8
    b8f8:	f800283a 	ret

0000b8fc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b8fc:	defff704 	addi	sp,sp,-36
    b900:	dfc00815 	stw	ra,32(sp)
    b904:	df000715 	stw	fp,28(sp)
    b908:	df000704 	addi	fp,sp,28
    b90c:	e13ffb15 	stw	r4,-20(fp)
    b910:	e17ffc15 	stw	r5,-16(fp)
    b914:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b918:	e0bffb17 	ldw	r2,-20(fp)
    b91c:	1004803a 	cmplt	r2,r2,zero
    b920:	1000081e 	bne	r2,zero,b944 <write+0x48>
    b924:	e0bffb17 	ldw	r2,-20(fp)
    b928:	10800324 	muli	r2,r2,12
    b92c:	1007883a 	mov	r3,r2
    b930:	00800074 	movhi	r2,1
    b934:	10b8c404 	addi	r2,r2,-7408
    b938:	1887883a 	add	r3,r3,r2
    b93c:	e0ffff15 	stw	r3,-4(fp)
    b940:	00000106 	br	b948 <write+0x4c>
    b944:	e03fff15 	stw	zero,-4(fp)
    b948:	e0bfff17 	ldw	r2,-4(fp)
    b94c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b950:	e0bffa17 	ldw	r2,-24(fp)
    b954:	1005003a 	cmpeq	r2,r2,zero
    b958:	1000241e 	bne	r2,zero,b9ec <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b95c:	e0bffa17 	ldw	r2,-24(fp)
    b960:	10800217 	ldw	r2,8(r2)
    b964:	108000cc 	andi	r2,r2,3
    b968:	1005003a 	cmpeq	r2,r2,zero
    b96c:	10001a1e 	bne	r2,zero,b9d8 <write+0xdc>
    b970:	e0bffa17 	ldw	r2,-24(fp)
    b974:	10800017 	ldw	r2,0(r2)
    b978:	10800617 	ldw	r2,24(r2)
    b97c:	1005003a 	cmpeq	r2,r2,zero
    b980:	1000151e 	bne	r2,zero,b9d8 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b984:	e0bffa17 	ldw	r2,-24(fp)
    b988:	10800017 	ldw	r2,0(r2)
    b98c:	10800617 	ldw	r2,24(r2)
    b990:	e17ffc17 	ldw	r5,-16(fp)
    b994:	e1bffd17 	ldw	r6,-12(fp)
    b998:	e13ffa17 	ldw	r4,-24(fp)
    b99c:	103ee83a 	callr	r2
    b9a0:	e0bff915 	stw	r2,-28(fp)
    b9a4:	e0bff917 	ldw	r2,-28(fp)
    b9a8:	1004403a 	cmpge	r2,r2,zero
    b9ac:	1000071e 	bne	r2,zero,b9cc <write+0xd0>
      {
        ALT_ERRNO = -rval;
    b9b0:	000ba1c0 	call	ba1c <alt_get_errno>
    b9b4:	e0fff917 	ldw	r3,-28(fp)
    b9b8:	00c7c83a 	sub	r3,zero,r3
    b9bc:	10c00015 	stw	r3,0(r2)
        return -1;
    b9c0:	00bfffc4 	movi	r2,-1
    b9c4:	e0bffe15 	stw	r2,-8(fp)
    b9c8:	00000e06 	br	ba04 <write+0x108>
      }
      return rval;
    b9cc:	e0bff917 	ldw	r2,-28(fp)
    b9d0:	e0bffe15 	stw	r2,-8(fp)
    b9d4:	00000b06 	br	ba04 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b9d8:	000ba1c0 	call	ba1c <alt_get_errno>
    b9dc:	1007883a 	mov	r3,r2
    b9e0:	00800344 	movi	r2,13
    b9e4:	18800015 	stw	r2,0(r3)
    b9e8:	00000406 	br	b9fc <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b9ec:	000ba1c0 	call	ba1c <alt_get_errno>
    b9f0:	1007883a 	mov	r3,r2
    b9f4:	00801444 	movi	r2,81
    b9f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b9fc:	00bfffc4 	movi	r2,-1
    ba00:	e0bffe15 	stw	r2,-8(fp)
    ba04:	e0bffe17 	ldw	r2,-8(fp)
}
    ba08:	e037883a 	mov	sp,fp
    ba0c:	dfc00117 	ldw	ra,4(sp)
    ba10:	df000017 	ldw	fp,0(sp)
    ba14:	dec00204 	addi	sp,sp,8
    ba18:	f800283a 	ret

0000ba1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ba1c:	defffd04 	addi	sp,sp,-12
    ba20:	dfc00215 	stw	ra,8(sp)
    ba24:	df000115 	stw	fp,4(sp)
    ba28:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ba2c:	00800074 	movhi	r2,1
    ba30:	10bd4704 	addi	r2,r2,-2788
    ba34:	10800017 	ldw	r2,0(r2)
    ba38:	1005003a 	cmpeq	r2,r2,zero
    ba3c:	1000061e 	bne	r2,zero,ba58 <alt_get_errno+0x3c>
    ba40:	00800074 	movhi	r2,1
    ba44:	10bd4704 	addi	r2,r2,-2788
    ba48:	10800017 	ldw	r2,0(r2)
    ba4c:	103ee83a 	callr	r2
    ba50:	e0bfff15 	stw	r2,-4(fp)
    ba54:	00000306 	br	ba64 <alt_get_errno+0x48>
    ba58:	00800074 	movhi	r2,1
    ba5c:	1083eb04 	addi	r2,r2,4012
    ba60:	e0bfff15 	stw	r2,-4(fp)
    ba64:	e0bfff17 	ldw	r2,-4(fp)
}
    ba68:	e037883a 	mov	sp,fp
    ba6c:	dfc00117 	ldw	ra,4(sp)
    ba70:	df000017 	ldw	fp,0(sp)
    ba74:	dec00204 	addi	sp,sp,8
    ba78:	f800283a 	ret

0000ba7c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ba7c:	defffd04 	addi	sp,sp,-12
    ba80:	dfc00215 	stw	ra,8(sp)
    ba84:	df000115 	stw	fp,4(sp)
    ba88:	df000104 	addi	fp,sp,4
    ba8c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, CPU);
    ba90:	000cfe40 	call	cfe4 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ba94:	00800044 	movi	r2,1
    ba98:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ba9c:	e037883a 	mov	sp,fp
    baa0:	dfc00117 	ldw	ra,4(sp)
    baa4:	df000017 	ldw	fp,0(sp)
    baa8:	dec00204 	addi	sp,sp,8
    baac:	f800283a 	ret

0000bab0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    bab0:	defffe04 	addi	sp,sp,-8
    bab4:	dfc00115 	stw	ra,4(sp)
    bab8:	df000015 	stw	fp,0(sp)
    babc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_timer);
    bac0:	01040034 	movhi	r4,4096
    bac4:	21080004 	addi	r4,r4,8192
    bac8:	000b883a 	mov	r5,zero
    bacc:	000d883a 	mov	r6,zero
    bad0:	01c00204 	movi	r7,8
    bad4:	000c6600 	call	c660 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    bad8:	01000074 	movhi	r4,1
    badc:	21392e04 	addi	r4,r4,-6984
    bae0:	000b883a 	mov	r5,zero
    bae4:	01800204 	movi	r6,8
    bae8:	000bc8c0 	call	bc8c <altera_avalon_jtag_uart_init>
    baec:	01000074 	movhi	r4,1
    baf0:	21392404 	addi	r4,r4,-7024
    baf4:	000bb0c0 	call	bb0c <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
    baf8:	e037883a 	mov	sp,fp
    bafc:	dfc00117 	ldw	ra,4(sp)
    bb00:	df000017 	ldw	fp,0(sp)
    bb04:	dec00204 	addi	sp,sp,8
    bb08:	f800283a 	ret

0000bb0c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    bb0c:	defffd04 	addi	sp,sp,-12
    bb10:	dfc00215 	stw	ra,8(sp)
    bb14:	df000115 	stw	fp,4(sp)
    bb18:	df000104 	addi	fp,sp,4
    bb1c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    bb20:	e13fff17 	ldw	r4,-4(fp)
    bb24:	01400074 	movhi	r5,1
    bb28:	297d4404 	addi	r5,r5,-2800
    bb2c:	000c70c0 	call	c70c <alt_dev_llist_insert>
}
    bb30:	e037883a 	mov	sp,fp
    bb34:	dfc00117 	ldw	ra,4(sp)
    bb38:	df000017 	ldw	fp,0(sp)
    bb3c:	dec00204 	addi	sp,sp,8
    bb40:	f800283a 	ret

0000bb44 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    bb44:	defffa04 	addi	sp,sp,-24
    bb48:	dfc00515 	stw	ra,20(sp)
    bb4c:	df000415 	stw	fp,16(sp)
    bb50:	df000404 	addi	fp,sp,16
    bb54:	e13ffd15 	stw	r4,-12(fp)
    bb58:	e17ffe15 	stw	r5,-8(fp)
    bb5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bb60:	e0bffd17 	ldw	r2,-12(fp)
    bb64:	10800017 	ldw	r2,0(r2)
    bb68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    bb6c:	e0bffc17 	ldw	r2,-16(fp)
    bb70:	11000a04 	addi	r4,r2,40
    bb74:	e0bffd17 	ldw	r2,-12(fp)
    bb78:	11c00217 	ldw	r7,8(r2)
    bb7c:	e17ffe17 	ldw	r5,-8(fp)
    bb80:	e1bfff17 	ldw	r6,-4(fp)
    bb84:	000c18c0 	call	c18c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    bb88:	e037883a 	mov	sp,fp
    bb8c:	dfc00117 	ldw	ra,4(sp)
    bb90:	df000017 	ldw	fp,0(sp)
    bb94:	dec00204 	addi	sp,sp,8
    bb98:	f800283a 	ret

0000bb9c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    bb9c:	defffa04 	addi	sp,sp,-24
    bba0:	dfc00515 	stw	ra,20(sp)
    bba4:	df000415 	stw	fp,16(sp)
    bba8:	df000404 	addi	fp,sp,16
    bbac:	e13ffd15 	stw	r4,-12(fp)
    bbb0:	e17ffe15 	stw	r5,-8(fp)
    bbb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bbb8:	e0bffd17 	ldw	r2,-12(fp)
    bbbc:	10800017 	ldw	r2,0(r2)
    bbc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    bbc4:	e0bffc17 	ldw	r2,-16(fp)
    bbc8:	11000a04 	addi	r4,r2,40
    bbcc:	e0bffd17 	ldw	r2,-12(fp)
    bbd0:	11c00217 	ldw	r7,8(r2)
    bbd4:	e17ffe17 	ldw	r5,-8(fp)
    bbd8:	e1bfff17 	ldw	r6,-4(fp)
    bbdc:	000c3b00 	call	c3b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    bbe0:	e037883a 	mov	sp,fp
    bbe4:	dfc00117 	ldw	ra,4(sp)
    bbe8:	df000017 	ldw	fp,0(sp)
    bbec:	dec00204 	addi	sp,sp,8
    bbf0:	f800283a 	ret

0000bbf4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    bbf4:	defffc04 	addi	sp,sp,-16
    bbf8:	dfc00315 	stw	ra,12(sp)
    bbfc:	df000215 	stw	fp,8(sp)
    bc00:	df000204 	addi	fp,sp,8
    bc04:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bc08:	e0bfff17 	ldw	r2,-4(fp)
    bc0c:	10800017 	ldw	r2,0(r2)
    bc10:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    bc14:	e0bffe17 	ldw	r2,-8(fp)
    bc18:	11000a04 	addi	r4,r2,40
    bc1c:	e0bfff17 	ldw	r2,-4(fp)
    bc20:	11400217 	ldw	r5,8(r2)
    bc24:	000c0240 	call	c024 <altera_avalon_jtag_uart_close>
}
    bc28:	e037883a 	mov	sp,fp
    bc2c:	dfc00117 	ldw	ra,4(sp)
    bc30:	df000017 	ldw	fp,0(sp)
    bc34:	dec00204 	addi	sp,sp,8
    bc38:	f800283a 	ret

0000bc3c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    bc3c:	defffa04 	addi	sp,sp,-24
    bc40:	dfc00515 	stw	ra,20(sp)
    bc44:	df000415 	stw	fp,16(sp)
    bc48:	df000404 	addi	fp,sp,16
    bc4c:	e13ffd15 	stw	r4,-12(fp)
    bc50:	e17ffe15 	stw	r5,-8(fp)
    bc54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    bc58:	e0bffd17 	ldw	r2,-12(fp)
    bc5c:	10800017 	ldw	r2,0(r2)
    bc60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    bc64:	e0bffc17 	ldw	r2,-16(fp)
    bc68:	11000a04 	addi	r4,r2,40
    bc6c:	e17ffe17 	ldw	r5,-8(fp)
    bc70:	e1bfff17 	ldw	r6,-4(fp)
    bc74:	000c0980 	call	c098 <altera_avalon_jtag_uart_ioctl>
}
    bc78:	e037883a 	mov	sp,fp
    bc7c:	dfc00117 	ldw	ra,4(sp)
    bc80:	df000017 	ldw	fp,0(sp)
    bc84:	dec00204 	addi	sp,sp,8
    bc88:	f800283a 	ret

0000bc8c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    bc8c:	defffa04 	addi	sp,sp,-24
    bc90:	dfc00515 	stw	ra,20(sp)
    bc94:	df000415 	stw	fp,16(sp)
    bc98:	df000404 	addi	fp,sp,16
    bc9c:	e13ffd15 	stw	r4,-12(fp)
    bca0:	e17ffe15 	stw	r5,-8(fp)
    bca4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bca8:	e0fffd17 	ldw	r3,-12(fp)
    bcac:	00800044 	movi	r2,1
    bcb0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    bcb4:	e0bffd17 	ldw	r2,-12(fp)
    bcb8:	10800017 	ldw	r2,0(r2)
    bcbc:	11000104 	addi	r4,r2,4
    bcc0:	e0bffd17 	ldw	r2,-12(fp)
    bcc4:	10800817 	ldw	r2,32(r2)
    bcc8:	1007883a 	mov	r3,r2
    bccc:	2005883a 	mov	r2,r4
    bcd0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    bcd4:	e13ffe17 	ldw	r4,-8(fp)
    bcd8:	e17fff17 	ldw	r5,-4(fp)
    bcdc:	d8000015 	stw	zero,0(sp)
    bce0:	01800074 	movhi	r6,1
    bce4:	31af5304 	addi	r6,r6,-17076
    bce8:	e1fffd17 	ldw	r7,-12(fp)
    bcec:	000c9180 	call	c918 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    bcf0:	e0bffd17 	ldw	r2,-12(fp)
    bcf4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    bcf8:	e0bffd17 	ldw	r2,-12(fp)
    bcfc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    bd00:	00800074 	movhi	r2,1
    bd04:	1083f204 	addi	r2,r2,4040
    bd08:	10800017 	ldw	r2,0(r2)
    bd0c:	100b883a 	mov	r5,r2
    bd10:	01800074 	movhi	r6,1
    bd14:	31afdd04 	addi	r6,r6,-16524
    bd18:	e1fffd17 	ldw	r7,-12(fp)
    bd1c:	000ac440 	call	ac44 <alt_alarm_start>
    bd20:	1004403a 	cmpge	r2,r2,zero
    bd24:	1000041e 	bne	r2,zero,bd38 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    bd28:	e0fffd17 	ldw	r3,-12(fp)
    bd2c:	00a00034 	movhi	r2,32768
    bd30:	10bfffc4 	addi	r2,r2,-1
    bd34:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    bd38:	e037883a 	mov	sp,fp
    bd3c:	dfc00117 	ldw	ra,4(sp)
    bd40:	df000017 	ldw	fp,0(sp)
    bd44:	dec00204 	addi	sp,sp,8
    bd48:	f800283a 	ret

0000bd4c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    bd4c:	defff804 	addi	sp,sp,-32
    bd50:	df000715 	stw	fp,28(sp)
    bd54:	df000704 	addi	fp,sp,28
    bd58:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    bd5c:	e0bfff17 	ldw	r2,-4(fp)
    bd60:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    bd64:	e0bffe17 	ldw	r2,-8(fp)
    bd68:	10800017 	ldw	r2,0(r2)
    bd6c:	e0bffd15 	stw	r2,-12(fp)
    bd70:	00000006 	br	bd74 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    bd74:	e0bffd17 	ldw	r2,-12(fp)
    bd78:	10800104 	addi	r2,r2,4
    bd7c:	10800037 	ldwio	r2,0(r2)
    bd80:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    bd84:	e0bffc17 	ldw	r2,-16(fp)
    bd88:	1080c00c 	andi	r2,r2,768
    bd8c:	1005003a 	cmpeq	r2,r2,zero
    bd90:	1000741e 	bne	r2,zero,bf64 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    bd94:	e0bffc17 	ldw	r2,-16(fp)
    bd98:	1080400c 	andi	r2,r2,256
    bd9c:	1005003a 	cmpeq	r2,r2,zero
    bda0:	1000351e 	bne	r2,zero,be78 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    bda4:	00800074 	movhi	r2,1
    bda8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bdac:	e0bffe17 	ldw	r2,-8(fp)
    bdb0:	10800a17 	ldw	r2,40(r2)
    bdb4:	10800044 	addi	r2,r2,1
    bdb8:	1081ffcc 	andi	r2,r2,2047
    bdbc:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    bdc0:	e0bffe17 	ldw	r2,-8(fp)
    bdc4:	10c00b17 	ldw	r3,44(r2)
    bdc8:	e0bffa17 	ldw	r2,-24(fp)
    bdcc:	18801626 	beq	r3,r2,be28 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    bdd0:	e0bffd17 	ldw	r2,-12(fp)
    bdd4:	10800037 	ldwio	r2,0(r2)
    bdd8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    bddc:	e0bffb17 	ldw	r2,-20(fp)
    bde0:	10a0000c 	andi	r2,r2,32768
    bde4:	1005003a 	cmpeq	r2,r2,zero
    bde8:	10000f1e 	bne	r2,zero,be28 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    bdec:	e0bffe17 	ldw	r2,-8(fp)
    bdf0:	10c00a17 	ldw	r3,40(r2)
    bdf4:	e0bffb17 	ldw	r2,-20(fp)
    bdf8:	1009883a 	mov	r4,r2
    bdfc:	e0bffe17 	ldw	r2,-8(fp)
    be00:	1885883a 	add	r2,r3,r2
    be04:	10800e04 	addi	r2,r2,56
    be08:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    be0c:	e0bffe17 	ldw	r2,-8(fp)
    be10:	10800a17 	ldw	r2,40(r2)
    be14:	10800044 	addi	r2,r2,1
    be18:	10c1ffcc 	andi	r3,r2,2047
    be1c:	e0bffe17 	ldw	r2,-8(fp)
    be20:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    be24:	003fe106 	br	bdac <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    be28:	e0bffb17 	ldw	r2,-20(fp)
    be2c:	10bfffec 	andhi	r2,r2,65535
    be30:	1005003a 	cmpeq	r2,r2,zero
    be34:	1000101e 	bne	r2,zero,be78 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    be38:	e0bffe17 	ldw	r2,-8(fp)
    be3c:	10c00817 	ldw	r3,32(r2)
    be40:	00bfff84 	movi	r2,-2
    be44:	1886703a 	and	r3,r3,r2
    be48:	e0bffe17 	ldw	r2,-8(fp)
    be4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    be50:	e0bffd17 	ldw	r2,-12(fp)
    be54:	11000104 	addi	r4,r2,4
    be58:	e0bffe17 	ldw	r2,-8(fp)
    be5c:	10800817 	ldw	r2,32(r2)
    be60:	1007883a 	mov	r3,r2
    be64:	2005883a 	mov	r2,r4
    be68:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    be6c:	e0bffd17 	ldw	r2,-12(fp)
    be70:	10800104 	addi	r2,r2,4
    be74:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    be78:	e0bffc17 	ldw	r2,-16(fp)
    be7c:	1080800c 	andi	r2,r2,512
    be80:	1005003a 	cmpeq	r2,r2,zero
    be84:	103fbb1e 	bne	r2,zero,bd74 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    be88:	e0bffc17 	ldw	r2,-16(fp)
    be8c:	10bfffec 	andhi	r2,r2,65535
    be90:	1004d43a 	srli	r2,r2,16
    be94:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    be98:	00001506 	br	bef0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    be9c:	e13ffd17 	ldw	r4,-12(fp)
    bea0:	e0bffe17 	ldw	r2,-8(fp)
    bea4:	10c00d17 	ldw	r3,52(r2)
    bea8:	e0bffe17 	ldw	r2,-8(fp)
    beac:	1885883a 	add	r2,r3,r2
    beb0:	10820e04 	addi	r2,r2,2104
    beb4:	10800003 	ldbu	r2,0(r2)
    beb8:	10c03fcc 	andi	r3,r2,255
    bebc:	18c0201c 	xori	r3,r3,128
    bec0:	18ffe004 	addi	r3,r3,-128
    bec4:	2005883a 	mov	r2,r4
    bec8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    becc:	e0bffe17 	ldw	r2,-8(fp)
    bed0:	10800d17 	ldw	r2,52(r2)
    bed4:	10800044 	addi	r2,r2,1
    bed8:	10c1ffcc 	andi	r3,r2,2047
    bedc:	e0bffe17 	ldw	r2,-8(fp)
    bee0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    bee4:	e0bff917 	ldw	r2,-28(fp)
    bee8:	10bfffc4 	addi	r2,r2,-1
    beec:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    bef0:	e0bff917 	ldw	r2,-28(fp)
    bef4:	1005003a 	cmpeq	r2,r2,zero
    bef8:	1000051e 	bne	r2,zero,bf10 <altera_avalon_jtag_uart_irq+0x1c4>
    befc:	e0bffe17 	ldw	r2,-8(fp)
    bf00:	10c00d17 	ldw	r3,52(r2)
    bf04:	e0bffe17 	ldw	r2,-8(fp)
    bf08:	10800c17 	ldw	r2,48(r2)
    bf0c:	18bfe31e 	bne	r3,r2,be9c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    bf10:	e0bff917 	ldw	r2,-28(fp)
    bf14:	1005003a 	cmpeq	r2,r2,zero
    bf18:	103f961e 	bne	r2,zero,bd74 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    bf1c:	e0bffe17 	ldw	r2,-8(fp)
    bf20:	10c00817 	ldw	r3,32(r2)
    bf24:	00bfff44 	movi	r2,-3
    bf28:	1886703a 	and	r3,r3,r2
    bf2c:	e0bffe17 	ldw	r2,-8(fp)
    bf30:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bf34:	e0bffe17 	ldw	r2,-8(fp)
    bf38:	10800017 	ldw	r2,0(r2)
    bf3c:	11000104 	addi	r4,r2,4
    bf40:	e0bffe17 	ldw	r2,-8(fp)
    bf44:	10800817 	ldw	r2,32(r2)
    bf48:	1007883a 	mov	r3,r2
    bf4c:	2005883a 	mov	r2,r4
    bf50:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    bf54:	e0bffd17 	ldw	r2,-12(fp)
    bf58:	10800104 	addi	r2,r2,4
    bf5c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    bf60:	003f8406 	br	bd74 <altera_avalon_jtag_uart_irq+0x28>
}
    bf64:	e037883a 	mov	sp,fp
    bf68:	df000017 	ldw	fp,0(sp)
    bf6c:	dec00104 	addi	sp,sp,4
    bf70:	f800283a 	ret

0000bf74 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    bf74:	defffc04 	addi	sp,sp,-16
    bf78:	df000315 	stw	fp,12(sp)
    bf7c:	df000304 	addi	fp,sp,12
    bf80:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    bf84:	e0bfff17 	ldw	r2,-4(fp)
    bf88:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    bf8c:	e0bffe17 	ldw	r2,-8(fp)
    bf90:	10800017 	ldw	r2,0(r2)
    bf94:	10800104 	addi	r2,r2,4
    bf98:	10800037 	ldwio	r2,0(r2)
    bf9c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    bfa0:	e0bffd17 	ldw	r2,-12(fp)
    bfa4:	1081000c 	andi	r2,r2,1024
    bfa8:	1005003a 	cmpeq	r2,r2,zero
    bfac:	10000c1e 	bne	r2,zero,bfe0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    bfb0:	e0bffe17 	ldw	r2,-8(fp)
    bfb4:	10800017 	ldw	r2,0(r2)
    bfb8:	11000104 	addi	r4,r2,4
    bfbc:	e0bffe17 	ldw	r2,-8(fp)
    bfc0:	10800817 	ldw	r2,32(r2)
    bfc4:	10810014 	ori	r2,r2,1024
    bfc8:	1007883a 	mov	r3,r2
    bfcc:	2005883a 	mov	r2,r4
    bfd0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    bfd4:	e0bffe17 	ldw	r2,-8(fp)
    bfd8:	10000915 	stw	zero,36(r2)
    bfdc:	00000a06 	br	c008 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    bfe0:	e0bffe17 	ldw	r2,-8(fp)
    bfe4:	10c00917 	ldw	r3,36(r2)
    bfe8:	00a00034 	movhi	r2,32768
    bfec:	10bfff04 	addi	r2,r2,-4
    bff0:	10c00536 	bltu	r2,r3,c008 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    bff4:	e0bffe17 	ldw	r2,-8(fp)
    bff8:	10800917 	ldw	r2,36(r2)
    bffc:	10c00044 	addi	r3,r2,1
    c000:	e0bffe17 	ldw	r2,-8(fp)
    c004:	10c00915 	stw	r3,36(r2)
    c008:	00800074 	movhi	r2,1
    c00c:	1083f204 	addi	r2,r2,4040
    c010:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    c014:	e037883a 	mov	sp,fp
    c018:	df000017 	ldw	fp,0(sp)
    c01c:	dec00104 	addi	sp,sp,4
    c020:	f800283a 	ret

0000c024 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    c024:	defffc04 	addi	sp,sp,-16
    c028:	df000315 	stw	fp,12(sp)
    c02c:	df000304 	addi	fp,sp,12
    c030:	e13ffd15 	stw	r4,-12(fp)
    c034:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c038:	00000706 	br	c058 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    c03c:	e0bffe17 	ldw	r2,-8(fp)
    c040:	1090000c 	andi	r2,r2,16384
    c044:	1005003a 	cmpeq	r2,r2,zero
    c048:	1000031e 	bne	r2,zero,c058 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    c04c:	00bffd44 	movi	r2,-11
    c050:	e0bfff15 	stw	r2,-4(fp)
    c054:	00000b06 	br	c084 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c058:	e0bffd17 	ldw	r2,-12(fp)
    c05c:	10c00d17 	ldw	r3,52(r2)
    c060:	e0bffd17 	ldw	r2,-12(fp)
    c064:	10800c17 	ldw	r2,48(r2)
    c068:	18800526 	beq	r3,r2,c080 <altera_avalon_jtag_uart_close+0x5c>
    c06c:	e0bffd17 	ldw	r2,-12(fp)
    c070:	10c00917 	ldw	r3,36(r2)
    c074:	e0bffd17 	ldw	r2,-12(fp)
    c078:	10800117 	ldw	r2,4(r2)
    c07c:	18bfef36 	bltu	r3,r2,c03c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    c080:	e03fff15 	stw	zero,-4(fp)
    c084:	e0bfff17 	ldw	r2,-4(fp)
}
    c088:	e037883a 	mov	sp,fp
    c08c:	df000017 	ldw	fp,0(sp)
    c090:	dec00104 	addi	sp,sp,4
    c094:	f800283a 	ret

0000c098 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    c098:	defff804 	addi	sp,sp,-32
    c09c:	df000715 	stw	fp,28(sp)
    c0a0:	df000704 	addi	fp,sp,28
    c0a4:	e13ffb15 	stw	r4,-20(fp)
    c0a8:	e17ffc15 	stw	r5,-16(fp)
    c0ac:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    c0b0:	00bff9c4 	movi	r2,-25
    c0b4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    c0b8:	e0bffc17 	ldw	r2,-16(fp)
    c0bc:	e0bfff15 	stw	r2,-4(fp)
    c0c0:	e0ffff17 	ldw	r3,-4(fp)
    c0c4:	189a8060 	cmpeqi	r2,r3,27137
    c0c8:	1000041e 	bne	r2,zero,c0dc <altera_avalon_jtag_uart_ioctl+0x44>
    c0cc:	e0ffff17 	ldw	r3,-4(fp)
    c0d0:	189a80a0 	cmpeqi	r2,r3,27138
    c0d4:	10001b1e 	bne	r2,zero,c144 <altera_avalon_jtag_uart_ioctl+0xac>
    c0d8:	00002706 	br	c178 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    c0dc:	e0bffb17 	ldw	r2,-20(fp)
    c0e0:	10c00117 	ldw	r3,4(r2)
    c0e4:	00a00034 	movhi	r2,32768
    c0e8:	10bfffc4 	addi	r2,r2,-1
    c0ec:	18802226 	beq	r3,r2,c178 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    c0f0:	e0bffd17 	ldw	r2,-12(fp)
    c0f4:	10800017 	ldw	r2,0(r2)
    c0f8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    c0fc:	e0bff917 	ldw	r2,-28(fp)
    c100:	10800090 	cmplti	r2,r2,2
    c104:	1000071e 	bne	r2,zero,c124 <altera_avalon_jtag_uart_ioctl+0x8c>
    c108:	e0fff917 	ldw	r3,-28(fp)
    c10c:	00a00034 	movhi	r2,32768
    c110:	10bfffc4 	addi	r2,r2,-1
    c114:	18800326 	beq	r3,r2,c124 <altera_avalon_jtag_uart_ioctl+0x8c>
    c118:	e0bff917 	ldw	r2,-28(fp)
    c11c:	e0bffe15 	stw	r2,-8(fp)
    c120:	00000306 	br	c130 <altera_avalon_jtag_uart_ioctl+0x98>
    c124:	00e00034 	movhi	r3,32768
    c128:	18ffff84 	addi	r3,r3,-2
    c12c:	e0fffe15 	stw	r3,-8(fp)
    c130:	e0bffb17 	ldw	r2,-20(fp)
    c134:	e0fffe17 	ldw	r3,-8(fp)
    c138:	10c00115 	stw	r3,4(r2)
      rc = 0;
    c13c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    c140:	00000d06 	br	c178 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    c144:	e0bffb17 	ldw	r2,-20(fp)
    c148:	10c00117 	ldw	r3,4(r2)
    c14c:	00a00034 	movhi	r2,32768
    c150:	10bfffc4 	addi	r2,r2,-1
    c154:	18800826 	beq	r3,r2,c178 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    c158:	e13ffd17 	ldw	r4,-12(fp)
    c15c:	e0bffb17 	ldw	r2,-20(fp)
    c160:	10c00917 	ldw	r3,36(r2)
    c164:	e0bffb17 	ldw	r2,-20(fp)
    c168:	10800117 	ldw	r2,4(r2)
    c16c:	1885803a 	cmpltu	r2,r3,r2
    c170:	20800015 	stw	r2,0(r4)
      rc = 0;
    c174:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    c178:	e0bffa17 	ldw	r2,-24(fp)
}
    c17c:	e037883a 	mov	sp,fp
    c180:	df000017 	ldw	fp,0(sp)
    c184:	dec00104 	addi	sp,sp,4
    c188:	f800283a 	ret

0000c18c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    c18c:	defff204 	addi	sp,sp,-56
    c190:	dfc00d15 	stw	ra,52(sp)
    c194:	df000c15 	stw	fp,48(sp)
    c198:	df000c04 	addi	fp,sp,48
    c19c:	e13ffb15 	stw	r4,-20(fp)
    c1a0:	e17ffc15 	stw	r5,-16(fp)
    c1a4:	e1bffd15 	stw	r6,-12(fp)
    c1a8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    c1ac:	e0bffc17 	ldw	r2,-16(fp)
    c1b0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c1b4:	00004806 	br	c2d8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c1b8:	e0bffb17 	ldw	r2,-20(fp)
    c1bc:	10800a17 	ldw	r2,40(r2)
    c1c0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    c1c4:	e0bffb17 	ldw	r2,-20(fp)
    c1c8:	10800b17 	ldw	r2,44(r2)
    c1cc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    c1d0:	e0fff717 	ldw	r3,-36(fp)
    c1d4:	e0bff617 	ldw	r2,-40(fp)
    c1d8:	18800536 	bltu	r3,r2,c1f0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    c1dc:	e0bff717 	ldw	r2,-36(fp)
    c1e0:	e0fff617 	ldw	r3,-40(fp)
    c1e4:	10c5c83a 	sub	r2,r2,r3
    c1e8:	e0bff815 	stw	r2,-32(fp)
    c1ec:	00000406 	br	c200 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c1f0:	00820004 	movi	r2,2048
    c1f4:	e0fff617 	ldw	r3,-40(fp)
    c1f8:	10c5c83a 	sub	r2,r2,r3
    c1fc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c200:	e0bff817 	ldw	r2,-32(fp)
    c204:	1005003a 	cmpeq	r2,r2,zero
    c208:	10001f1e 	bne	r2,zero,c288 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    c20c:	e0fffd17 	ldw	r3,-12(fp)
    c210:	e0bff817 	ldw	r2,-32(fp)
    c214:	1880022e 	bgeu	r3,r2,c220 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    c218:	e0bffd17 	ldw	r2,-12(fp)
    c21c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    c220:	e0bffb17 	ldw	r2,-20(fp)
    c224:	10c00e04 	addi	r3,r2,56
    c228:	e0bff617 	ldw	r2,-40(fp)
    c22c:	1887883a 	add	r3,r3,r2
    c230:	e0bffa17 	ldw	r2,-24(fp)
    c234:	1009883a 	mov	r4,r2
    c238:	180b883a 	mov	r5,r3
    c23c:	e1bff817 	ldw	r6,-32(fp)
    c240:	00065d00 	call	65d0 <memcpy>
      ptr   += n;
    c244:	e0fff817 	ldw	r3,-32(fp)
    c248:	e0bffa17 	ldw	r2,-24(fp)
    c24c:	10c5883a 	add	r2,r2,r3
    c250:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    c254:	e0fffd17 	ldw	r3,-12(fp)
    c258:	e0bff817 	ldw	r2,-32(fp)
    c25c:	1885c83a 	sub	r2,r3,r2
    c260:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c264:	e0fff617 	ldw	r3,-40(fp)
    c268:	e0bff817 	ldw	r2,-32(fp)
    c26c:	1885883a 	add	r2,r3,r2
    c270:	10c1ffcc 	andi	r3,r2,2047
    c274:	e0bffb17 	ldw	r2,-20(fp)
    c278:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    c27c:	e0bffd17 	ldw	r2,-12(fp)
    c280:	10800048 	cmpgei	r2,r2,1
    c284:	103fcc1e 	bne	r2,zero,c1b8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    c288:	e0fffa17 	ldw	r3,-24(fp)
    c28c:	e0bffc17 	ldw	r2,-16(fp)
    c290:	1880141e 	bne	r3,r2,c2e4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    c294:	e0bffe17 	ldw	r2,-8(fp)
    c298:	1090000c 	andi	r2,r2,16384
    c29c:	1004c03a 	cmpne	r2,r2,zero
    c2a0:	1000101e 	bne	r2,zero,c2e4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    c2a4:	e0bffb17 	ldw	r2,-20(fp)
    c2a8:	10c00a17 	ldw	r3,40(r2)
    c2ac:	e0bff717 	ldw	r2,-36(fp)
    c2b0:	1880051e 	bne	r3,r2,c2c8 <altera_avalon_jtag_uart_read+0x13c>
    c2b4:	e0bffb17 	ldw	r2,-20(fp)
    c2b8:	10c00917 	ldw	r3,36(r2)
    c2bc:	e0bffb17 	ldw	r2,-20(fp)
    c2c0:	10800117 	ldw	r2,4(r2)
    c2c4:	18bff736 	bltu	r3,r2,c2a4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    c2c8:	e0bffb17 	ldw	r2,-20(fp)
    c2cc:	10c00a17 	ldw	r3,40(r2)
    c2d0:	e0bff717 	ldw	r2,-36(fp)
    c2d4:	18800326 	beq	r3,r2,c2e4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c2d8:	e0bffd17 	ldw	r2,-12(fp)
    c2dc:	10800048 	cmpgei	r2,r2,1
    c2e0:	103fb51e 	bne	r2,zero,c1b8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    c2e4:	e0fffa17 	ldw	r3,-24(fp)
    c2e8:	e0bffc17 	ldw	r2,-16(fp)
    c2ec:	18801926 	beq	r3,r2,c354 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c2f0:	0005303a 	rdctl	r2,status
    c2f4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c2f8:	e0fff517 	ldw	r3,-44(fp)
    c2fc:	00bfff84 	movi	r2,-2
    c300:	1884703a 	and	r2,r3,r2
    c304:	1001703a 	wrctl	status,r2
  
  return context;
    c308:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    c30c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c310:	e0bffb17 	ldw	r2,-20(fp)
    c314:	10800817 	ldw	r2,32(r2)
    c318:	10c00054 	ori	r3,r2,1
    c31c:	e0bffb17 	ldw	r2,-20(fp)
    c320:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c324:	e0bffb17 	ldw	r2,-20(fp)
    c328:	10800017 	ldw	r2,0(r2)
    c32c:	11000104 	addi	r4,r2,4
    c330:	e0bffb17 	ldw	r2,-20(fp)
    c334:	10800817 	ldw	r2,32(r2)
    c338:	1007883a 	mov	r3,r2
    c33c:	2005883a 	mov	r2,r4
    c340:	10c00035 	stwio	r3,0(r2)
    c344:	e0bff917 	ldw	r2,-28(fp)
    c348:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c34c:	e0bff417 	ldw	r2,-48(fp)
    c350:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    c354:	e0fffa17 	ldw	r3,-24(fp)
    c358:	e0bffc17 	ldw	r2,-16(fp)
    c35c:	18800526 	beq	r3,r2,c374 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    c360:	e0fffa17 	ldw	r3,-24(fp)
    c364:	e0bffc17 	ldw	r2,-16(fp)
    c368:	1887c83a 	sub	r3,r3,r2
    c36c:	e0ffff15 	stw	r3,-4(fp)
    c370:	00000906 	br	c398 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    c374:	e0bffe17 	ldw	r2,-8(fp)
    c378:	1090000c 	andi	r2,r2,16384
    c37c:	1005003a 	cmpeq	r2,r2,zero
    c380:	1000031e 	bne	r2,zero,c390 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    c384:	00bffd44 	movi	r2,-11
    c388:	e0bfff15 	stw	r2,-4(fp)
    c38c:	00000206 	br	c398 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    c390:	00bffec4 	movi	r2,-5
    c394:	e0bfff15 	stw	r2,-4(fp)
    c398:	e0bfff17 	ldw	r2,-4(fp)
}
    c39c:	e037883a 	mov	sp,fp
    c3a0:	dfc00117 	ldw	ra,4(sp)
    c3a4:	df000017 	ldw	fp,0(sp)
    c3a8:	dec00204 	addi	sp,sp,8
    c3ac:	f800283a 	ret

0000c3b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c3b0:	defff204 	addi	sp,sp,-56
    c3b4:	dfc00d15 	stw	ra,52(sp)
    c3b8:	df000c15 	stw	fp,48(sp)
    c3bc:	df000c04 	addi	fp,sp,48
    c3c0:	e13ffb15 	stw	r4,-20(fp)
    c3c4:	e17ffc15 	stw	r5,-16(fp)
    c3c8:	e1bffd15 	stw	r6,-12(fp)
    c3cc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    c3d0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    c3d4:	e0bffc17 	ldw	r2,-16(fp)
    c3d8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c3dc:	00003a06 	br	c4c8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    c3e0:	e0bffb17 	ldw	r2,-20(fp)
    c3e4:	10800c17 	ldw	r2,48(r2)
    c3e8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    c3ec:	e0bffb17 	ldw	r2,-20(fp)
    c3f0:	10800d17 	ldw	r2,52(r2)
    c3f4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    c3f8:	e0fffa17 	ldw	r3,-24(fp)
    c3fc:	e0bff917 	ldw	r2,-28(fp)
    c400:	1880062e 	bgeu	r3,r2,c41c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    c404:	e0fff917 	ldw	r3,-28(fp)
    c408:	e0bffa17 	ldw	r2,-24(fp)
    c40c:	1885c83a 	sub	r2,r3,r2
    c410:	10bfffc4 	addi	r2,r2,-1
    c414:	e0bff815 	stw	r2,-32(fp)
    c418:	00000c06 	br	c44c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    c41c:	e0bff917 	ldw	r2,-28(fp)
    c420:	1005003a 	cmpeq	r2,r2,zero
    c424:	1000051e 	bne	r2,zero,c43c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    c428:	00820004 	movi	r2,2048
    c42c:	e0fffa17 	ldw	r3,-24(fp)
    c430:	10c5c83a 	sub	r2,r2,r3
    c434:	e0bff815 	stw	r2,-32(fp)
    c438:	00000406 	br	c44c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    c43c:	0081ffc4 	movi	r2,2047
    c440:	e0fffa17 	ldw	r3,-24(fp)
    c444:	10c5c83a 	sub	r2,r2,r3
    c448:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c44c:	e0bff817 	ldw	r2,-32(fp)
    c450:	1005003a 	cmpeq	r2,r2,zero
    c454:	10001f1e 	bne	r2,zero,c4d4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    c458:	e0fffd17 	ldw	r3,-12(fp)
    c45c:	e0bff817 	ldw	r2,-32(fp)
    c460:	1880022e 	bgeu	r3,r2,c46c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    c464:	e0bffd17 	ldw	r2,-12(fp)
    c468:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    c46c:	e0bffb17 	ldw	r2,-20(fp)
    c470:	10c20e04 	addi	r3,r2,2104
    c474:	e0bffa17 	ldw	r2,-24(fp)
    c478:	1885883a 	add	r2,r3,r2
    c47c:	e0fffc17 	ldw	r3,-16(fp)
    c480:	1009883a 	mov	r4,r2
    c484:	180b883a 	mov	r5,r3
    c488:	e1bff817 	ldw	r6,-32(fp)
    c48c:	00065d00 	call	65d0 <memcpy>
      ptr   += n;
    c490:	e0fff817 	ldw	r3,-32(fp)
    c494:	e0bffc17 	ldw	r2,-16(fp)
    c498:	10c5883a 	add	r2,r2,r3
    c49c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    c4a0:	e0fffd17 	ldw	r3,-12(fp)
    c4a4:	e0bff817 	ldw	r2,-32(fp)
    c4a8:	1885c83a 	sub	r2,r3,r2
    c4ac:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c4b0:	e0fffa17 	ldw	r3,-24(fp)
    c4b4:	e0bff817 	ldw	r2,-32(fp)
    c4b8:	1885883a 	add	r2,r3,r2
    c4bc:	10c1ffcc 	andi	r3,r2,2047
    c4c0:	e0bffb17 	ldw	r2,-20(fp)
    c4c4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c4c8:	e0bffd17 	ldw	r2,-12(fp)
    c4cc:	10800048 	cmpgei	r2,r2,1
    c4d0:	103fc31e 	bne	r2,zero,c3e0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c4d4:	0005303a 	rdctl	r2,status
    c4d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c4dc:	e0fff517 	ldw	r3,-44(fp)
    c4e0:	00bfff84 	movi	r2,-2
    c4e4:	1884703a 	and	r2,r3,r2
    c4e8:	1001703a 	wrctl	status,r2
  
  return context;
    c4ec:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    c4f0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c4f4:	e0bffb17 	ldw	r2,-20(fp)
    c4f8:	10800817 	ldw	r2,32(r2)
    c4fc:	10c00094 	ori	r3,r2,2
    c500:	e0bffb17 	ldw	r2,-20(fp)
    c504:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c508:	e0bffb17 	ldw	r2,-20(fp)
    c50c:	10800017 	ldw	r2,0(r2)
    c510:	11000104 	addi	r4,r2,4
    c514:	e0bffb17 	ldw	r2,-20(fp)
    c518:	10800817 	ldw	r2,32(r2)
    c51c:	1007883a 	mov	r3,r2
    c520:	2005883a 	mov	r2,r4
    c524:	10c00035 	stwio	r3,0(r2)
    c528:	e0bff717 	ldw	r2,-36(fp)
    c52c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c530:	e0bff417 	ldw	r2,-48(fp)
    c534:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    c538:	e0bffd17 	ldw	r2,-12(fp)
    c53c:	10800050 	cmplti	r2,r2,1
    c540:	1000111e 	bne	r2,zero,c588 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    c544:	e0bffe17 	ldw	r2,-8(fp)
    c548:	1090000c 	andi	r2,r2,16384
    c54c:	1004c03a 	cmpne	r2,r2,zero
    c550:	1000101e 	bne	r2,zero,c594 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    c554:	e0bffb17 	ldw	r2,-20(fp)
    c558:	10c00d17 	ldw	r3,52(r2)
    c55c:	e0bff917 	ldw	r2,-28(fp)
    c560:	1880051e 	bne	r3,r2,c578 <altera_avalon_jtag_uart_write+0x1c8>
    c564:	e0bffb17 	ldw	r2,-20(fp)
    c568:	10c00917 	ldw	r3,36(r2)
    c56c:	e0bffb17 	ldw	r2,-20(fp)
    c570:	10800117 	ldw	r2,4(r2)
    c574:	18bff736 	bltu	r3,r2,c554 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    c578:	e0bffb17 	ldw	r2,-20(fp)
    c57c:	10c00d17 	ldw	r3,52(r2)
    c580:	e0bff917 	ldw	r2,-28(fp)
    c584:	18800326 	beq	r3,r2,c594 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    c588:	e0bffd17 	ldw	r2,-12(fp)
    c58c:	10800048 	cmpgei	r2,r2,1
    c590:	103fcd1e 	bne	r2,zero,c4c8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    c594:	e0fffc17 	ldw	r3,-16(fp)
    c598:	e0bff617 	ldw	r2,-40(fp)
    c59c:	18800526 	beq	r3,r2,c5b4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    c5a0:	e0fffc17 	ldw	r3,-16(fp)
    c5a4:	e0bff617 	ldw	r2,-40(fp)
    c5a8:	1887c83a 	sub	r3,r3,r2
    c5ac:	e0ffff15 	stw	r3,-4(fp)
    c5b0:	00000906 	br	c5d8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    c5b4:	e0bffe17 	ldw	r2,-8(fp)
    c5b8:	1090000c 	andi	r2,r2,16384
    c5bc:	1005003a 	cmpeq	r2,r2,zero
    c5c0:	1000031e 	bne	r2,zero,c5d0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    c5c4:	00bffd44 	movi	r2,-11
    c5c8:	e0bfff15 	stw	r2,-4(fp)
    c5cc:	00000206 	br	c5d8 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    c5d0:	00bffec4 	movi	r2,-5
    c5d4:	e0bfff15 	stw	r2,-4(fp)
    c5d8:	e0bfff17 	ldw	r2,-4(fp)
}
    c5dc:	e037883a 	mov	sp,fp
    c5e0:	dfc00117 	ldw	ra,4(sp)
    c5e4:	df000017 	ldw	fp,0(sp)
    c5e8:	dec00204 	addi	sp,sp,8
    c5ec:	f800283a 	ret

0000c5f0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    c5f0:	defffa04 	addi	sp,sp,-24
    c5f4:	dfc00515 	stw	ra,20(sp)
    c5f8:	df000415 	stw	fp,16(sp)
    c5fc:	df000404 	addi	fp,sp,16
    c600:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    c604:	e0bfff17 	ldw	r2,-4(fp)
    c608:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    c60c:	e0bfff17 	ldw	r2,-4(fp)
    c610:	10800104 	addi	r2,r2,4
    c614:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c618:	0005303a 	rdctl	r2,status
    c61c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c620:	e0fffd17 	ldw	r3,-12(fp)
    c624:	00bfff84 	movi	r2,-2
    c628:	1884703a 	and	r2,r3,r2
    c62c:	1001703a 	wrctl	status,r2
  
  return context;
    c630:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    c634:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    c638:	000b7f00 	call	b7f0 <alt_tick>
    c63c:	e0bffe17 	ldw	r2,-8(fp)
    c640:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c644:	e0bffc17 	ldw	r2,-16(fp)
    c648:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    c64c:	e037883a 	mov	sp,fp
    c650:	dfc00117 	ldw	ra,4(sp)
    c654:	df000017 	ldw	fp,0(sp)
    c658:	dec00204 	addi	sp,sp,8
    c65c:	f800283a 	ret

0000c660 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    c660:	defff804 	addi	sp,sp,-32
    c664:	dfc00715 	stw	ra,28(sp)
    c668:	df000615 	stw	fp,24(sp)
    c66c:	df000604 	addi	fp,sp,24
    c670:	e13ffc15 	stw	r4,-16(fp)
    c674:	e17ffd15 	stw	r5,-12(fp)
    c678:	e1bffe15 	stw	r6,-8(fp)
    c67c:	e1ffff15 	stw	r7,-4(fp)
    c680:	e0bfff17 	ldw	r2,-4(fp)
    c684:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    c688:	00800074 	movhi	r2,1
    c68c:	1083f204 	addi	r2,r2,4040
    c690:	10800017 	ldw	r2,0(r2)
    c694:	1004c03a 	cmpne	r2,r2,zero
    c698:	1000041e 	bne	r2,zero,c6ac <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    c69c:	00c00074 	movhi	r3,1
    c6a0:	18c3f204 	addi	r3,r3,4040
    c6a4:	e0bffb17 	ldw	r2,-20(fp)
    c6a8:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    c6ac:	e0bffc17 	ldw	r2,-16(fp)
    c6b0:	10800104 	addi	r2,r2,4
    c6b4:	1007883a 	mov	r3,r2
    c6b8:	008001c4 	movi	r2,7
    c6bc:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    c6c0:	d8000015 	stw	zero,0(sp)
    c6c4:	e13ffd17 	ldw	r4,-12(fp)
    c6c8:	e17ffe17 	ldw	r5,-8(fp)
    c6cc:	01800074 	movhi	r6,1
    c6d0:	31b17c04 	addi	r6,r6,-14864
    c6d4:	e1fffc17 	ldw	r7,-16(fp)
    c6d8:	000c9180 	call	c918 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    c6dc:	e037883a 	mov	sp,fp
    c6e0:	dfc00117 	ldw	ra,4(sp)
    c6e4:	df000017 	ldw	fp,0(sp)
    c6e8:	dec00204 	addi	sp,sp,8
    c6ec:	f800283a 	ret

0000c6f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    c6f0:	deffff04 	addi	sp,sp,-4
    c6f4:	df000015 	stw	fp,0(sp)
    c6f8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    c6fc:	e037883a 	mov	sp,fp
    c700:	df000017 	ldw	fp,0(sp)
    c704:	dec00104 	addi	sp,sp,4
    c708:	f800283a 	ret

0000c70c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    c70c:	defff904 	addi	sp,sp,-28
    c710:	dfc00615 	stw	ra,24(sp)
    c714:	df000515 	stw	fp,20(sp)
    c718:	df000504 	addi	fp,sp,20
    c71c:	e13ffd15 	stw	r4,-12(fp)
    c720:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    c724:	e0bffd17 	ldw	r2,-12(fp)
    c728:	1005003a 	cmpeq	r2,r2,zero
    c72c:	1000041e 	bne	r2,zero,c740 <alt_dev_llist_insert+0x34>
    c730:	e0bffd17 	ldw	r2,-12(fp)
    c734:	10800217 	ldw	r2,8(r2)
    c738:	1004c03a 	cmpne	r2,r2,zero
    c73c:	1000071e 	bne	r2,zero,c75c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    c740:	000c7c00 	call	c7c0 <alt_get_errno>
    c744:	1007883a 	mov	r3,r2
    c748:	00800584 	movi	r2,22
    c74c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    c750:	00bffa84 	movi	r2,-22
    c754:	e0bfff15 	stw	r2,-4(fp)
    c758:	00001306 	br	c7a8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    c75c:	e0fffd17 	ldw	r3,-12(fp)
    c760:	e0bffe17 	ldw	r2,-8(fp)
    c764:	e0bffb15 	stw	r2,-20(fp)
    c768:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c76c:	e0fffc17 	ldw	r3,-16(fp)
    c770:	e0bffb17 	ldw	r2,-20(fp)
    c774:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    c778:	e0bffb17 	ldw	r2,-20(fp)
    c77c:	10c00017 	ldw	r3,0(r2)
    c780:	e0bffc17 	ldw	r2,-16(fp)
    c784:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c788:	e0bffb17 	ldw	r2,-20(fp)
    c78c:	10c00017 	ldw	r3,0(r2)
    c790:	e0bffc17 	ldw	r2,-16(fp)
    c794:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    c798:	e0fffb17 	ldw	r3,-20(fp)
    c79c:	e0bffc17 	ldw	r2,-16(fp)
    c7a0:	18800015 	stw	r2,0(r3)

  return 0;  
    c7a4:	e03fff15 	stw	zero,-4(fp)
    c7a8:	e0bfff17 	ldw	r2,-4(fp)
}
    c7ac:	e037883a 	mov	sp,fp
    c7b0:	dfc00117 	ldw	ra,4(sp)
    c7b4:	df000017 	ldw	fp,0(sp)
    c7b8:	dec00204 	addi	sp,sp,8
    c7bc:	f800283a 	ret

0000c7c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c7c0:	defffd04 	addi	sp,sp,-12
    c7c4:	dfc00215 	stw	ra,8(sp)
    c7c8:	df000115 	stw	fp,4(sp)
    c7cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c7d0:	00800074 	movhi	r2,1
    c7d4:	10bd4704 	addi	r2,r2,-2788
    c7d8:	10800017 	ldw	r2,0(r2)
    c7dc:	1005003a 	cmpeq	r2,r2,zero
    c7e0:	1000061e 	bne	r2,zero,c7fc <alt_get_errno+0x3c>
    c7e4:	00800074 	movhi	r2,1
    c7e8:	10bd4704 	addi	r2,r2,-2788
    c7ec:	10800017 	ldw	r2,0(r2)
    c7f0:	103ee83a 	callr	r2
    c7f4:	e0bfff15 	stw	r2,-4(fp)
    c7f8:	00000306 	br	c808 <alt_get_errno+0x48>
    c7fc:	00800074 	movhi	r2,1
    c800:	1083eb04 	addi	r2,r2,4012
    c804:	e0bfff15 	stw	r2,-4(fp)
    c808:	e0bfff17 	ldw	r2,-4(fp)
}
    c80c:	e037883a 	mov	sp,fp
    c810:	dfc00117 	ldw	ra,4(sp)
    c814:	df000017 	ldw	fp,0(sp)
    c818:	dec00204 	addi	sp,sp,8
    c81c:	f800283a 	ret

0000c820 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    c820:	defffd04 	addi	sp,sp,-12
    c824:	dfc00215 	stw	ra,8(sp)
    c828:	df000115 	stw	fp,4(sp)
    c82c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c830:	00bfff04 	movi	r2,-4
    c834:	00c00074 	movhi	r3,1
    c838:	18f54b04 	addi	r3,r3,-10964
    c83c:	1885883a 	add	r2,r3,r2
    c840:	e0bfff15 	stw	r2,-4(fp)
    c844:	00000606 	br	c860 <_do_ctors+0x40>
        (*ctor) (); 
    c848:	e0bfff17 	ldw	r2,-4(fp)
    c84c:	10800017 	ldw	r2,0(r2)
    c850:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c854:	e0bfff17 	ldw	r2,-4(fp)
    c858:	10bfff04 	addi	r2,r2,-4
    c85c:	e0bfff15 	stw	r2,-4(fp)
    c860:	e0ffff17 	ldw	r3,-4(fp)
    c864:	00800074 	movhi	r2,1
    c868:	10b54a04 	addi	r2,r2,-10968
    c86c:	18bff62e 	bgeu	r3,r2,c848 <_do_ctors+0x28>
        (*ctor) (); 
}
    c870:	e037883a 	mov	sp,fp
    c874:	dfc00117 	ldw	ra,4(sp)
    c878:	df000017 	ldw	fp,0(sp)
    c87c:	dec00204 	addi	sp,sp,8
    c880:	f800283a 	ret

0000c884 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    c884:	defffd04 	addi	sp,sp,-12
    c888:	dfc00215 	stw	ra,8(sp)
    c88c:	df000115 	stw	fp,4(sp)
    c890:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c894:	00bfff04 	movi	r2,-4
    c898:	00c00074 	movhi	r3,1
    c89c:	18f54b04 	addi	r3,r3,-10964
    c8a0:	1885883a 	add	r2,r3,r2
    c8a4:	e0bfff15 	stw	r2,-4(fp)
    c8a8:	00000606 	br	c8c4 <_do_dtors+0x40>
        (*dtor) (); 
    c8ac:	e0bfff17 	ldw	r2,-4(fp)
    c8b0:	10800017 	ldw	r2,0(r2)
    c8b4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c8b8:	e0bfff17 	ldw	r2,-4(fp)
    c8bc:	10bfff04 	addi	r2,r2,-4
    c8c0:	e0bfff15 	stw	r2,-4(fp)
    c8c4:	e0ffff17 	ldw	r3,-4(fp)
    c8c8:	00800074 	movhi	r2,1
    c8cc:	10b54b04 	addi	r2,r2,-10964
    c8d0:	18bff62e 	bgeu	r3,r2,c8ac <_do_dtors+0x28>
        (*dtor) (); 
}
    c8d4:	e037883a 	mov	sp,fp
    c8d8:	dfc00117 	ldw	ra,4(sp)
    c8dc:	df000017 	ldw	fp,0(sp)
    c8e0:	dec00204 	addi	sp,sp,8
    c8e4:	f800283a 	ret

0000c8e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c8e8:	defffe04 	addi	sp,sp,-8
    c8ec:	dfc00115 	stw	ra,4(sp)
    c8f0:	df000015 	stw	fp,0(sp)
    c8f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    c8f8:	0009883a 	mov	r4,zero
    c8fc:	01440004 	movi	r5,4096
    c900:	000d2700 	call	d270 <alt_icache_flush>
#endif
}
    c904:	e037883a 	mov	sp,fp
    c908:	dfc00117 	ldw	ra,4(sp)
    c90c:	df000017 	ldw	fp,0(sp)
    c910:	dec00204 	addi	sp,sp,8
    c914:	f800283a 	ret

0000c918 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c918:	defff904 	addi	sp,sp,-28
    c91c:	dfc00615 	stw	ra,24(sp)
    c920:	df000515 	stw	fp,20(sp)
    c924:	df000504 	addi	fp,sp,20
    c928:	e13ffc15 	stw	r4,-16(fp)
    c92c:	e17ffd15 	stw	r5,-12(fp)
    c930:	e1bffe15 	stw	r6,-8(fp)
    c934:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    c938:	e0800217 	ldw	r2,8(fp)
    c93c:	d8800015 	stw	r2,0(sp)
    c940:	e13ffc17 	ldw	r4,-16(fp)
    c944:	e17ffd17 	ldw	r5,-12(fp)
    c948:	e1bffe17 	ldw	r6,-8(fp)
    c94c:	e1ffff17 	ldw	r7,-4(fp)
    c950:	000caec0 	call	caec <alt_iic_isr_register>
}  
    c954:	e037883a 	mov	sp,fp
    c958:	dfc00117 	ldw	ra,4(sp)
    c95c:	df000017 	ldw	fp,0(sp)
    c960:	dec00204 	addi	sp,sp,8
    c964:	f800283a 	ret

0000c968 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    c968:	defff904 	addi	sp,sp,-28
    c96c:	df000615 	stw	fp,24(sp)
    c970:	df000604 	addi	fp,sp,24
    c974:	e13ffe15 	stw	r4,-8(fp)
    c978:	e17fff15 	stw	r5,-4(fp)
    c97c:	e0bfff17 	ldw	r2,-4(fp)
    c980:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c984:	0005303a 	rdctl	r2,status
    c988:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c98c:	e0fffb17 	ldw	r3,-20(fp)
    c990:	00bfff84 	movi	r2,-2
    c994:	1884703a 	and	r2,r3,r2
    c998:	1001703a 	wrctl	status,r2
  
  return context;
    c99c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c9a0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    c9a4:	e0fffc17 	ldw	r3,-16(fp)
    c9a8:	00800044 	movi	r2,1
    c9ac:	10c4983a 	sll	r2,r2,r3
    c9b0:	1007883a 	mov	r3,r2
    c9b4:	00800074 	movhi	r2,1
    c9b8:	1083f404 	addi	r2,r2,4048
    c9bc:	10800017 	ldw	r2,0(r2)
    c9c0:	1886b03a 	or	r3,r3,r2
    c9c4:	00800074 	movhi	r2,1
    c9c8:	1083f404 	addi	r2,r2,4048
    c9cc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c9d0:	00800074 	movhi	r2,1
    c9d4:	1083f404 	addi	r2,r2,4048
    c9d8:	10800017 	ldw	r2,0(r2)
    c9dc:	100170fa 	wrctl	ienable,r2
    c9e0:	e0bffd17 	ldw	r2,-12(fp)
    c9e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c9e8:	e0bffa17 	ldw	r2,-24(fp)
    c9ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c9f0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    c9f4:	e037883a 	mov	sp,fp
    c9f8:	df000017 	ldw	fp,0(sp)
    c9fc:	dec00104 	addi	sp,sp,4
    ca00:	f800283a 	ret

0000ca04 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    ca04:	defff904 	addi	sp,sp,-28
    ca08:	df000615 	stw	fp,24(sp)
    ca0c:	df000604 	addi	fp,sp,24
    ca10:	e13ffe15 	stw	r4,-8(fp)
    ca14:	e17fff15 	stw	r5,-4(fp)
    ca18:	e0bfff17 	ldw	r2,-4(fp)
    ca1c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ca20:	0005303a 	rdctl	r2,status
    ca24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ca28:	e0fffb17 	ldw	r3,-20(fp)
    ca2c:	00bfff84 	movi	r2,-2
    ca30:	1884703a 	and	r2,r3,r2
    ca34:	1001703a 	wrctl	status,r2
  
  return context;
    ca38:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ca3c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    ca40:	e0fffc17 	ldw	r3,-16(fp)
    ca44:	00800044 	movi	r2,1
    ca48:	10c4983a 	sll	r2,r2,r3
    ca4c:	0084303a 	nor	r2,zero,r2
    ca50:	1007883a 	mov	r3,r2
    ca54:	00800074 	movhi	r2,1
    ca58:	1083f404 	addi	r2,r2,4048
    ca5c:	10800017 	ldw	r2,0(r2)
    ca60:	1886703a 	and	r3,r3,r2
    ca64:	00800074 	movhi	r2,1
    ca68:	1083f404 	addi	r2,r2,4048
    ca6c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ca70:	00800074 	movhi	r2,1
    ca74:	1083f404 	addi	r2,r2,4048
    ca78:	10800017 	ldw	r2,0(r2)
    ca7c:	100170fa 	wrctl	ienable,r2
    ca80:	e0bffd17 	ldw	r2,-12(fp)
    ca84:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ca88:	e0bffa17 	ldw	r2,-24(fp)
    ca8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ca90:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    ca94:	e037883a 	mov	sp,fp
    ca98:	df000017 	ldw	fp,0(sp)
    ca9c:	dec00104 	addi	sp,sp,4
    caa0:	f800283a 	ret

0000caa4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    caa4:	defffc04 	addi	sp,sp,-16
    caa8:	df000315 	stw	fp,12(sp)
    caac:	df000304 	addi	fp,sp,12
    cab0:	e13ffe15 	stw	r4,-8(fp)
    cab4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    cab8:	000530fa 	rdctl	r2,ienable
    cabc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    cac0:	e0ffff17 	ldw	r3,-4(fp)
    cac4:	00800044 	movi	r2,1
    cac8:	10c4983a 	sll	r2,r2,r3
    cacc:	1007883a 	mov	r3,r2
    cad0:	e0bffd17 	ldw	r2,-12(fp)
    cad4:	1884703a 	and	r2,r3,r2
    cad8:	1004c03a 	cmpne	r2,r2,zero
}
    cadc:	e037883a 	mov	sp,fp
    cae0:	df000017 	ldw	fp,0(sp)
    cae4:	dec00104 	addi	sp,sp,4
    cae8:	f800283a 	ret

0000caec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    caec:	defff404 	addi	sp,sp,-48
    caf0:	dfc00b15 	stw	ra,44(sp)
    caf4:	df000a15 	stw	fp,40(sp)
    caf8:	df000a04 	addi	fp,sp,40
    cafc:	e13ffb15 	stw	r4,-20(fp)
    cb00:	e17ffc15 	stw	r5,-16(fp)
    cb04:	e1bffd15 	stw	r6,-12(fp)
    cb08:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    cb0c:	00bffa84 	movi	r2,-22
    cb10:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    cb14:	e0bffc17 	ldw	r2,-16(fp)
    cb18:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    cb1c:	e0bff917 	ldw	r2,-28(fp)
    cb20:	10800808 	cmpgei	r2,r2,32
    cb24:	1000291e 	bne	r2,zero,cbcc <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cb28:	0005303a 	rdctl	r2,status
    cb2c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cb30:	e0fff717 	ldw	r3,-36(fp)
    cb34:	00bfff84 	movi	r2,-2
    cb38:	1884703a 	and	r2,r3,r2
    cb3c:	1001703a 	wrctl	status,r2
  
  return context;
    cb40:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    cb44:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    cb48:	e0bff917 	ldw	r2,-28(fp)
    cb4c:	00c00074 	movhi	r3,1
    cb50:	18c41104 	addi	r3,r3,4164
    cb54:	100490fa 	slli	r2,r2,3
    cb58:	10c7883a 	add	r3,r2,r3
    cb5c:	e0bffd17 	ldw	r2,-12(fp)
    cb60:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    cb64:	e0bff917 	ldw	r2,-28(fp)
    cb68:	00c00074 	movhi	r3,1
    cb6c:	18c41104 	addi	r3,r3,4164
    cb70:	100490fa 	slli	r2,r2,3
    cb74:	10c5883a 	add	r2,r2,r3
    cb78:	10c00104 	addi	r3,r2,4
    cb7c:	e0bffe17 	ldw	r2,-8(fp)
    cb80:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    cb84:	e0bffd17 	ldw	r2,-12(fp)
    cb88:	1005003a 	cmpeq	r2,r2,zero
    cb8c:	1000051e 	bne	r2,zero,cba4 <alt_iic_isr_register+0xb8>
    cb90:	e17ff917 	ldw	r5,-28(fp)
    cb94:	e13ffb17 	ldw	r4,-20(fp)
    cb98:	000c9680 	call	c968 <alt_ic_irq_enable>
    cb9c:	e0bfff15 	stw	r2,-4(fp)
    cba0:	00000406 	br	cbb4 <alt_iic_isr_register+0xc8>
    cba4:	e17ff917 	ldw	r5,-28(fp)
    cba8:	e13ffb17 	ldw	r4,-20(fp)
    cbac:	000ca040 	call	ca04 <alt_ic_irq_disable>
    cbb0:	e0bfff15 	stw	r2,-4(fp)
    cbb4:	e0bfff17 	ldw	r2,-4(fp)
    cbb8:	e0bffa15 	stw	r2,-24(fp)
    cbbc:	e0bff817 	ldw	r2,-32(fp)
    cbc0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cbc4:	e0bff617 	ldw	r2,-40(fp)
    cbc8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    cbcc:	e0bffa17 	ldw	r2,-24(fp)
}
    cbd0:	e037883a 	mov	sp,fp
    cbd4:	dfc00117 	ldw	ra,4(sp)
    cbd8:	df000017 	ldw	fp,0(sp)
    cbdc:	dec00204 	addi	sp,sp,8
    cbe0:	f800283a 	ret

0000cbe4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    cbe4:	defff904 	addi	sp,sp,-28
    cbe8:	dfc00615 	stw	ra,24(sp)
    cbec:	df000515 	stw	fp,20(sp)
    cbf0:	df000504 	addi	fp,sp,20
    cbf4:	e13ffc15 	stw	r4,-16(fp)
    cbf8:	e17ffd15 	stw	r5,-12(fp)
    cbfc:	e1bffe15 	stw	r6,-8(fp)
    cc00:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    cc04:	e13ffd17 	ldw	r4,-12(fp)
    cc08:	e17ffe17 	ldw	r5,-8(fp)
    cc0c:	e1bfff17 	ldw	r6,-4(fp)
    cc10:	000cdfc0 	call	cdfc <open>
    cc14:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    cc18:	e0bffb17 	ldw	r2,-20(fp)
    cc1c:	1004803a 	cmplt	r2,r2,zero
    cc20:	10001c1e 	bne	r2,zero,cc94 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    cc24:	e0bffb17 	ldw	r2,-20(fp)
    cc28:	00c00074 	movhi	r3,1
    cc2c:	18f8c404 	addi	r3,r3,-7408
    cc30:	10800324 	muli	r2,r2,12
    cc34:	10c5883a 	add	r2,r2,r3
    cc38:	10c00017 	ldw	r3,0(r2)
    cc3c:	e0bffc17 	ldw	r2,-16(fp)
    cc40:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    cc44:	e0bffb17 	ldw	r2,-20(fp)
    cc48:	00c00074 	movhi	r3,1
    cc4c:	18f8c404 	addi	r3,r3,-7408
    cc50:	10800324 	muli	r2,r2,12
    cc54:	10c5883a 	add	r2,r2,r3
    cc58:	10800104 	addi	r2,r2,4
    cc5c:	10c00017 	ldw	r3,0(r2)
    cc60:	e0bffc17 	ldw	r2,-16(fp)
    cc64:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    cc68:	e0bffb17 	ldw	r2,-20(fp)
    cc6c:	00c00074 	movhi	r3,1
    cc70:	18f8c404 	addi	r3,r3,-7408
    cc74:	10800324 	muli	r2,r2,12
    cc78:	10c5883a 	add	r2,r2,r3
    cc7c:	10800204 	addi	r2,r2,8
    cc80:	10c00017 	ldw	r3,0(r2)
    cc84:	e0bffc17 	ldw	r2,-16(fp)
    cc88:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    cc8c:	e13ffb17 	ldw	r4,-20(fp)
    cc90:	000b63c0 	call	b63c <alt_release_fd>
  }
} 
    cc94:	e037883a 	mov	sp,fp
    cc98:	dfc00117 	ldw	ra,4(sp)
    cc9c:	df000017 	ldw	fp,0(sp)
    cca0:	dec00204 	addi	sp,sp,8
    cca4:	f800283a 	ret

0000cca8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    cca8:	defffb04 	addi	sp,sp,-20
    ccac:	dfc00415 	stw	ra,16(sp)
    ccb0:	df000315 	stw	fp,12(sp)
    ccb4:	df000304 	addi	fp,sp,12
    ccb8:	e13ffd15 	stw	r4,-12(fp)
    ccbc:	e17ffe15 	stw	r5,-8(fp)
    ccc0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    ccc4:	01000074 	movhi	r4,1
    ccc8:	2138c704 	addi	r4,r4,-7396
    cccc:	e17ffd17 	ldw	r5,-12(fp)
    ccd0:	01800044 	movi	r6,1
    ccd4:	01c07fc4 	movi	r7,511
    ccd8:	000cbe40 	call	cbe4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    ccdc:	01000074 	movhi	r4,1
    cce0:	2138c404 	addi	r4,r4,-7408
    cce4:	e17ffe17 	ldw	r5,-8(fp)
    cce8:	000d883a 	mov	r6,zero
    ccec:	01c07fc4 	movi	r7,511
    ccf0:	000cbe40 	call	cbe4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    ccf4:	01000074 	movhi	r4,1
    ccf8:	2138ca04 	addi	r4,r4,-7384
    ccfc:	e17fff17 	ldw	r5,-4(fp)
    cd00:	01800044 	movi	r6,1
    cd04:	01c07fc4 	movi	r7,511
    cd08:	000cbe40 	call	cbe4 <alt_open_fd>
}  
    cd0c:	e037883a 	mov	sp,fp
    cd10:	dfc00117 	ldw	ra,4(sp)
    cd14:	df000017 	ldw	fp,0(sp)
    cd18:	dec00204 	addi	sp,sp,8
    cd1c:	f800283a 	ret

0000cd20 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    cd20:	defffc04 	addi	sp,sp,-16
    cd24:	df000315 	stw	fp,12(sp)
    cd28:	df000304 	addi	fp,sp,12
    cd2c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    cd30:	e0bffe17 	ldw	r2,-8(fp)
    cd34:	10800217 	ldw	r2,8(r2)
    cd38:	10d00034 	orhi	r3,r2,16384
    cd3c:	e0bffe17 	ldw	r2,-8(fp)
    cd40:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    cd44:	e03ffd15 	stw	zero,-12(fp)
    cd48:	00002006 	br	cdcc <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    cd4c:	e0bffd17 	ldw	r2,-12(fp)
    cd50:	00c00074 	movhi	r3,1
    cd54:	18f8c404 	addi	r3,r3,-7408
    cd58:	10800324 	muli	r2,r2,12
    cd5c:	10c5883a 	add	r2,r2,r3
    cd60:	10c00017 	ldw	r3,0(r2)
    cd64:	e0bffe17 	ldw	r2,-8(fp)
    cd68:	10800017 	ldw	r2,0(r2)
    cd6c:	1880141e 	bne	r3,r2,cdc0 <alt_file_locked+0xa0>
    cd70:	e0bffd17 	ldw	r2,-12(fp)
    cd74:	00c00074 	movhi	r3,1
    cd78:	18f8c404 	addi	r3,r3,-7408
    cd7c:	10800324 	muli	r2,r2,12
    cd80:	10c5883a 	add	r2,r2,r3
    cd84:	10800204 	addi	r2,r2,8
    cd88:	10800017 	ldw	r2,0(r2)
    cd8c:	1004403a 	cmpge	r2,r2,zero
    cd90:	10000b1e 	bne	r2,zero,cdc0 <alt_file_locked+0xa0>
    cd94:	e0bffd17 	ldw	r2,-12(fp)
    cd98:	10800324 	muli	r2,r2,12
    cd9c:	1007883a 	mov	r3,r2
    cda0:	00800074 	movhi	r2,1
    cda4:	10b8c404 	addi	r2,r2,-7408
    cda8:	1887883a 	add	r3,r3,r2
    cdac:	e0bffe17 	ldw	r2,-8(fp)
    cdb0:	18800326 	beq	r3,r2,cdc0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    cdb4:	00bffcc4 	movi	r2,-13
    cdb8:	e0bfff15 	stw	r2,-4(fp)
    cdbc:	00000a06 	br	cde8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    cdc0:	e0bffd17 	ldw	r2,-12(fp)
    cdc4:	10800044 	addi	r2,r2,1
    cdc8:	e0bffd15 	stw	r2,-12(fp)
    cdcc:	00800074 	movhi	r2,1
    cdd0:	10bd4604 	addi	r2,r2,-2792
    cdd4:	10800017 	ldw	r2,0(r2)
    cdd8:	1007883a 	mov	r3,r2
    cddc:	e0bffd17 	ldw	r2,-12(fp)
    cde0:	18bfda2e 	bgeu	r3,r2,cd4c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    cde4:	e03fff15 	stw	zero,-4(fp)
    cde8:	e0bfff17 	ldw	r2,-4(fp)
}
    cdec:	e037883a 	mov	sp,fp
    cdf0:	df000017 	ldw	fp,0(sp)
    cdf4:	dec00104 	addi	sp,sp,4
    cdf8:	f800283a 	ret

0000cdfc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    cdfc:	defff404 	addi	sp,sp,-48
    ce00:	dfc00b15 	stw	ra,44(sp)
    ce04:	df000a15 	stw	fp,40(sp)
    ce08:	df000a04 	addi	fp,sp,40
    ce0c:	e13ffb15 	stw	r4,-20(fp)
    ce10:	e17ffc15 	stw	r5,-16(fp)
    ce14:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    ce18:	00bfffc4 	movi	r2,-1
    ce1c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    ce20:	00bffb44 	movi	r2,-19
    ce24:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    ce28:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    ce2c:	e13ffb17 	ldw	r4,-20(fp)
    ce30:	01400074 	movhi	r5,1
    ce34:	297d4404 	addi	r5,r5,-2800
    ce38:	000d0040 	call	d004 <alt_find_dev>
    ce3c:	e0bffa15 	stw	r2,-24(fp)
    ce40:	e0bffa17 	ldw	r2,-24(fp)
    ce44:	1004c03a 	cmpne	r2,r2,zero
    ce48:	1000051e 	bne	r2,zero,ce60 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    ce4c:	e13ffb17 	ldw	r4,-20(fp)
    ce50:	000d0980 	call	d098 <alt_find_file>
    ce54:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    ce58:	00800044 	movi	r2,1
    ce5c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    ce60:	e0bffa17 	ldw	r2,-24(fp)
    ce64:	1005003a 	cmpeq	r2,r2,zero
    ce68:	1000301e 	bne	r2,zero,cf2c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    ce6c:	e13ffa17 	ldw	r4,-24(fp)
    ce70:	000d1b80 	call	d1b8 <alt_get_fd>
    ce74:	e0bff815 	stw	r2,-32(fp)
    ce78:	e0bff817 	ldw	r2,-32(fp)
    ce7c:	1004403a 	cmpge	r2,r2,zero
    ce80:	1000031e 	bne	r2,zero,ce90 <open+0x94>
    {
      status = index;
    ce84:	e0bff817 	ldw	r2,-32(fp)
    ce88:	e0bff715 	stw	r2,-36(fp)
    ce8c:	00002906 	br	cf34 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    ce90:	e0bff817 	ldw	r2,-32(fp)
    ce94:	10800324 	muli	r2,r2,12
    ce98:	1007883a 	mov	r3,r2
    ce9c:	00800074 	movhi	r2,1
    cea0:	10b8c404 	addi	r2,r2,-7408
    cea4:	1885883a 	add	r2,r3,r2
    cea8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    ceac:	e0fffc17 	ldw	r3,-16(fp)
    ceb0:	00900034 	movhi	r2,16384
    ceb4:	10bfffc4 	addi	r2,r2,-1
    ceb8:	1886703a 	and	r3,r3,r2
    cebc:	e0bff917 	ldw	r2,-28(fp)
    cec0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    cec4:	e0bff617 	ldw	r2,-40(fp)
    cec8:	1004c03a 	cmpne	r2,r2,zero
    cecc:	1000061e 	bne	r2,zero,cee8 <open+0xec>
    ced0:	e13ff917 	ldw	r4,-28(fp)
    ced4:	000cd200 	call	cd20 <alt_file_locked>
    ced8:	e0bff715 	stw	r2,-36(fp)
    cedc:	e0bff717 	ldw	r2,-36(fp)
    cee0:	1004803a 	cmplt	r2,r2,zero
    cee4:	1000131e 	bne	r2,zero,cf34 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    cee8:	e0bffa17 	ldw	r2,-24(fp)
    ceec:	10800317 	ldw	r2,12(r2)
    cef0:	1005003a 	cmpeq	r2,r2,zero
    cef4:	1000091e 	bne	r2,zero,cf1c <open+0x120>
    cef8:	e0bffa17 	ldw	r2,-24(fp)
    cefc:	10800317 	ldw	r2,12(r2)
    cf00:	e13ff917 	ldw	r4,-28(fp)
    cf04:	e17ffb17 	ldw	r5,-20(fp)
    cf08:	e1bffc17 	ldw	r6,-16(fp)
    cf0c:	e1fffd17 	ldw	r7,-12(fp)
    cf10:	103ee83a 	callr	r2
    cf14:	e0bfff15 	stw	r2,-4(fp)
    cf18:	00000106 	br	cf20 <open+0x124>
    cf1c:	e03fff15 	stw	zero,-4(fp)
    cf20:	e0bfff17 	ldw	r2,-4(fp)
    cf24:	e0bff715 	stw	r2,-36(fp)
    cf28:	00000206 	br	cf34 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    cf2c:	00bffb44 	movi	r2,-19
    cf30:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    cf34:	e0bff717 	ldw	r2,-36(fp)
    cf38:	1004403a 	cmpge	r2,r2,zero
    cf3c:	1000091e 	bne	r2,zero,cf64 <open+0x168>
  {
    alt_release_fd (index);  
    cf40:	e13ff817 	ldw	r4,-32(fp)
    cf44:	000b63c0 	call	b63c <alt_release_fd>
    ALT_ERRNO = -status;
    cf48:	000cf840 	call	cf84 <alt_get_errno>
    cf4c:	e0fff717 	ldw	r3,-36(fp)
    cf50:	00c7c83a 	sub	r3,zero,r3
    cf54:	10c00015 	stw	r3,0(r2)
    return -1;
    cf58:	00bfffc4 	movi	r2,-1
    cf5c:	e0bffe15 	stw	r2,-8(fp)
    cf60:	00000206 	br	cf6c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    cf64:	e0bff817 	ldw	r2,-32(fp)
    cf68:	e0bffe15 	stw	r2,-8(fp)
    cf6c:	e0bffe17 	ldw	r2,-8(fp)
}
    cf70:	e037883a 	mov	sp,fp
    cf74:	dfc00117 	ldw	ra,4(sp)
    cf78:	df000017 	ldw	fp,0(sp)
    cf7c:	dec00204 	addi	sp,sp,8
    cf80:	f800283a 	ret

0000cf84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cf84:	defffd04 	addi	sp,sp,-12
    cf88:	dfc00215 	stw	ra,8(sp)
    cf8c:	df000115 	stw	fp,4(sp)
    cf90:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    cf94:	00800074 	movhi	r2,1
    cf98:	10bd4704 	addi	r2,r2,-2788
    cf9c:	10800017 	ldw	r2,0(r2)
    cfa0:	1005003a 	cmpeq	r2,r2,zero
    cfa4:	1000061e 	bne	r2,zero,cfc0 <alt_get_errno+0x3c>
    cfa8:	00800074 	movhi	r2,1
    cfac:	10bd4704 	addi	r2,r2,-2788
    cfb0:	10800017 	ldw	r2,0(r2)
    cfb4:	103ee83a 	callr	r2
    cfb8:	e0bfff15 	stw	r2,-4(fp)
    cfbc:	00000306 	br	cfcc <alt_get_errno+0x48>
    cfc0:	00800074 	movhi	r2,1
    cfc4:	1083eb04 	addi	r2,r2,4012
    cfc8:	e0bfff15 	stw	r2,-4(fp)
    cfcc:	e0bfff17 	ldw	r2,-4(fp)
}
    cfd0:	e037883a 	mov	sp,fp
    cfd4:	dfc00117 	ldw	ra,4(sp)
    cfd8:	df000017 	ldw	fp,0(sp)
    cfdc:	dec00204 	addi	sp,sp,8
    cfe0:	f800283a 	ret

0000cfe4 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    cfe4:	deffff04 	addi	sp,sp,-4
    cfe8:	df000015 	stw	fp,0(sp)
    cfec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    cff0:	000170fa 	wrctl	ienable,zero
}
    cff4:	e037883a 	mov	sp,fp
    cff8:	df000017 	ldw	fp,0(sp)
    cffc:	dec00104 	addi	sp,sp,4
    d000:	f800283a 	ret

0000d004 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    d004:	defff904 	addi	sp,sp,-28
    d008:	dfc00615 	stw	ra,24(sp)
    d00c:	df000515 	stw	fp,20(sp)
    d010:	df000504 	addi	fp,sp,20
    d014:	e13ffd15 	stw	r4,-12(fp)
    d018:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    d01c:	e0bffe17 	ldw	r2,-8(fp)
    d020:	10800017 	ldw	r2,0(r2)
    d024:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    d028:	e13ffd17 	ldw	r4,-12(fp)
    d02c:	00018f00 	call	18f0 <strlen>
    d030:	10800044 	addi	r2,r2,1
    d034:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d038:	00000d06 	br	d070 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    d03c:	e0bffc17 	ldw	r2,-16(fp)
    d040:	11000217 	ldw	r4,8(r2)
    d044:	e1bffb17 	ldw	r6,-20(fp)
    d048:	e17ffd17 	ldw	r5,-12(fp)
    d04c:	000d3140 	call	d314 <memcmp>
    d050:	1004c03a 	cmpne	r2,r2,zero
    d054:	1000031e 	bne	r2,zero,d064 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    d058:	e0bffc17 	ldw	r2,-16(fp)
    d05c:	e0bfff15 	stw	r2,-4(fp)
    d060:	00000706 	br	d080 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    d064:	e0bffc17 	ldw	r2,-16(fp)
    d068:	10800017 	ldw	r2,0(r2)
    d06c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d070:	e0fffe17 	ldw	r3,-8(fp)
    d074:	e0bffc17 	ldw	r2,-16(fp)
    d078:	10fff01e 	bne	r2,r3,d03c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    d07c:	e03fff15 	stw	zero,-4(fp)
    d080:	e0bfff17 	ldw	r2,-4(fp)
}
    d084:	e037883a 	mov	sp,fp
    d088:	dfc00117 	ldw	ra,4(sp)
    d08c:	df000017 	ldw	fp,0(sp)
    d090:	dec00204 	addi	sp,sp,8
    d094:	f800283a 	ret

0000d098 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    d098:	defffa04 	addi	sp,sp,-24
    d09c:	dfc00515 	stw	ra,20(sp)
    d0a0:	df000415 	stw	fp,16(sp)
    d0a4:	df000404 	addi	fp,sp,16
    d0a8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    d0ac:	00800074 	movhi	r2,1
    d0b0:	10bd4204 	addi	r2,r2,-2808
    d0b4:	10800017 	ldw	r2,0(r2)
    d0b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d0bc:	00003306 	br	d18c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    d0c0:	e0bffd17 	ldw	r2,-12(fp)
    d0c4:	11000217 	ldw	r4,8(r2)
    d0c8:	00018f00 	call	18f0 <strlen>
    d0cc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    d0d0:	e0bffd17 	ldw	r2,-12(fp)
    d0d4:	10c00217 	ldw	r3,8(r2)
    d0d8:	e0bffc17 	ldw	r2,-16(fp)
    d0dc:	1885883a 	add	r2,r3,r2
    d0e0:	10bfffc4 	addi	r2,r2,-1
    d0e4:	10800003 	ldbu	r2,0(r2)
    d0e8:	10803fcc 	andi	r2,r2,255
    d0ec:	1080201c 	xori	r2,r2,128
    d0f0:	10bfe004 	addi	r2,r2,-128
    d0f4:	10800bd8 	cmpnei	r2,r2,47
    d0f8:	1000031e 	bne	r2,zero,d108 <alt_find_file+0x70>
    {
      len -= 1;
    d0fc:	e0bffc17 	ldw	r2,-16(fp)
    d100:	10bfffc4 	addi	r2,r2,-1
    d104:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    d108:	e0bffc17 	ldw	r2,-16(fp)
    d10c:	1007883a 	mov	r3,r2
    d110:	e0bffe17 	ldw	r2,-8(fp)
    d114:	1885883a 	add	r2,r3,r2
    d118:	10800003 	ldbu	r2,0(r2)
    d11c:	10803fcc 	andi	r2,r2,255
    d120:	1080201c 	xori	r2,r2,128
    d124:	10bfe004 	addi	r2,r2,-128
    d128:	10800be0 	cmpeqi	r2,r2,47
    d12c:	10000a1e 	bne	r2,zero,d158 <alt_find_file+0xc0>
    d130:	e0bffc17 	ldw	r2,-16(fp)
    d134:	1007883a 	mov	r3,r2
    d138:	e0bffe17 	ldw	r2,-8(fp)
    d13c:	1885883a 	add	r2,r3,r2
    d140:	10800003 	ldbu	r2,0(r2)
    d144:	10803fcc 	andi	r2,r2,255
    d148:	1080201c 	xori	r2,r2,128
    d14c:	10bfe004 	addi	r2,r2,-128
    d150:	1004c03a 	cmpne	r2,r2,zero
    d154:	10000a1e 	bne	r2,zero,d180 <alt_find_file+0xe8>
    d158:	e0bffd17 	ldw	r2,-12(fp)
    d15c:	11000217 	ldw	r4,8(r2)
    d160:	e1bffc17 	ldw	r6,-16(fp)
    d164:	e17ffe17 	ldw	r5,-8(fp)
    d168:	000d3140 	call	d314 <memcmp>
    d16c:	1004c03a 	cmpne	r2,r2,zero
    d170:	1000031e 	bne	r2,zero,d180 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    d174:	e0bffd17 	ldw	r2,-12(fp)
    d178:	e0bfff15 	stw	r2,-4(fp)
    d17c:	00000806 	br	d1a0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    d180:	e0bffd17 	ldw	r2,-12(fp)
    d184:	10800017 	ldw	r2,0(r2)
    d188:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d18c:	00c00074 	movhi	r3,1
    d190:	18fd4204 	addi	r3,r3,-2808
    d194:	e0bffd17 	ldw	r2,-12(fp)
    d198:	10ffc91e 	bne	r2,r3,d0c0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    d19c:	e03fff15 	stw	zero,-4(fp)
    d1a0:	e0bfff17 	ldw	r2,-4(fp)
}
    d1a4:	e037883a 	mov	sp,fp
    d1a8:	dfc00117 	ldw	ra,4(sp)
    d1ac:	df000017 	ldw	fp,0(sp)
    d1b0:	dec00204 	addi	sp,sp,8
    d1b4:	f800283a 	ret

0000d1b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    d1b8:	defffc04 	addi	sp,sp,-16
    d1bc:	df000315 	stw	fp,12(sp)
    d1c0:	df000304 	addi	fp,sp,12
    d1c4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    d1c8:	00bffa04 	movi	r2,-24
    d1cc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d1d0:	e03ffe15 	stw	zero,-8(fp)
    d1d4:	00001e06 	br	d250 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    d1d8:	e0bffe17 	ldw	r2,-8(fp)
    d1dc:	00c00074 	movhi	r3,1
    d1e0:	18f8c404 	addi	r3,r3,-7408
    d1e4:	10800324 	muli	r2,r2,12
    d1e8:	10c5883a 	add	r2,r2,r3
    d1ec:	10800017 	ldw	r2,0(r2)
    d1f0:	1004c03a 	cmpne	r2,r2,zero
    d1f4:	1000131e 	bne	r2,zero,d244 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    d1f8:	e0bffe17 	ldw	r2,-8(fp)
    d1fc:	00c00074 	movhi	r3,1
    d200:	18f8c404 	addi	r3,r3,-7408
    d204:	10800324 	muli	r2,r2,12
    d208:	10c7883a 	add	r3,r2,r3
    d20c:	e0bfff17 	ldw	r2,-4(fp)
    d210:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    d214:	00800074 	movhi	r2,1
    d218:	10bd4604 	addi	r2,r2,-2792
    d21c:	10c00017 	ldw	r3,0(r2)
    d220:	e0bffe17 	ldw	r2,-8(fp)
    d224:	1880040e 	bge	r3,r2,d238 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    d228:	00c00074 	movhi	r3,1
    d22c:	18fd4604 	addi	r3,r3,-2792
    d230:	e0bffe17 	ldw	r2,-8(fp)
    d234:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    d238:	e0bffe17 	ldw	r2,-8(fp)
    d23c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    d240:	00000606 	br	d25c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d244:	e0bffe17 	ldw	r2,-8(fp)
    d248:	10800044 	addi	r2,r2,1
    d24c:	e0bffe15 	stw	r2,-8(fp)
    d250:	e0bffe17 	ldw	r2,-8(fp)
    d254:	10800810 	cmplti	r2,r2,32
    d258:	103fdf1e 	bne	r2,zero,d1d8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    d25c:	e0bffd17 	ldw	r2,-12(fp)
}
    d260:	e037883a 	mov	sp,fp
    d264:	df000017 	ldw	fp,0(sp)
    d268:	dec00104 	addi	sp,sp,4
    d26c:	f800283a 	ret

0000d270 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    d270:	defffb04 	addi	sp,sp,-20
    d274:	df000415 	stw	fp,16(sp)
    d278:	df000404 	addi	fp,sp,16
    d27c:	e13ffe15 	stw	r4,-8(fp)
    d280:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    d284:	e0bfff17 	ldw	r2,-4(fp)
    d288:	10840070 	cmpltui	r2,r2,4097
    d28c:	1000021e 	bne	r2,zero,d298 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    d290:	00840004 	movi	r2,4096
    d294:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    d298:	e0fffe17 	ldw	r3,-8(fp)
    d29c:	e0bfff17 	ldw	r2,-4(fp)
    d2a0:	1885883a 	add	r2,r3,r2
    d2a4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    d2a8:	e0bffe17 	ldw	r2,-8(fp)
    d2ac:	e0bffd15 	stw	r2,-12(fp)
    d2b0:	00000506 	br	d2c8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    d2b4:	e0bffd17 	ldw	r2,-12(fp)
    d2b8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    d2bc:	e0bffd17 	ldw	r2,-12(fp)
    d2c0:	10800804 	addi	r2,r2,32
    d2c4:	e0bffd15 	stw	r2,-12(fp)
    d2c8:	e0fffd17 	ldw	r3,-12(fp)
    d2cc:	e0bffc17 	ldw	r2,-16(fp)
    d2d0:	18bff836 	bltu	r3,r2,d2b4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    d2d4:	e0bffe17 	ldw	r2,-8(fp)
    d2d8:	108007cc 	andi	r2,r2,31
    d2dc:	1005003a 	cmpeq	r2,r2,zero
    d2e0:	1000021e 	bne	r2,zero,d2ec <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    d2e4:	e0bffd17 	ldw	r2,-12(fp)
    d2e8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    d2ec:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    d2f0:	e037883a 	mov	sp,fp
    d2f4:	df000017 	ldw	fp,0(sp)
    d2f8:	dec00104 	addi	sp,sp,4
    d2fc:	f800283a 	ret

0000d300 <atexit>:
    d300:	200b883a 	mov	r5,r4
    d304:	000d883a 	mov	r6,zero
    d308:	0009883a 	mov	r4,zero
    d30c:	000f883a 	mov	r7,zero
    d310:	000d3881 	jmpi	d388 <__register_exitproc>

0000d314 <memcmp>:
    d314:	00c000c4 	movi	r3,3
    d318:	1980032e 	bgeu	r3,r6,d328 <memcmp+0x14>
    d31c:	2144b03a 	or	r2,r4,r5
    d320:	10c4703a 	and	r2,r2,r3
    d324:	10000f26 	beq	r2,zero,d364 <memcmp+0x50>
    d328:	31ffffc4 	addi	r7,r6,-1
    d32c:	3000061e 	bne	r6,zero,d348 <memcmp+0x34>
    d330:	00000a06 	br	d35c <memcmp+0x48>
    d334:	39ffffc4 	addi	r7,r7,-1
    d338:	00bfffc4 	movi	r2,-1
    d33c:	21000044 	addi	r4,r4,1
    d340:	29400044 	addi	r5,r5,1
    d344:	38800526 	beq	r7,r2,d35c <memcmp+0x48>
    d348:	20c00003 	ldbu	r3,0(r4)
    d34c:	28800003 	ldbu	r2,0(r5)
    d350:	18bff826 	beq	r3,r2,d334 <memcmp+0x20>
    d354:	1885c83a 	sub	r2,r3,r2
    d358:	f800283a 	ret
    d35c:	0005883a 	mov	r2,zero
    d360:	f800283a 	ret
    d364:	180f883a 	mov	r7,r3
    d368:	20c00017 	ldw	r3,0(r4)
    d36c:	28800017 	ldw	r2,0(r5)
    d370:	18bfed1e 	bne	r3,r2,d328 <memcmp+0x14>
    d374:	31bfff04 	addi	r6,r6,-4
    d378:	21000104 	addi	r4,r4,4
    d37c:	29400104 	addi	r5,r5,4
    d380:	39bff936 	bltu	r7,r6,d368 <memcmp+0x54>
    d384:	003fe806 	br	d328 <memcmp+0x14>

0000d388 <__register_exitproc>:
    d388:	defffa04 	addi	sp,sp,-24
    d38c:	00800074 	movhi	r2,1
    d390:	10bd3d04 	addi	r2,r2,-2828
    d394:	dc000015 	stw	r16,0(sp)
    d398:	14000017 	ldw	r16,0(r2)
    d39c:	dd000415 	stw	r20,16(sp)
    d3a0:	2829883a 	mov	r20,r5
    d3a4:	81405217 	ldw	r5,328(r16)
    d3a8:	dcc00315 	stw	r19,12(sp)
    d3ac:	dc800215 	stw	r18,8(sp)
    d3b0:	dc400115 	stw	r17,4(sp)
    d3b4:	dfc00515 	stw	ra,20(sp)
    d3b8:	2023883a 	mov	r17,r4
    d3bc:	3027883a 	mov	r19,r6
    d3c0:	3825883a 	mov	r18,r7
    d3c4:	28002526 	beq	r5,zero,d45c <__register_exitproc+0xd4>
    d3c8:	29000117 	ldw	r4,4(r5)
    d3cc:	008007c4 	movi	r2,31
    d3d0:	11002716 	blt	r2,r4,d470 <__register_exitproc+0xe8>
    d3d4:	8800101e 	bne	r17,zero,d418 <__register_exitproc+0x90>
    d3d8:	2105883a 	add	r2,r4,r4
    d3dc:	1085883a 	add	r2,r2,r2
    d3e0:	20c00044 	addi	r3,r4,1
    d3e4:	1145883a 	add	r2,r2,r5
    d3e8:	0009883a 	mov	r4,zero
    d3ec:	15000215 	stw	r20,8(r2)
    d3f0:	28c00115 	stw	r3,4(r5)
    d3f4:	2005883a 	mov	r2,r4
    d3f8:	dfc00517 	ldw	ra,20(sp)
    d3fc:	dd000417 	ldw	r20,16(sp)
    d400:	dcc00317 	ldw	r19,12(sp)
    d404:	dc800217 	ldw	r18,8(sp)
    d408:	dc400117 	ldw	r17,4(sp)
    d40c:	dc000017 	ldw	r16,0(sp)
    d410:	dec00604 	addi	sp,sp,24
    d414:	f800283a 	ret
    d418:	29802204 	addi	r6,r5,136
    d41c:	00800044 	movi	r2,1
    d420:	110e983a 	sll	r7,r2,r4
    d424:	30c04017 	ldw	r3,256(r6)
    d428:	2105883a 	add	r2,r4,r4
    d42c:	1085883a 	add	r2,r2,r2
    d430:	1185883a 	add	r2,r2,r6
    d434:	19c6b03a 	or	r3,r3,r7
    d438:	14802015 	stw	r18,128(r2)
    d43c:	14c00015 	stw	r19,0(r2)
    d440:	00800084 	movi	r2,2
    d444:	30c04015 	stw	r3,256(r6)
    d448:	88bfe31e 	bne	r17,r2,d3d8 <__register_exitproc+0x50>
    d44c:	30804117 	ldw	r2,260(r6)
    d450:	11c4b03a 	or	r2,r2,r7
    d454:	30804115 	stw	r2,260(r6)
    d458:	003fdf06 	br	d3d8 <__register_exitproc+0x50>
    d45c:	00800074 	movhi	r2,1
    d460:	10845104 	addi	r2,r2,4420
    d464:	100b883a 	mov	r5,r2
    d468:	80805215 	stw	r2,328(r16)
    d46c:	003fd606 	br	d3c8 <__register_exitproc+0x40>
    d470:	00800034 	movhi	r2,0
    d474:	1083f704 	addi	r2,r2,4060
    d478:	1000021e 	bne	r2,zero,d484 <__register_exitproc+0xfc>
    d47c:	013fffc4 	movi	r4,-1
    d480:	003fdc06 	br	d3f4 <__register_exitproc+0x6c>
    d484:	01006404 	movi	r4,400
    d488:	103ee83a 	callr	r2
    d48c:	1007883a 	mov	r3,r2
    d490:	103ffa26 	beq	r2,zero,d47c <__register_exitproc+0xf4>
    d494:	80805217 	ldw	r2,328(r16)
    d498:	180b883a 	mov	r5,r3
    d49c:	18000115 	stw	zero,4(r3)
    d4a0:	18800015 	stw	r2,0(r3)
    d4a4:	80c05215 	stw	r3,328(r16)
    d4a8:	18006215 	stw	zero,392(r3)
    d4ac:	18006315 	stw	zero,396(r3)
    d4b0:	0009883a 	mov	r4,zero
    d4b4:	883fc826 	beq	r17,zero,d3d8 <__register_exitproc+0x50>
    d4b8:	003fd706 	br	d418 <__register_exitproc+0x90>
    d4bc:	00000010 	cmplti	zero,zero,0
    d4c0:	00000000 	call	0 <__reset>
    d4c4:	00527a01 	jmpi	527a0 <_gp+0x3b2b0>
    d4c8:	011f7c01 	jmpi	11f7c0 <_gp+0x1082d0>
    d4cc:	001b0c0b 	ldhu	zero,27696(zero)
    d4d0:	00000028 	cmpgeui	zero,zero,0
    d4d4:	00000018 	cmpnei	zero,zero,0
    d4d8:	00008814 	movui	zero,544
    d4dc:	000005dc 	xori	zero,zero,23
    d4e0:	400e4400 	call	400e440 <__alt_data_end+0x380e440>
    d4e4:	92099170 	cmpltui	r8,r18,9797
    d4e8:	95079308 	cmpgei	r20,r18,7756
    d4ec:	97049605 	stb	fp,4696(r18)
    d4f0:	90019f03 	ldbu	zero,1660(r18)
    d4f4:	9c06940a 	0x9c06940a
    d4f8:	00000002 	0x2
    d4fc:	00000028 	cmpgeui	zero,zero,0
    d500:	00000044 	movi	zero,1
    d504:	00008df0 	cmpltui	zero,zero,567
    d508:	000005b0 	cmpltui	zero,zero,22
    d50c:	3c0e4400 	call	3c0e440 <__alt_data_end+0x340e440>
    d510:	92099168 	cmpgeui	r8,r18,9797
    d514:	95079308 	cmpgei	r20,r18,7756
    d518:	9c039705 	stb	r16,3676(r19)
    d51c:	90019f02 	0x90019f02
    d520:	9606940a 	0x9606940a
    d524:	00000004 	movi	zero,0
    d528:	000039c8 	cmpgei	zero,zero,231
